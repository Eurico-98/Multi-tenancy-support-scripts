<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.5">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="A3 - Throughput Test - scenario 3 - Spike Traffic" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery"></stringProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="connectionProperties"></stringProp>
        <stringProp name="dataSource">Throughput-test-1</stringProp>
        <stringProp name="dbUrl">jdbc:postgresql://a2.cob7aqndu7dk.eu-north-1.rds.amazonaws.com:5432/postgres</stringProp>
        <stringProp name="driver">org.postgresql.Driver</stringProp>
        <stringProp name="initQuery"></stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password">BD_RDS_EC2_instances_172635</stringProp>
        <stringProp name="poolMax">0</stringProp>
        <boolProp name="preinit">false</boolProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">postgres</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>false</assertions>
            <subresults>true</subresults>
            <responseData>true</responseData>
            <samplerData>true</samplerData>
            <xml>true</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <fileName>true</fileName>
            <threadCounts>true</threadCounts>
            <sampleCount>true</sampleCount>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>false</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>true</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <threadCounts>true</threadCounts>
            <sampleCount>true</sampleCount>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="T1" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <RandomOrderController guiclass="RandomOrderControllerGui" testclass="RandomOrderController" testname="Random Order Controller" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T1 - Q1" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="query">select l_returnflag, l_linestatus, sum(l_quantity) as sum_qty, sum(l_extendedprice) as sum_base_price, sum(l_extendedprice * (1 - l_discount)) as sum_disc_price, sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge, avg(l_quantity) as avg_qty, avg(l_extendedprice) as avg_price, avg(l_discount) as avg_disc, count(*) as count_order from lineitem where l_tenant_id = 1 and l_shipdate &lt;= date &apos;1998-12-01&apos; - interval &apos;60&apos; day group by l_returnflag, l_linestatus order by l_returnflag, l_linestatus;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T1 - Q2" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select s_acctbal, s_name, n_name, p_partkey, p_mfgr, s_address, s_phone, s_comment from part, supplier, partsupp, nation, region where p_tenant_id = 1 and s_tenant_id = 1 and ps_tenant_id = 1 and p_partkey = ps_partkey and s_suppkey = ps_suppkey and p_size = 31 and p_type like &apos;%COPPER&apos; and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; and ps_supplycost = ( select min(ps_supplycost) from partsupp, supplier, nation, region where ps_tenant_id = 1 and s_tenant_id = 1 and p_partkey = ps_partkey and s_suppkey = ps_suppkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; ) order by s_acctbal desc, n_name, s_name, p_partkey limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T1 - Q3" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select l_orderkey, sum(l_extendedprice * (1 - l_discount)) as revenue, o_orderdate, o_shippriority from customer, orders, lineitem where c_tenant_id = 1 and o_tenant_id = 1 and l_tenant_id = 1 and c_mktsegment = &apos;BUILDING&apos; and c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate &lt; date &apos;1995-03-06&apos; and l_shipdate &gt; date &apos;1995-03-06&apos; group by l_orderkey, o_orderdate, o_shippriority order by revenue desc, o_orderdate limit 10;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T1 - Q4" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select o_orderpriority, count(*) as order_count from orders where o_tenant_id = 1 and o_orderdate &gt;= date &apos;1993-11-01&apos; and o_orderdate &lt; date &apos;1993-11-01&apos; + interval &apos;3&apos; month and exists ( select * from lineitem where l_tenant_id = 1 and l_orderkey = o_orderkey and l_commitdate &lt; l_receiptdate ) group by o_orderpriority order by o_orderpriority;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T1 - Q5" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select n_name, sum(l_extendedprice * (1 - l_discount)) as revenue from customer, orders, lineitem, supplier, nation, region where c_tenant_id = 1 and o_tenant_id = 1 and l_tenant_id = 1 and s_tenant_id = 1 and c_custkey = o_custkey and l_orderkey = o_orderkey and l_suppkey = s_suppkey and c_nationkey = s_nationkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; and o_orderdate &gt;= date &apos;1993-01-01&apos; and o_orderdate &lt; date &apos;1993-01-01&apos; + interval &apos;1&apos; year group by n_name order by revenue desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T1 - Q6" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select sum(l_extendedprice * l_discount) as revenue from lineitem where l_tenant_id = 1 and l_shipdate &gt;= date &apos;1993-01-01&apos; and l_shipdate &lt; date &apos;1993-01-01&apos; + interval &apos;1&apos; year and l_discount between 0.05 - 0.01 and 0.05 + 0.01 and l_quantity &lt; 24;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T1 - Q7" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select supp_nation, cust_nation, l_year, sum(volume) as revenue from ( select n1.n_name as supp_nation, n2.n_name as cust_nation, extract(year from l_shipdate) as l_year, l_extendedprice * (1 - l_discount) as volume from supplier, lineitem, orders, customer, nation n1, nation n2 where s_tenant_id = 1 and l_tenant_id = 1 and o_tenant_id = 1 and c_tenant_id = 1 and s_suppkey = l_suppkey and o_orderkey = l_orderkey and c_custkey = o_custkey and s_nationkey = n1.n_nationkey and c_nationkey = n2.n_nationkey and ( (n1.n_name = &apos;IRAN&apos; and n2.n_name = &apos;GERMANY&apos;) or (n1.n_name = &apos;GERMANY&apos; and n2.n_name = &apos;IRAN&apos;) ) and l_shipdate between date &apos;1995-01-01&apos; and date &apos;1996-12-31&apos; ) as shipping group by supp_nation, cust_nation, l_year order by supp_nation, cust_nation, l_year;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T1 - Q8" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select o_year, sum(case when nation = &apos;GERMANY&apos; then volume else 0 end) / sum(volume) as mkt_share from ( select extract(year from o_orderdate) as o_year, l_extendedprice * (1 - l_discount) as volume, n2.n_name as nation from part, supplier, lineitem, orders, customer, nation n1, nation n2, region where p_tenant_id = 1 and s_tenant_id = 1 and l_tenant_id = 1 and o_tenant_id = 1 and c_tenant_id = 1 and p_partkey = l_partkey and s_suppkey = l_suppkey and l_orderkey = o_orderkey and o_custkey = c_custkey and c_nationkey = n1.n_nationkey and n1.n_regionkey = r_regionkey and r_name = &apos;EUROPE&apos; and s_nationkey = n2.n_nationkey and o_orderdate between date &apos;1995-01-01&apos; and date &apos;1996-12-31&apos; and p_type = &apos;PROMO PLATED STEEL&apos; ) as all_nations group by o_year order by o_year;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T1 - Q9" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select nation, o_year, sum(amount) as sum_profit from ( select n_name as nation, extract(year from o_orderdate) as o_year, l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity as amount from part, supplier, lineitem, partsupp, orders, nation where p_tenant_id = 1 and s_tenant_id = 1 and l_tenant_id = 1 and ps_tenant_id = 1 and o_tenant_id = 1 and s_suppkey = l_suppkey and ps_suppkey = l_suppkey and ps_partkey = l_partkey and p_partkey = l_partkey and o_orderkey = l_orderkey and s_nationkey = n_nationkey and p_name like &apos;%tan%&apos; ) as profit group by nation, o_year order by nation, o_year desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T1 - Q10" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_custkey, c_name, sum(l_extendedprice * (1 - l_discount)) as revenue, c_acctbal, n_name, c_address, c_phone, c_comment from customer, orders, lineitem, nation where c_tenant_id = 1 and o_tenant_id = 1 and l_tenant_id = 1 and c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate &gt;= date &apos;1994-01-01&apos; and o_orderdate &lt; date &apos;1994-01-01&apos; + interval &apos;3&apos; month and l_returnflag = &apos;R&apos; and c_nationkey = n_nationkey group by c_custkey, c_name, c_acctbal, c_phone, n_name, c_address, c_comment order by revenue desc limit 20;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T1 - Q11" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select ps_partkey, sum(ps_supplycost * ps_availqty) as value from partsupp, supplier, nation where ps_tenant_id = 1 and s_tenant_id = 1 and ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = &apos;MOZAMBIQUE&apos; group by ps_partkey having sum(ps_supplycost * ps_availqty) &gt; ( select sum(ps_supplycost * ps_availqty) * 0.0000002331 from partsupp, supplier, nation where ps_tenant_id = 1 and s_tenant_id = 1 and ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = &apos;MOZAMBIQUE&apos; ) order by value desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T1 - Q12" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select l_shipmode, sum(case when o_orderpriority = &apos;1-URGENT&apos; or o_orderpriority = &apos;2-HIGH&apos; then 1 else 0 end) as high_line_count, sum(case when o_orderpriority &lt;&gt; &apos;1-URGENT&apos; and o_orderpriority &lt;&gt; &apos;2-HIGH&apos; then 1 else 0 end) as low_line_count from orders, lineitem where o_tenant_id = 1 and l_tenant_id = 1 and o_orderkey = l_orderkey and l_shipmode in (&apos;SHIP&apos;, &apos;RAIL&apos;) and l_commitdate &lt; l_receiptdate and l_shipdate &lt; l_commitdate and l_receiptdate &gt;= date &apos;1995-01-01&apos; and l_receiptdate &lt; date &apos;1995-01-01&apos; + interval &apos;1&apos; year group by l_shipmode order by l_shipmode;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T1 - Q13" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_count, count(*) as custdist from ( select c_custkey, count(o_orderkey) from customer left outer join orders on c_custkey = o_custkey and o_comment not like &apos;%express%requests%&apos; where c_tenant_id = 1 group by c_custkey ) as c_orders (c_custkey, c_count) group by c_count order by custdist desc, c_count desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T1 - Q14" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select 100.00 * sum(case when p_type like &apos;PROMO%&apos; then l_extendedprice * (1 - l_discount) else 0 end) / sum(l_extendedprice * (1 - l_discount)) as promo_revenue from lineitem, part where l_tenant_id = 1 and p_tenant_id = 1 and l_partkey = p_partkey and l_shipdate &gt;= date &apos;1994-12-01&apos; and l_shipdate &lt; date &apos;1994-12-01&apos; + interval &apos;1&apos; month;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T1 - Q15" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Callable Statement</stringProp>
            <stringProp name="query">create view revenue0 (supplier_no, total_revenue) as select l_suppkey, sum(l_extendedprice * (1 - l_discount)) from lineitem where l_tenant_id = 1 and l_shipdate &gt;= date &apos;1995-12-01&apos; and l_shipdate &lt; date &apos;1995-12-01&apos; + interval &apos;3&apos; month group by l_suppkey; select s_suppkey, s_name, s_address, s_phone, total_revenue from supplier, revenue0 where s_tenant_id = 1 and s_suppkey = supplier_no and total_revenue = ( select max(total_revenue) from revenue0 ) order by s_suppkey; drop view revenue0;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T1 - Q16" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select p_brand, p_type, p_size, count(distinct ps_suppkey) as supplier_cnt from partsupp, part where ps_tenant_id = 1 and p_tenant_id = 1 and p_partkey = ps_partkey and p_brand &lt;&gt; &apos;Brand#53&apos; and p_type not like &apos;MEDIUM BURNISHED%&apos; and p_size in (20, 48, 2, 43, 21, 14, 44, 33) and ps_suppkey not in ( select s_suppkey from supplier where s_tenant_id = 1 and s_comment like &apos;%Customer%Complaints%&apos; ) group by p_brand, p_type, p_size order by supplier_cnt desc, p_brand, p_type, p_size;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T1 - Q18" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice, sum(l_quantity) from customer, orders, lineitem where c_tenant_id = 1 and o_tenant_id = 1 and l_tenant_id = 1 and o_orderkey in ( select l_orderkey from lineitem where l_tenant_id = 1 group by l_orderkey having sum(l_quantity) &gt; 313 ) and c_custkey = o_custkey and o_orderkey = l_orderkey group by c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice order by o_totalprice desc, o_orderdate limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T1 - Q19" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select sum(l_extendedprice* (1 - l_discount)) as revenue from lineitem, part where l_tenant_id = 1 and p_tenant_id = 1 and (( p_partkey = l_partkey and p_brand = &apos;Brand#25&apos; and p_container in (&apos;SM CasE&apos;, &apos;SM BOX&apos;, &apos;SM PACK&apos;, &apos;SM PKG&apos;) and l_quantity &gt;= 9 and l_quantity &lt;= 9 + 10 and p_size between 1 and 5 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ) or ( p_partkey = l_partkey and p_brand = &apos;Brand#55&apos; and p_container in (&apos;MED BAG&apos;, &apos;MED BOX&apos;, &apos;MED PKG&apos;, &apos;MED PACK&apos;) and l_quantity &gt;= 16 and l_quantity &lt;= 16 + 10 and p_size between 1 and 10 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ) or ( p_partkey = l_partkey and p_brand = &apos;Brand#21&apos; and p_container in (&apos;LG CasE&apos;, &apos;LG BOX&apos;, &apos;LG PACK&apos;, &apos;LG PKG&apos;) and l_quantity &gt;= 28 and l_quantity &lt;= 28 + 10 and p_size between 1 and 15 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos;));
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T1 - Q21" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select s_name, count(*) as numwait from supplier, lineitem l1, orders, nation where s_tenant_id = 1 and l1.l_tenant_id = 1 and o_tenant_id = 1 and s_suppkey = l1.l_suppkey and o_orderkey = l1.l_orderkey and o_orderstatus = &apos;F&apos; and l1.l_receiptdate &gt; l1.l_commitdate and exists ( select * from lineitem l2 where l2.l_tenant_id = 1 and l2.l_orderkey = l1.l_orderkey and l2.l_suppkey &lt;&gt; l1.l_suppkey ) and not exists ( select * from lineitem l3 where l3.l_tenant_id = 1 and l3.l_orderkey = l1.l_orderkey and l3.l_suppkey &lt;&gt; l1.l_suppkey and l3.l_receiptdate &gt; l3.l_commitdate ) and s_nationkey = n_nationkey and n_name = &apos;UNITED KINGDOM&apos; group by s_name order by numwait desc, s_name limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T1 - Q22" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select cntrycode, count(*) as numcust, sum(c_acctbal) as totacctbal from ( select substring(c_phone from 1 for 2) as cntrycode, c_acctbal from customer where c_tenant_id = 1 and substring(c_phone from 1 for 2) in (&apos;30&apos;, &apos;19&apos;, &apos;16&apos;, &apos;31&apos;, &apos;26&apos;, &apos;13&apos;, &apos;12&apos;) and c_acctbal &gt; ( select avg(c_acctbal) from customer where c_tenant_id = 1 and c_acctbal &gt; 0.00 and substring(c_phone from 1 for 2) in (&apos;30&apos;, &apos;19&apos;, &apos;16&apos;, &apos;31&apos;, &apos;26&apos;, &apos;13&apos;, &apos;12&apos;) ) and not exists ( select * from orders where o_tenant_id = 1 and o_custkey = c_custkey ) ) as custsale group by cntrycode order by cntrycode;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T1 - RF1" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO region (r_regionkey, r_name, r_comment) VALUES (123476241, &apos;AFRICA&apos;, &apos;lar deposits. blithely final packages cajole. regular&apos;);
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T1 - RF2" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">DELETE FROM region WHERE r_regionkey = 123476241;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="T2" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <RandomOrderController guiclass="RandomOrderControllerGui" testclass="RandomOrderController" testname="Random Order Controller" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T2 - Q1" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="query">select l_returnflag, l_linestatus, sum(l_quantity) as sum_qty, sum(l_extendedprice) as sum_base_price, sum(l_extendedprice * (1 - l_discount)) as sum_disc_price, sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge, avg(l_quantity) as avg_qty, avg(l_extendedprice) as avg_price, avg(l_discount) as avg_disc, count(*) as count_order from lineitem where l_tenant_id = 2 and l_shipdate &lt;= date &apos;1998-12-01&apos; - interval &apos;61&apos; day group by l_returnflag, l_linestatus order by l_returnflag, l_linestatus;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T2 - Q2" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select s_acctbal, s_name, n_name, p_partkey, p_mfgr, s_address, s_phone, s_comment from part, supplier, partsupp, nation, region where p_tenant_id = 2 and s_tenant_id = 2 and ps_tenant_id = 2 and p_partkey = ps_partkey and s_suppkey = ps_suppkey and p_size = 14 and p_type like &apos;%BRASS&apos; and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; and ps_supplycost = ( select min(ps_supplycost) from partsupp, supplier, nation, region where ps_tenant_id = 2 and s_tenant_id = 2 and p_partkey = ps_partkey and s_suppkey = ps_suppkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; ) order by s_acctbal desc, n_name, s_name, p_partkey limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T2 - Q3" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select l_orderkey, sum(l_extendedprice * (1 - l_discount)) as revenue, o_orderdate, o_shippriority from customer, orders, lineitem where c_tenant_id = 2 and o_tenant_id = 2 and l_tenant_id = 2 and c_mktsegment = &apos;BUILDING&apos; and c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate &lt; date &apos;1995-03-06&apos; and l_shipdate &gt; date &apos;1995-03-06&apos; group by l_orderkey, o_orderdate, o_shippriority order by revenue desc, o_orderdate limit 10;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T2 - Q4" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select o_orderpriority, count(*) as order_count from orders where o_tenant_id = 2 and o_orderdate &gt;= date &apos;1993-12-01&apos; and o_orderdate &lt; date &apos;1993-12-01&apos; + interval &apos;3&apos; month and exists ( select * from lineitem where l_tenant_id = 2 and l_orderkey = o_orderkey and l_commitdate &lt; l_receiptdate ) group by o_orderpriority order by o_orderpriority;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T2 - Q5" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select n_name, sum(l_extendedprice * (1 - l_discount)) as revenue from customer, orders, lineitem, supplier, nation, region where c_tenant_id = 2 and o_tenant_id = 2 and l_tenant_id = 2 and s_tenant_id = 2 and c_custkey = o_custkey and l_orderkey = o_orderkey and l_suppkey = s_suppkey and c_nationkey = s_nationkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; and o_orderdate &gt;= date &apos;1994-01-01&apos; and o_orderdate &lt; date &apos;1994-01-01&apos; + interval &apos;1&apos; year group by n_name order by revenue desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T2 - Q6" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select sum(l_extendedprice * l_discount) as revenue from lineitem where l_tenant_id = 2 and l_shipdate &gt;= date &apos;1994-01-01&apos; and l_shipdate &lt; date &apos;1994-01-01&apos; + interval &apos;1&apos; year and l_discount between 0.09 - 0.01 and 0.09 + 0.01 and l_quantity &lt; 25;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T2 - Q7" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select supp_nation, cust_nation, l_year, sum(volume) as revenue from ( select n1.n_name as supp_nation, n2.n_name as cust_nation, extract(year from l_shipdate) as l_year, l_extendedprice * (1 - l_discount) as volume from supplier, lineitem, orders, customer, nation n1, nation n2 where s_tenant_id = 2 and l_tenant_id = 2 and o_tenant_id = 2 and c_tenant_id = 2 and s_suppkey = l_suppkey and o_orderkey = l_orderkey and c_custkey = o_custkey and s_nationkey = n1.n_nationkey and c_nationkey = n2.n_nationkey and ( (n1.n_name = &apos;RUSSIA&apos; and n2.n_name = &apos;ROMANIA&apos;) or (n1.n_name = &apos;ROMANIA&apos; and n2.n_name = &apos;RUSSIA&apos;) ) and l_shipdate between date &apos;1995-01-01&apos; and date &apos;1996-12-31&apos; ) as shipping group by supp_nation, cust_nation, l_year order by supp_nation, cust_nation, l_year;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T2 - Q8" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select o_year, sum(case when nation = &apos;ROMANIA&apos; then volume else 0 end) / sum(volume) as mkt_share from ( select extract(year from o_orderdate) as o_year, l_extendedprice * (1 - l_discount) as volume, n2.n_name as nation from part, supplier, lineitem, orders, customer, nation n1, nation n2, region where p_tenant_id = 2 and s_tenant_id = 2 and l_tenant_id = 2 and o_tenant_id = 2 and c_tenant_id = 2 and p_partkey = l_partkey and s_suppkey = l_suppkey and l_orderkey = o_orderkey and o_custkey = c_custkey and c_nationkey = n1.n_nationkey and n1.n_regionkey = r_regionkey and r_name = &apos;EUROPE&apos; and s_nationkey = n2.n_nationkey and o_orderdate between date &apos;1995-01-01&apos; and date &apos;1996-12-31&apos; and p_type = &apos;PROMO ANODIZED TIN&apos; ) as all_nations group by o_year order by o_year;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T2 - Q9" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select nation, o_year, sum(amount) as sum_profit from ( select n_name as nation, extract(year from o_orderdate) as o_year, l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity as amount from part, supplier, lineitem, partsupp, orders, nation where p_tenant_id = 2 and s_tenant_id = 2 and l_tenant_id = 2 and ps_tenant_id = 2 and o_tenant_id = 2 and s_suppkey = l_suppkey and ps_suppkey = l_suppkey and ps_partkey = l_partkey and p_partkey = l_partkey and o_orderkey = l_orderkey and s_nationkey = n_nationkey and p_name like &apos;%sienna%&apos; ) as profit group by nation, o_year order by nation, o_year desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T2 - Q10" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_custkey, c_name, sum(l_extendedprice * (1 - l_discount)) as revenue, c_acctbal, n_name, c_address, c_phone, c_comment from customer, orders, lineitem, nation where c_tenant_id = 2 and o_tenant_id = 2 and l_tenant_id = 2 and c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate &gt;= date &apos;1993-04-01&apos; and o_orderdate &lt; date &apos;1993-04-01&apos; + interval &apos;3&apos; month and l_returnflag = &apos;R&apos; and c_nationkey = n_nationkey group by c_custkey, c_name, c_acctbal, c_phone, n_name, c_address, c_comment order by revenue desc limit 20;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T2 - Q11" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select ps_partkey, sum(ps_supplycost * ps_availqty) as value from partsupp, supplier, nation where ps_tenant_id = 2 and s_tenant_id = 2 and ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = &apos;INDONESIA&apos; group by ps_partkey having sum(ps_supplycost * ps_availqty) &gt; ( select sum(ps_supplycost * ps_availqty) * 0.0000090909 from partsupp, supplier, nation where ps_tenant_id = 2 and s_tenant_id = 2 and ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = &apos;INDONESIA&apos; ) order by value desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T2 - Q12" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select l_shipmode, sum(case when o_orderpriority = &apos;1-URGENT&apos; or o_orderpriority = &apos;2-HIGH&apos; then 1 else 0 end) as high_line_count, sum(case when o_orderpriority &lt;&gt; &apos;1-URGENT&apos; and o_orderpriority &lt;&gt; &apos;2-HIGH&apos; then 1 else 0 end) as low_line_count from orders, lineitem where o_tenant_id = 2 and l_tenant_id = 2 and o_orderkey = l_orderkey and l_shipmode in (&apos;RAIL&apos;, &apos;TRUCK&apos;) and l_commitdate &lt; l_receiptdate and l_shipdate &lt; l_commitdate and l_receiptdate &gt;= date &apos;1995-01-01&apos; and l_receiptdate &lt; date &apos;1995-01-01&apos; + interval &apos;1&apos; year group by l_shipmode order by l_shipmode;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T2 - Q13" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_count, count(*) as custdist from ( select c_custkey, count(o_orderkey) from customer left outer join orders on c_custkey = o_custkey and o_comment not like &apos;%pending%accounts%&apos; where c_tenant_id = 2 group by c_custkey ) as c_orders (c_custkey, c_count) group by c_count order by custdist desc, c_count desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T2 - Q14" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select 100.00 * sum(case when p_type like &apos;PROMO%&apos; then l_extendedprice * (1 - l_discount) else 0 end) / sum(l_extendedprice * (1 - l_discount)) as promo_revenue from lineitem, part where l_tenant_id = 2 and p_tenant_id = 2 and l_partkey = p_partkey and l_shipdate &gt;= date &apos;1995-12-01&apos; and l_shipdate &lt; date &apos;1995-12-01&apos; + interval &apos;1&apos; month;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T2 - Q15" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Callable Statement</stringProp>
            <stringProp name="query">create view revenue0 (supplier_no, total_revenue) as select l_suppkey, sum(l_extendedprice * (1 - l_discount)) from lineitem where l_tenant_id = 2 and l_shipdate &gt;= date &apos;1993-08-01&apos; and l_shipdate &lt; date &apos;1993-08-01&apos; + interval &apos;3&apos; month group by l_suppkey; select s_suppkey, s_name, s_address, s_phone, total_revenue from supplier, revenue0 where s_tenant_id = 2 and s_suppkey = supplier_no and total_revenue = ( select max(total_revenue) from revenue0 ) order by s_suppkey; drop view revenue0;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T2 - Q16" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select p_brand, p_type, p_size, count(distinct ps_suppkey) as supplier_cnt from partsupp, part where ps_tenant_id = 2 and p_tenant_id = 2 and p_partkey = ps_partkey and p_brand &lt;&gt; &apos;Brand#52&apos; and p_type not like &apos;LARGE BRUSHED%&apos; and p_size in (20, 35, 34, 50, 23, 28, 48, 17) and ps_suppkey not in ( select s_suppkey from supplier where s_tenant_id = 2 and s_comment like &apos;%Customer%Complaints%&apos; ) group by p_brand, p_type, p_size order by supplier_cnt desc, p_brand, p_type, p_size;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T2 - Q18" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice, sum(l_quantity) from customer, orders, lineitem where c_tenant_id = 2 and o_tenant_id = 2 and l_tenant_id = 2 and o_orderkey in ( select l_orderkey from lineitem where l_tenant_id = 2 group by l_orderkey having sum(l_quantity) &gt; 314 ) and c_custkey = o_custkey and o_orderkey = l_orderkey group by c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice order by o_totalprice desc, o_orderdate limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T2 - Q19" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select sum(l_extendedprice* (1 - l_discount)) as revenue from lineitem, part where l_tenant_id = 2 and p_tenant_id = 2 and (( p_partkey = l_partkey and p_brand = &apos;Brand#24&apos; and p_container in (&apos;SM CasE&apos;, &apos;SM BOX&apos;, &apos;SM PACK&apos;, &apos;SM PKG&apos;) and l_quantity &gt;= 10 and l_quantity &lt;= 10 + 10 and p_size between 1 and 5 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ) or ( p_partkey = l_partkey and p_brand = &apos;Brand#45&apos; and p_container in (&apos;MED BAG&apos;, &apos;MED BOX&apos;, &apos;MED PKG&apos;, &apos;MED PACK&apos;) and l_quantity &gt;= 12 and l_quantity &lt;= 12 + 10 and p_size between 1 and 10 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ) or ( p_partkey = l_partkey and p_brand = &apos;Brand#33&apos; and p_container in (&apos;LG CasE&apos;, &apos;LG BOX&apos;, &apos;LG PACK&apos;, &apos;LG PKG&apos;) and l_quantity &gt;= 30 and l_quantity &lt;= 30 + 10 and p_size between 1 and 15 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos;));
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T2 - Q21" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select s_name, count(*) as numwait from supplier, lineitem l1, orders, nation where s_tenant_id = 2 and l1.l_tenant_id = 2 and o_tenant_id = 2 and s_suppkey = l1.l_suppkey and o_orderkey = l1.l_orderkey and o_orderstatus = &apos;F&apos; and l1.l_receiptdate &gt; l1.l_commitdate and exists ( select * from lineitem l2 where l2.l_tenant_id = 2 and l2.l_orderkey = l1.l_orderkey and l2.l_suppkey &lt;&gt; l1.l_suppkey ) and not exists ( select * from lineitem l3 where l3.l_tenant_id = 2 and l3.l_orderkey = l1.l_orderkey and l3.l_suppkey &lt;&gt; l1.l_suppkey and l3.l_receiptdate &gt; l3.l_commitdate ) and s_nationkey = n_nationkey and n_name = &apos;MOZAMBIQUE&apos; group by s_name order by numwait desc, s_name limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T2 - Q22" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select cntrycode, count(*) as numcust, sum(c_acctbal) as totacctbal from ( select substring(c_phone from 1 for 2) as cntrycode, c_acctbal from customer where c_tenant_id = 2 and substring(c_phone from 1 for 2) in (&apos;34&apos;, &apos;20&apos;, &apos;23&apos;, &apos;33&apos;, &apos;18&apos;, &apos;10&apos;, &apos;30&apos;) and c_acctbal &gt; ( select avg(c_acctbal) from customer where c_tenant_id = 2 and c_acctbal &gt; 0.00 and substring(c_phone from 1 for 2) in (&apos;34&apos;, &apos;20&apos;, &apos;23&apos;, &apos;33&apos;, &apos;18&apos;, &apos;10&apos;, &apos;30&apos;) ) and not exists ( select * from orders where o_tenant_id = 2 and o_custkey = c_custkey ) ) as custsale group by cntrycode order by cntrycode;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T2 - RF1" enabled="false">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO region (r_regionkey, r_name, r_comment) VALUES (123476241, &apos;AFRICA&apos;, &apos;lar deposits. blithely final packages cajole. regular&apos;);
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T2 - RF2" enabled="false">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">DELETE FROM region WHERE r_regionkey = 123476241;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="T3" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <RandomOrderController guiclass="RandomOrderControllerGui" testclass="RandomOrderController" testname="Random Order Controller" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T3 - Q1" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="query">select l_returnflag, l_linestatus, sum(l_quantity) as sum_qty, sum(l_extendedprice) as sum_base_price, sum(l_extendedprice * (1 - l_discount)) as sum_disc_price, sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge, avg(l_quantity) as avg_qty, avg(l_extendedprice) as avg_price, avg(l_discount) as avg_disc, count(*) as count_order from lineitem where l_tenant_id = 3 and l_shipdate &lt;= date &apos;1998-12-01&apos; - interval &apos;69&apos; day group by l_returnflag, l_linestatus order by l_returnflag, l_linestatus;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T3 - Q2" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select s_acctbal, s_name, n_name, p_partkey, p_mfgr, s_address, s_phone, s_comment from part, supplier, partsupp, nation, region where p_tenant_id = 3 and s_tenant_id = 3 and ps_tenant_id = 3 and p_partkey = ps_partkey and s_suppkey = ps_suppkey and p_size = 2 and p_type like &apos;%NICKEL&apos; and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;EUROPE&apos; and ps_supplycost = ( select min(ps_supplycost) from partsupp, supplier, nation, region where ps_tenant_id = 3 and s_tenant_id = 3 and p_partkey = ps_partkey and s_suppkey = ps_suppkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;EUROPE&apos; ) order by s_acctbal desc, n_name, s_name, p_partkey limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T3 - Q3" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select l_orderkey, sum(l_extendedprice * (1 - l_discount)) as revenue, o_orderdate, o_shippriority from customer, orders, lineitem where c_tenant_id = 3 and o_tenant_id = 3 and l_tenant_id = 3 and c_mktsegment = &apos;MACHINERY&apos; and c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate &lt; date &apos;1995-03-23&apos; and l_shipdate &gt; date &apos;1995-03-23&apos; group by l_orderkey, o_orderdate, o_shippriority order by revenue desc, o_orderdate limit 10;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T3 - Q4" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select o_orderpriority, count(*) as order_count from orders where o_tenant_id = 3 and o_orderdate &gt;= date &apos;1996-06-01&apos; and o_orderdate &lt; date &apos;1996-06-01&apos; + interval &apos;3&apos; month and exists ( select * from lineitem where l_tenant_id = 3 and l_orderkey = o_orderkey and l_commitdate &lt; l_receiptdate ) group by o_orderpriority order by o_orderpriority;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T3 - Q5" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select n_name, sum(l_extendedprice * (1 - l_discount)) as revenue from customer, orders, lineitem, supplier, nation, region where c_tenant_id = 3 and o_tenant_id = 3 and l_tenant_id = 3 and s_tenant_id = 3 and c_custkey = o_custkey and l_orderkey = o_orderkey and l_suppkey = s_suppkey and c_nationkey = s_nationkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; and o_orderdate &gt;= date &apos;1994-01-01&apos; and o_orderdate &lt; date &apos;1994-01-01&apos; + interval &apos;1&apos; year group by n_name order by revenue desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T3 - Q6" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select sum(l_extendedprice * l_discount) as revenue from lineitem where l_tenant_id = 3 and l_shipdate &gt;= date &apos;1994-01-01&apos; and l_shipdate &lt; date &apos;1994-01-01&apos; + interval &apos;1&apos; year and l_discount between 0.09 - 0.01 and 0.09 + 0.01 and l_quantity &lt; 25;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T3 - Q7" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select supp_nation, cust_nation, l_year, sum(volume) as revenue from ( select n1.n_name as supp_nation, n2.n_name as cust_nation, extract(year from l_shipdate) as l_year, l_extendedprice * (1 - l_discount) as volume from supplier, lineitem, orders, customer, nation n1, nation n2 where s_tenant_id = 3 and l_tenant_id = 3 and o_tenant_id = 3 and c_tenant_id = 3 and s_suppkey = l_suppkey and o_orderkey = l_orderkey and c_custkey = o_custkey and s_nationkey = n1.n_nationkey and c_nationkey = n2.n_nationkey and ( (n1.n_name = &apos;RUSSIA&apos; and n2.n_name = &apos;ROMANIA&apos;) or (n1.n_name = &apos;ROMANIA&apos; and n2.n_name = &apos;RUSSIA&apos;) ) and l_shipdate between date &apos;1995-01-01&apos; and date &apos;1996-12-31&apos; ) as shipping group by supp_nation, cust_nation, l_year order by supp_nation, cust_nation, l_year;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T3 - Q8" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select o_year, sum(case when nation = &apos;ROMANIA&apos; then volume else 0 end) / sum(volume) as mkt_share from ( select extract(year from o_orderdate) as o_year, l_extendedprice * (1 - l_discount) as volume, n2.n_name as nation from part, supplier, lineitem, orders, customer, nation n1, nation n2, region where p_tenant_id = 3 and s_tenant_id = 3 and l_tenant_id = 3 and o_tenant_id = 3 and c_tenant_id = 3 and p_partkey = l_partkey and s_suppkey = l_suppkey and l_orderkey = o_orderkey and o_custkey = c_custkey and c_nationkey = n1.n_nationkey and n1.n_regionkey = r_regionkey and r_name = &apos;EUROPE&apos; and s_nationkey = n2.n_nationkey and o_orderdate between date &apos;1995-01-01&apos; and date &apos;1996-12-31&apos; and p_type = &apos;PROMO ANODIZED TIN&apos; ) as all_nations group by o_year order by o_year;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T3 - Q9" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select nation, o_year, sum(amount) as sum_profit from ( select n_name as nation, extract(year from o_orderdate) as o_year, l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity as amount from part, supplier, lineitem, partsupp, orders, nation where p_tenant_id = 3 and s_tenant_id = 3 and l_tenant_id = 3 and ps_tenant_id = 3 and o_tenant_id = 3 and s_suppkey = l_suppkey and ps_suppkey = l_suppkey and ps_partkey = l_partkey and p_partkey = l_partkey and o_orderkey = l_orderkey and s_nationkey = n_nationkey and p_name like &apos;%rosy%&apos; ) as profit group by nation, o_year order by nation, o_year desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T3 - Q10" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_custkey, c_name, sum(l_extendedprice * (1 - l_discount)) as revenue, c_acctbal, n_name, c_address, c_phone, c_comment from customer, orders, lineitem, nation where c_tenant_id = 3 and o_tenant_id = 3 and l_tenant_id = 3 and c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate &gt;= date &apos;1994-01-01&apos; and o_orderdate &lt; date &apos;1994-01-01&apos; + interval &apos;3&apos; month and l_returnflag = &apos;R&apos; and c_nationkey = n_nationkey group by c_custkey, c_name, c_acctbal, c_phone, n_name, c_address, c_comment order by revenue desc limit 20;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T3 - Q11" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select ps_partkey, sum(ps_supplycost * ps_availqty) as value from partsupp, supplier, nation where ps_tenant_id = 3 and s_tenant_id = 3 and ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = &apos;RUSSIA&apos; group by ps_partkey having sum(ps_supplycost * ps_availqty) &gt; ( select sum(ps_supplycost * ps_availqty) * 0.0000030303 from partsupp, supplier, nation where ps_tenant_id = 3 and s_tenant_id = 3 and ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = &apos;RUSSIA&apos; ) order by value desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T3 - Q12" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select l_shipmode, sum(case when o_orderpriority = &apos;1-URGENT&apos; or o_orderpriority = &apos;2-HIGH&apos; then 1 else 0 end) as high_line_count, sum(case when o_orderpriority &lt;&gt; &apos;1-URGENT&apos; and o_orderpriority &lt;&gt; &apos;2-HIGH&apos; then 1 else 0 end) as low_line_count from orders, lineitem where o_tenant_id = 3 and l_tenant_id = 3 and o_orderkey = l_orderkey and l_shipmode in (&apos;AIR&apos;, &apos;TRUCK&apos;) and l_commitdate &lt; l_receiptdate and l_shipdate &lt; l_commitdate and l_receiptdate &gt;= date &apos;1996-01-01&apos; and l_receiptdate &lt; date &apos;1996-01-01&apos; + interval &apos;1&apos; year group by l_shipmode order by l_shipmode;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T3 - Q13" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_count, count(*) as custdist from ( select c_custkey, count(o_orderkey) from customer left outer join orders on c_custkey = o_custkey and o_comment not like &apos;%pending%accounts%&apos; where c_tenant_id = 3 group by c_custkey ) as c_orders (c_custkey, c_count) group by c_count order by custdist desc, c_count desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T3 - Q14" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select 100.00 * sum(case when p_type like &apos;PROMO%&apos; then l_extendedprice * (1 - l_discount) else 0 end) / sum(l_extendedprice * (1 - l_discount)) as promo_revenue from lineitem, part where l_tenant_id = 3 and p_tenant_id = 3 and l_partkey = p_partkey and l_shipdate &gt;= date &apos;1996-03-01&apos; and l_shipdate &lt; date &apos;1996-03-01&apos; + interval &apos;1&apos; month;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T3 - Q15" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Callable Statement</stringProp>
            <stringProp name="query">create view revenue0 (supplier_no, total_revenue) as select l_suppkey, sum(l_extendedprice * (1 - l_discount)) from lineitem where l_tenant_id = 3 and l_shipdate &gt;= date &apos;1996-03-01&apos; and l_shipdate &lt; date &apos;1996-03-01&apos; + interval &apos;3&apos; month group by l_suppkey; select s_suppkey, s_name, s_address, s_phone, total_revenue from supplier, revenue0 where s_tenant_id = 3 and s_suppkey = supplier_no and total_revenue = ( select max(total_revenue) from revenue0 ) order by s_suppkey; drop view revenue0;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T3 - Q16" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select p_brand, p_type, p_size, count(distinct ps_suppkey) as supplier_cnt from partsupp, part where ps_tenant_id = 3 and p_tenant_id = 3 and p_partkey = ps_partkey and p_brand &lt;&gt; &apos;Brand#32&apos; and p_type not like &apos;STANDARD ANODIZED%&apos; and p_size in (23, 6, 19, 31, 20, 21, 27, 2) and ps_suppkey not in ( select s_suppkey from supplier where s_tenant_id = 3 and s_comment like &apos;%Customer%Complaints%&apos; ) group by p_brand, p_type, p_size order by supplier_cnt desc, p_brand, p_type, p_size;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T3 - Q18" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice, sum(l_quantity) from customer, orders, lineitem where c_tenant_id = 3 and o_tenant_id = 3 and l_tenant_id = 3 and o_orderkey in ( select l_orderkey from lineitem where l_tenant_id = 3 group by l_orderkey having sum(l_quantity) &gt; 312 ) and c_custkey = o_custkey and o_orderkey = l_orderkey group by c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice order by o_totalprice desc, o_orderdate limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T3 - Q19" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select sum(l_extendedprice* (1 - l_discount)) as revenue from lineitem, part where l_tenant_id = 3 and p_tenant_id = 3 and (( p_partkey = l_partkey and p_brand = &apos;Brand#31&apos; and p_container in (&apos;SM CasE&apos;, &apos;SM BOX&apos;, &apos;SM PACK&apos;, &apos;SM PKG&apos;) and l_quantity &gt;= 5 and l_quantity &lt;= 5 + 10 and p_size between 1 and 5 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ) or ( p_partkey = l_partkey and p_brand = &apos;Brand#23&apos; and p_container in (&apos;MED BAG&apos;, &apos;MED BOX&apos;, &apos;MED PKG&apos;, &apos;MED PACK&apos;) and l_quantity &gt;= 13 and l_quantity &lt;= 13 + 10 and p_size between 1 and 10 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ) or ( p_partkey = l_partkey and p_brand = &apos;Brand#22&apos; and p_container in (&apos;LG CasE&apos;, &apos;LG BOX&apos;, &apos;LG PACK&apos;, &apos;LG PKG&apos;) and l_quantity &gt;= 27 and l_quantity &lt;= 27 + 10 and p_size between 1 and 15 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos;));
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T3 - Q21" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select s_name, count(*) as numwait from supplier, lineitem l1, orders, nation where s_tenant_id = 3 and l1.l_tenant_id = 3 and o_tenant_id = 3 and s_suppkey = l1.l_suppkey and o_orderkey = l1.l_orderkey and o_orderstatus = &apos;F&apos; and l1.l_receiptdate &gt; l1.l_commitdate and exists ( select * from lineitem l2 where l2.l_tenant_id = 3 and l2.l_orderkey = l1.l_orderkey and l2.l_suppkey &lt;&gt; l1.l_suppkey ) and not exists ( select * from lineitem l3 where l3.l_tenant_id = 3 and l3.l_orderkey = l1.l_orderkey and l3.l_suppkey &lt;&gt; l1.l_suppkey and l3.l_receiptdate &gt; l3.l_commitdate ) and s_nationkey = n_nationkey and n_name = &apos;INDIA&apos; group by s_name order by numwait desc, s_name limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T3 - Q22" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select cntrycode, count(*) as numcust, sum(c_acctbal) as totacctbal from ( select substring(c_phone from 1 for 2) as cntrycode, c_acctbal from customer where c_tenant_id = 3 and substring(c_phone from 1 for 2) in (&apos;24&apos;, &apos;19&apos;, &apos;11&apos;, &apos;23&apos;, &apos;20&apos;, &apos;28&apos;, &apos;12&apos;) and c_acctbal &gt; ( select avg(c_acctbal) from customer where c_tenant_id = 3 and c_acctbal &gt; 0.00 and substring(c_phone from 1 for 2) in (&apos;24&apos;, &apos;19&apos;, &apos;11&apos;, &apos;23&apos;, &apos;20&apos;, &apos;28&apos;, &apos;12&apos;) ) and not exists ( select * from orders where o_tenant_id = 3 and o_custkey = c_custkey ) ) as custsale group by cntrycode order by cntrycode;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T3 - RF1" enabled="false">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO region (r_regionkey, r_name, r_comment) VALUES (123476241, &apos;AFRICA&apos;, &apos;lar deposits. blithely final packages cajole. regular&apos;);
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T3 - RF2" enabled="false">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">DELETE FROM region WHERE r_regionkey = 123476241;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="T4" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <RandomOrderController guiclass="RandomOrderControllerGui" testclass="RandomOrderController" testname="Random Order Controller" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T4 - Q1" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="query">select l_returnflag, l_linestatus, sum(l_quantity) as sum_qty, sum(l_extendedprice) as sum_base_price, sum(l_extendedprice * (1 - l_discount)) as sum_disc_price, sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge, avg(l_quantity) as avg_qty, avg(l_extendedprice) as avg_price, avg(l_discount) as avg_disc, count(*) as count_order from lineitem where l_tenant_id = 4 and l_shipdate &lt;= date &apos;1998-12-01&apos; - interval &apos;93&apos; day group by l_returnflag, l_linestatus order by l_returnflag, l_linestatus;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T4 - Q2" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select s_acctbal, s_name, n_name, p_partkey, p_mfgr, s_address, s_phone, s_comment from part, supplier, partsupp, nation, region where p_tenant_id = 4 and s_tenant_id = 4 and ps_tenant_id = 4 and p_partkey = ps_partkey and s_suppkey = ps_suppkey and p_size = 16 and p_type like &apos;%BRASS&apos; and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AMERICA&apos; and ps_supplycost = ( select min(ps_supplycost) from partsupp, supplier, nation, region where ps_tenant_id = 4 and s_tenant_id = 4 and p_partkey = ps_partkey and s_suppkey = ps_suppkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AMERICA&apos; ) order by s_acctbal desc, n_name, s_name, p_partkey limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T4 - Q3" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select l_orderkey, sum(l_extendedprice * (1 - l_discount)) as revenue, o_orderdate, o_shippriority from customer, orders, lineitem where c_tenant_id = 4 and o_tenant_id = 4 and l_tenant_id = 4 and c_mktsegment = &apos;BUILDING&apos; and c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate &lt; date &apos;1995-03-10&apos; and l_shipdate &gt; date &apos;1995-03-10&apos; group by l_orderkey, o_orderdate, o_shippriority order by revenue desc, o_orderdate limit 10;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T4 - Q4" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select o_orderpriority, count(*) as order_count from orders where o_tenant_id = 4 and o_orderdate &gt;= date &apos;1994-07-01&apos; and o_orderdate &lt; date &apos;1994-07-01&apos; + interval &apos;3&apos; month and exists ( select * from lineitem where l_tenant_id = 4 and l_orderkey = o_orderkey and l_commitdate &lt; l_receiptdate ) group by o_orderpriority order by o_orderpriority;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T4 - Q5" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select n_name, sum(l_extendedprice * (1 - l_discount)) as revenue from customer, orders, lineitem, supplier, nation, region where c_tenant_id = 4 and o_tenant_id = 4 and l_tenant_id = 4 and s_tenant_id = 4 and c_custkey = o_custkey and l_orderkey = o_orderkey and l_suppkey = s_suppkey and c_nationkey = s_nationkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;EUROPE&apos; and o_orderdate &gt;= date &apos;1995-01-01&apos; and o_orderdate &lt; date &apos;1995-01-01&apos; + interval &apos;1&apos; year group by n_name order by revenue desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T4 - Q6" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select sum(l_extendedprice * l_discount) as revenue from lineitem where l_tenant_id = 4 and l_shipdate &gt;= date &apos;1995-01-01&apos; and l_shipdate &lt; date &apos;1995-01-01&apos; + interval &apos;1&apos; year and l_discount between 0.09 - 0.01 and 0.09 + 0.01 and l_quantity &lt; 25;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T4 - Q7" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select supp_nation, cust_nation, l_year, sum(volume) as revenue from ( select n1.n_name as supp_nation, n2.n_name as cust_nation, extract(year from l_shipdate) as l_year, l_extendedprice * (1 - l_discount) as volume from supplier, lineitem, orders, customer, nation n1, nation n2 where s_tenant_id = 4 and l_tenant_id = 4 and o_tenant_id = 4 and c_tenant_id = 4 and s_suppkey = l_suppkey and o_orderkey = l_orderkey and c_custkey = o_custkey and s_nationkey = n1.n_nationkey and c_nationkey = n2.n_nationkey and ( (n1.n_name = &apos;UNITED KINGDOM&apos; and n2.n_name = &apos;SAUDI ARABIA&apos;) or (n1.n_name = &apos;SAUDI ARABIA&apos; and n2.n_name = &apos;UNITED KINGDOM&apos;) ) and l_shipdate between date &apos;1995-01-01&apos; and date &apos;1996-12-31&apos; ) as shipping group by supp_nation, cust_nation, l_year order by supp_nation, cust_nation, l_year;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T4 - Q8" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select o_year, sum(case when nation = &apos;SAUDI ARABIA&apos; then volume else 0 end) / sum(volume) as mkt_share from ( select extract(year from o_orderdate) as o_year, l_extendedprice * (1 - l_discount) as volume, n2.n_name as nation from part, supplier, lineitem, orders, customer, nation n1, nation n2, region where p_tenant_id = 4 and s_tenant_id = 4 and l_tenant_id = 4 and o_tenant_id = 4 and c_tenant_id = 4 and p_partkey = l_partkey and s_suppkey = l_suppkey and l_orderkey = o_orderkey and o_custkey = c_custkey and c_nationkey = n1.n_nationkey and n1.n_regionkey = r_regionkey and r_name = &apos;MIDDLE EAST&apos; and s_nationkey = n2.n_nationkey and o_orderdate between date &apos;1995-01-01&apos; and date &apos;1996-12-31&apos; and p_type = &apos;LARGE BRUSHED NICKEL&apos; ) as all_nations group by o_year order by o_year;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T4 - Q9" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select nation, o_year, sum(amount) as sum_profit from ( select n_name as nation, extract(year from o_orderdate) as o_year, l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity as amount from part, supplier, lineitem, partsupp, orders, nation where p_tenant_id = 4 and s_tenant_id = 4 and l_tenant_id = 4 and ps_tenant_id = 4 and o_tenant_id = 4 and s_suppkey = l_suppkey and ps_suppkey = l_suppkey and ps_partkey = l_partkey and p_partkey = l_partkey and o_orderkey = l_orderkey and s_nationkey = n_nationkey and p_name like &apos;%orchid%&apos; ) as profit group by nation, o_year order by nation, o_year desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T4 - Q10" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_custkey, c_name, sum(l_extendedprice * (1 - l_discount)) as revenue, c_acctbal, n_name, c_address, c_phone, c_comment from customer, orders, lineitem, nation where c_tenant_id = 4 and o_tenant_id = 4 and l_tenant_id = 4 and c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate &gt;= date &apos;1993-08-01&apos; and o_orderdate &lt; date &apos;1993-08-01&apos; + interval &apos;3&apos; month and l_returnflag = &apos;R&apos; and c_nationkey = n_nationkey group by c_custkey, c_name, c_acctbal, c_phone, n_name, c_address, c_comment order by revenue desc limit 20;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T4 - Q11" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select ps_partkey, sum(ps_supplycost * ps_availqty) as value from partsupp, supplier, nation where ps_tenant_id = 4 and s_tenant_id = 4 and ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = &apos;UNITED KINGDOM&apos; group by ps_partkey having sum(ps_supplycost * ps_availqty) &gt; ( select sum(ps_supplycost * ps_availqty) * 0.0000010101 from partsupp, supplier, nation where ps_tenant_id = 4 and s_tenant_id = 4 and ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = &apos;UNITED KINGDOM&apos; ) order by value desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T4 - Q12" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select l_shipmode, sum(case when o_orderpriority = &apos;1-URGENT&apos; or o_orderpriority = &apos;2-HIGH&apos; then 1 else 0 end) as high_line_count, sum(case when o_orderpriority &lt;&gt; &apos;1-URGENT&apos; and o_orderpriority &lt;&gt; &apos;2-HIGH&apos; then 1 else 0 end) as low_line_count from orders, lineitem where o_tenant_id = 4 and l_tenant_id = 4 and o_orderkey = l_orderkey and l_shipmode in (&apos;SHIP&apos;, &apos;TRUCK&apos;) and l_commitdate &lt; l_receiptdate and l_shipdate &lt; l_commitdate and l_receiptdate &gt;= date &apos;1996-01-01&apos; and l_receiptdate &lt; date &apos;1996-01-01&apos; + interval &apos;1&apos; year group by l_shipmode order by l_shipmode;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T4 - Q13" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_count, count(*) as custdist from ( select c_custkey, count(o_orderkey) from customer left outer join orders on c_custkey = o_custkey and o_comment not like &apos;%unusual%deposits%&apos; where c_tenant_id = 4 group by c_custkey ) as c_orders (c_custkey, c_count) group by c_count order by custdist desc, c_count desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T4 - Q14" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select 100.00 * sum(case when p_type like &apos;PROMO%&apos; then l_extendedprice * (1 - l_discount) else 0 end) / sum(l_extendedprice * (1 - l_discount)) as promo_revenue from lineitem, part where l_tenant_id = 4 and p_tenant_id = 4 and l_partkey = p_partkey and l_shipdate &gt;= date &apos;1996-10-01&apos; and l_shipdate &lt; date &apos;1996-10-01&apos; + interval &apos;1&apos; month;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T4 - Q15" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Callable Statement</stringProp>
            <stringProp name="query">create view revenue0 (supplier_no, total_revenue) as select l_suppkey, sum(l_extendedprice * (1 - l_discount)) from lineitem where l_tenant_id = 4 and l_shipdate &gt;= date &apos;1993-12-01&apos; and l_shipdate &lt; date &apos;1993-12-01&apos; + interval &apos;3&apos; month group by l_suppkey; select s_suppkey, s_name, s_address, s_phone, total_revenue from supplier, revenue0 where s_tenant_id = 4 and s_suppkey = supplier_no and total_revenue = ( select max(total_revenue) from revenue0 ) order by s_suppkey; drop view revenue0;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T4 - Q16" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select p_brand, p_type, p_size, count(distinct ps_suppkey) as supplier_cnt from partsupp, part where ps_tenant_id = 4 and p_tenant_id = 4 and p_partkey = ps_partkey and p_brand &lt;&gt; &apos;Brand#52&apos; and p_type not like &apos;ECONOMY POLISHED%&apos; and p_size in (30, 47, 37, 39, 14, 7, 1, 29) and ps_suppkey not in ( select s_suppkey from supplier where s_tenant_id = 4 and s_comment like &apos;%Customer%Complaints%&apos; ) group by p_brand, p_type, p_size order by supplier_cnt desc, p_brand, p_type, p_size;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T4 - Q18" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice, sum(l_quantity) from customer, orders, lineitem where c_tenant_id = 4 and o_tenant_id = 4 and l_tenant_id = 4 and o_orderkey in ( select l_orderkey from lineitem where l_tenant_id = 4 group by l_orderkey having sum(l_quantity) &gt; 315 ) and c_custkey = o_custkey and o_orderkey = l_orderkey group by c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice order by o_totalprice desc, o_orderdate limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T4 - Q19" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select sum(l_extendedprice* (1 - l_discount)) as revenue from lineitem, part where l_tenant_id = 4 and p_tenant_id = 4 and (( p_partkey = l_partkey and p_brand = &apos;Brand#35&apos; and p_container in (&apos;SM CasE&apos;, &apos;SM BOX&apos;, &apos;SM PACK&apos;, &apos;SM PKG&apos;) and l_quantity &gt;= 6 and l_quantity &lt;= 6 + 10 and p_size between 1 and 5 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ) or ( p_partkey = l_partkey and p_brand = &apos;Brand#44&apos; and p_container in (&apos;MED BAG&apos;, &apos;MED BOX&apos;, &apos;MED PKG&apos;, &apos;MED PACK&apos;) and l_quantity &gt;= 15 and l_quantity &lt;= 15 + 10 and p_size between 1 and 10 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ) or ( p_partkey = l_partkey and p_brand = &apos;Brand#21&apos; and p_container in (&apos;LG CasE&apos;, &apos;LG BOX&apos;, &apos;LG PACK&apos;, &apos;LG PKG&apos;) and l_quantity &gt;= 30 and l_quantity &lt;= 30 + 10 and p_size between 1 and 15 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos;));
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T4 - Q21" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select s_name, count(*) as numwait from supplier, lineitem l1, orders, nation where s_tenant_id = 4 and l1.l_tenant_id = 4 and o_tenant_id = 4 and s_suppkey = l1.l_suppkey and o_orderkey = l1.l_orderkey and o_orderstatus = &apos;F&apos; and l1.l_receiptdate &gt; l1.l_commitdate and exists ( select * from lineitem l2 where l2.l_tenant_id = 4 and l2.l_orderkey = l1.l_orderkey and l2.l_suppkey &lt;&gt; l1.l_suppkey ) and not exists ( select * from lineitem l3 where l3.l_tenant_id = 4 and l3.l_orderkey = l1.l_orderkey and l3.l_suppkey &lt;&gt; l1.l_suppkey and l3.l_receiptdate &gt; l3.l_commitdate ) and s_nationkey = n_nationkey and n_name = &apos;PERU&apos; group by s_name order by numwait desc, s_name limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T4 - Q22" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select cntrycode, count(*) as numcust, sum(c_acctbal) as totacctbal from ( select substring(c_phone from 1 for 2) as cntrycode, c_acctbal from customer where c_tenant_id = 4 and substring(c_phone from 1 for 2) in (&apos;29&apos;, &apos;15&apos;, &apos;12&apos;, &apos;24&apos;, &apos;13&apos;, &apos;34&apos;, &apos;16&apos;) and c_acctbal &gt; ( select avg(c_acctbal) from customer where c_tenant_id = 4 and c_acctbal &gt; 0.00 and substring(c_phone from 1 for 2) in (&apos;29&apos;, &apos;15&apos;, &apos;12&apos;, &apos;24&apos;, &apos;13&apos;, &apos;34&apos;, &apos;16&apos;) ) and not exists ( select * from orders where o_tenant_id = 4 and o_custkey = c_custkey ) ) as custsale group by cntrycode order by cntrycode;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T4 - RF1" enabled="false">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO region (r_regionkey, r_name, r_comment) VALUES (123476241, &apos;AFRICA&apos;, &apos;lar deposits. blithely final packages cajole. regular&apos;);
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T4 - RF2" enabled="false">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">DELETE FROM region WHERE r_regionkey = 123476241;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="T5" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <RandomOrderController guiclass="RandomOrderControllerGui" testclass="RandomOrderController" testname="Random Order Controller" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T5 - Q1" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="query">select l_returnflag, l_linestatus, sum(l_quantity) as sum_qty, sum(l_extendedprice) as sum_base_price, sum(l_extendedprice * (1 - l_discount)) as sum_disc_price, sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge, avg(l_quantity) as avg_qty, avg(l_extendedprice) as avg_price, avg(l_discount) as avg_disc, count(*) as count_order from lineitem where l_tenant_id = 5 and l_shipdate &lt;= date &apos;1998-12-01&apos; - interval &apos;101&apos; day group by l_returnflag, l_linestatus order by l_returnflag, l_linestatus;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T5 - Q2" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select s_acctbal, s_name, n_name, p_partkey, p_mfgr, s_address, s_phone, s_comment from part, supplier, partsupp, nation, region where p_tenant_id = 5 and s_tenant_id = 5 and ps_tenant_id = 5 and p_partkey = ps_partkey and s_suppkey = ps_suppkey and p_size = 3 and p_type like &apos;%NICKEL&apos; and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;MIDDLE EAST&apos; and ps_supplycost = ( select min(ps_supplycost) from partsupp, supplier, nation, region where ps_tenant_id = 6 and s_tenant_id = 6 and p_partkey = ps_partkey and s_suppkey = ps_suppkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;MIDDLE EAST&apos; ) order by s_acctbal desc, n_name, s_name, p_partkey limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T5 - Q3" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select l_orderkey, sum(l_extendedprice * (1 - l_discount)) as revenue, o_orderdate, o_shippriority from customer, orders, lineitem where c_tenant_id = 5 and o_tenant_id = 5 and l_tenant_id = 5 and c_mktsegment = &apos;HOUSEHOLD&apos; and c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate &lt; date &apos;1995-03-27&apos; and l_shipdate &gt; date &apos;1995-03-27&apos; group by l_orderkey, o_orderdate, o_shippriority order by revenue desc, o_orderdate limit 10;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T5 - Q4" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select o_orderpriority, count(*) as order_count from orders where o_tenant_id = 5 and o_orderdate &gt;= date &apos;1997-02-01&apos; and o_orderdate &lt; date &apos;1997-02-01&apos; + interval &apos;3&apos; month and exists ( select * from lineitem where l_tenant_id = 5 and l_orderkey = o_orderkey and l_commitdate &lt; l_receiptdate ) group by o_orderpriority order by o_orderpriority;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T5 - Q5" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select n_name, sum(l_extendedprice * (1 - l_discount)) as revenue from customer, orders, lineitem, supplier, nation, region where c_tenant_id = 5 and o_tenant_id = 5 and l_tenant_id = 5 and s_tenant_id = 5 and c_custkey = o_custkey and l_orderkey = o_orderkey and l_suppkey = s_suppkey and c_nationkey = s_nationkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;MIDDLE EAST&apos; and o_orderdate &gt;= date &apos;1995-01-01&apos; and o_orderdate &lt; date &apos;1995-01-01&apos; + interval &apos;1&apos; year group by n_name order by revenue desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T5 - Q6" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select sum(l_extendedprice * l_discount) as revenue from lineitem where l_tenant_id = 5 and l_shipdate &gt;= date &apos;1995-01-01&apos; and l_shipdate &lt; date &apos;1995-01-01&apos; + interval &apos;1&apos; year and l_discount between 0.07 - 0.01 and 0.07 + 0.01 and l_quantity &lt; 25;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T5 - Q7" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select supp_nation, cust_nation, l_year, sum(volume) as revenue from ( select n1.n_name as supp_nation, n2.n_name as cust_nation, extract(year from l_shipdate) as l_year, l_extendedprice * (1 - l_discount) as volume from supplier, lineitem, orders, customer, nation n1, nation n2 where s_tenant_id = 5 and l_tenant_id = 5 and o_tenant_id = 5 and c_tenant_id = 5 and s_suppkey = l_suppkey and o_orderkey = l_orderkey and c_custkey = o_custkey and s_nationkey = n1.n_nationkey and c_nationkey = n2.n_nationkey and ( (n1.n_name = &apos;MOROCCO&apos; and n2.n_name = &apos;JAPAN&apos;) or (n1.n_name = &apos;JAPAN&apos; and n2.n_name = &apos;MOROCCO&apos;) ) and l_shipdate between date &apos;1995-01-01&apos; and date &apos;1996-12-31&apos; ) as shipping group by supp_nation, cust_nation, l_year order by supp_nation, cust_nation, l_year;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T5 - Q8" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select o_year, sum(case when nation = &apos;JAPAN&apos; then volume else 0 end) / sum(volume) as mkt_share from ( select extract(year from o_orderdate) as o_year, l_extendedprice * (1 - l_discount) as volume, n2.n_name as nation from part, supplier, lineitem, orders, customer, nation n1, nation n2, region where p_tenant_id = 5 and s_tenant_id = 5 and l_tenant_id = 5 and o_tenant_id = 5 and c_tenant_id = 5 and p_partkey = l_partkey and s_suppkey = l_suppkey and l_orderkey = o_orderkey and o_custkey = c_custkey and c_nationkey = n1.n_nationkey and n1.n_regionkey = r_regionkey and r_name = &apos;ASIA&apos; and s_nationkey = n2.n_nationkey and o_orderdate between date &apos;1995-01-01&apos; and date &apos;1996-12-31&apos; and p_type = &apos;LARGE PLATED NICKEL&apos; ) as all_nations group by o_year order by o_year;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T5 - Q9" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select nation, o_year, sum(amount) as sum_profit from ( select n_name as nation, extract(year from o_orderdate) as o_year, l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity as amount from part, supplier, lineitem, partsupp, orders, nation where p_tenant_id = 5 and s_tenant_id = 5 and l_tenant_id = 5 and ps_tenant_id = 5 and o_tenant_id = 5 and s_suppkey = l_suppkey and ps_suppkey = l_suppkey and ps_partkey = l_partkey and p_partkey = l_partkey and o_orderkey = l_orderkey and s_nationkey = n_nationkey and p_name like &apos;%magenta%&apos; ) as profit group by nation, o_year order by nation, o_year desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T5 - Q10" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_custkey, c_name, sum(l_extendedprice * (1 - l_discount)) as revenue, c_acctbal, n_name, c_address, c_phone, c_comment from customer, orders, lineitem, nation where c_tenant_id = 5 and o_tenant_id = 5 and l_tenant_id = 5 and c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate &gt;= date &apos;1993-02-01&apos; and o_orderdate &lt; date &apos;1993-02-01&apos; + interval &apos;3&apos; month and l_returnflag = &apos;R&apos; and c_nationkey = n_nationkey group by c_custkey, c_name, c_acctbal, c_phone, n_name, c_address, c_comment order by revenue desc limit 20;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T5 - Q11" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select ps_partkey, sum(ps_supplycost * ps_availqty) as value from partsupp, supplier, nation where ps_tenant_id = 5 and s_tenant_id = 5 and ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = &apos;UNITED STATES&apos; group by ps_partkey having sum(ps_supplycost * ps_availqty) &gt; ( select sum(ps_supplycost * ps_availqty) * 0.0000006993 from partsupp, supplier, nation where ps_tenant_id = 5 and s_tenant_id = 5 and ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = &apos;UNITED STATES&apos; ) order by value desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T5 - Q12" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select l_shipmode, sum(case when o_orderpriority = &apos;1-URGENT&apos; or o_orderpriority = &apos;2-HIGH&apos; then 1 else 0 end) as high_line_count, sum(case when o_orderpriority &lt;&gt; &apos;1-URGENT&apos; and o_orderpriority &lt;&gt; &apos;2-HIGH&apos; then 1 else 0 end) as low_line_count from orders, lineitem where o_tenant_id = 5 and l_tenant_id = 5 and o_orderkey = l_orderkey and l_shipmode in (&apos;TRUCK&apos;, &apos;MAIL&apos;) and l_commitdate &lt; l_receiptdate and l_shipdate &lt; l_commitdate and l_receiptdate &gt;= date &apos;1997-01-01&apos; and l_receiptdate &lt; date &apos;1997-01-01&apos; + interval &apos;1&apos; year group by l_shipmode order by l_shipmode;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T5 - Q13" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_count, count(*) as custdist from ( select c_custkey, count(o_orderkey) from customer left outer join orders on c_custkey = o_custkey and o_comment not like &apos;%unusual%deposits%&apos; where c_tenant_id = 5 group by c_custkey ) as c_orders (c_custkey, c_count) group by c_count order by custdist desc, c_count desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T5 - Q14" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select 100.00 * sum(case when p_type like &apos;PROMO%&apos; then l_extendedprice * (1 - l_discount) else 0 end) / sum(l_extendedprice * (1 - l_discount)) as promo_revenue from lineitem, part where l_tenant_id = 5 and p_tenant_id = 5 and l_partkey = p_partkey and l_shipdate &gt;= date &apos;1997-04-01&apos; and l_shipdate &lt; date &apos;1997-04-01&apos; + interval &apos;1&apos; month;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T5 - Q15" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Callable Statement</stringProp>
            <stringProp name="query">create view revenue0 (supplier_no, total_revenue) as select l_suppkey, sum(l_extendedprice * (1 - l_discount)) from lineitem where l_tenant_id = 5 and l_shipdate &gt;= date &apos;1996-07-01&apos; and l_shipdate &lt; date &apos;1996-07-01&apos; + interval &apos;3&apos; month group by l_suppkey; select s_suppkey, s_name, s_address, s_phone, total_revenue from supplier, revenue0 where s_tenant_id = 5 and s_suppkey = supplier_no and total_revenue = ( select max(total_revenue) from revenue0 ) order by s_suppkey; drop view revenue0;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T5 - Q16" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select p_brand, p_type, p_size, count(distinct ps_suppkey) as supplier_cnt from partsupp, part where ps_tenant_id = 5 and p_tenant_id = 5 and p_partkey = ps_partkey and p_brand &lt;&gt; &apos;Brand#22&apos; and p_type not like &apos;LARGE BURNISHED%&apos; and p_size in (37, 39, 7, 48, 3, 38, 32, 1) and ps_suppkey not in ( select s_suppkey from supplier where s_tenant_id = 5 and s_comment like &apos;%Customer%Complaints%&apos; ) group by p_brand, p_type, p_size order by supplier_cnt desc, p_brand, p_type, p_size;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T5 - Q18" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice, sum(l_quantity) from customer, orders, lineitem where c_tenant_id = 5 and o_tenant_id = 5 and l_tenant_id = 5 and o_orderkey in ( select l_orderkey from lineitem where l_tenant_id = 5 group by l_orderkey having sum(l_quantity) &gt; 314 ) and c_custkey = o_custkey and o_orderkey = l_orderkey group by c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice order by o_totalprice desc, o_orderdate limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T5 - Q19" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select sum(l_extendedprice* (1 - l_discount)) as revenue from lineitem, part where l_tenant_id = 5 and p_tenant_id = 5 and (( p_partkey = l_partkey and p_brand = &apos;Brand#44&apos; and p_container in (&apos;SM CasE&apos;, &apos;SM BOX&apos;, &apos;SM PACK&apos;, &apos;SM PKG&apos;) and l_quantity &gt;= 6 and l_quantity &lt;= 6 + 10 and p_size between 1 and 5 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ) or ( p_partkey = l_partkey and p_brand = &apos;Brand#15&apos; and p_container in (&apos;MED BAG&apos;, &apos;MED BOX&apos;, &apos;MED PKG&apos;, &apos;MED PACK&apos;) and l_quantity &gt;= 17 and l_quantity &lt;= 17 + 10 and p_size between 1 and 10 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ) or ( p_partkey = l_partkey and p_brand = &apos;Brand#14&apos; and p_container in (&apos;LG CasE&apos;, &apos;LG BOX&apos;, &apos;LG PACK&apos;, &apos;LG PKG&apos;) and l_quantity &gt;= 22 and l_quantity &lt;= 22 + 10 and p_size between 1 and 15 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos;));
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T5 - Q21" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select s_name, count(*) as numwait from supplier, lineitem l1, orders, nation where s_tenant_id = 5 and l1.l_tenant_id = 5 and o_tenant_id = 5 and s_suppkey = l1.l_suppkey and o_orderkey = l1.l_orderkey and o_orderstatus = &apos;F&apos; and l1.l_receiptdate &gt; l1.l_commitdate and exists ( select * from lineitem l2 where l2.l_tenant_id = 5 and l2.l_orderkey = l1.l_orderkey and l2.l_suppkey &lt;&gt; l1.l_suppkey ) and not exists ( select * from lineitem l3 where l3.l_tenant_id = 5 and l3.l_orderkey = l1.l_orderkey and l3.l_suppkey &lt;&gt; l1.l_suppkey and l3.l_receiptdate &gt; l3.l_commitdate ) and s_nationkey = n_nationkey and n_name = &apos;BRAZIL&apos; group by s_name order by numwait desc, s_name limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T5 - Q22" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select cntrycode, count(*) as numcust, sum(c_acctbal) as totacctbal from ( select substring(c_phone from 1 for 2) as cntrycode, c_acctbal from customer where c_tenant_id = 5 and substring(c_phone from 1 for 2) in (&apos;33&apos;, &apos;12&apos;, &apos;28&apos;, &apos;25&apos;, &apos;11&apos;, &apos;20&apos;, &apos;32&apos;) and c_acctbal &gt; ( select avg(c_acctbal) from customer where c_tenant_id = 5 and c_acctbal &gt; 0.00 and substring(c_phone from 1 for 2) in (&apos;33&apos;, &apos;12&apos;, &apos;28&apos;, &apos;25&apos;, &apos;11&apos;, &apos;20&apos;, &apos;32&apos;) ) and not exists ( select * from orders where o_tenant_id = 5 and o_custkey = c_custkey ) ) as custsale group by cntrycode order by cntrycode;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T5 - RF1" enabled="false">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO region (r_regionkey, r_name, r_comment) VALUES (123476241, &apos;AFRICA&apos;, &apos;lar deposits. blithely final packages cajole. regular&apos;);
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T5 - RF2" enabled="false">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">DELETE FROM region WHERE r_regionkey = 123476241;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="T6" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <RandomOrderController guiclass="RandomOrderControllerGui" testclass="RandomOrderController" testname="Random Order Controller" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T6 - Q1" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="query">select l_returnflag, l_linestatus, sum(l_quantity) as sum_qty, sum(l_extendedprice) as sum_base_price, sum(l_extendedprice * (1 - l_discount)) as sum_disc_price, sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge, avg(l_quantity) as avg_qty, avg(l_extendedprice) as avg_price, avg(l_discount) as avg_disc, count(*) as count_order from lineitem where l_tenant_id = 6 and l_shipdate &lt;= date &apos;1998-12-01&apos; - interval &apos;61&apos; day group by l_returnflag, l_linestatus order by l_returnflag, l_linestatus;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T6 - Q2" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select s_acctbal, s_name, n_name, p_partkey, p_mfgr, s_address, s_phone, s_comment from part, supplier, partsupp, nation, region where p_tenant_id = 6 and s_tenant_id = 6 and ps_tenant_id = 6 and p_partkey = ps_partkey and s_suppkey = ps_suppkey and p_size = 14 and p_type like &apos;%BRASS&apos; and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; and ps_supplycost = ( select min(ps_supplycost) from partsupp, supplier, nation, region where ps_tenant_id = 6 and s_tenant_id = 6 and p_partkey = ps_partkey and s_suppkey = ps_suppkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; ) order by s_acctbal desc, n_name, s_name, p_partkey limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T6 - Q3" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select l_orderkey, sum(l_extendedprice * (1 - l_discount)) as revenue, o_orderdate, o_shippriority from customer, orders, lineitem where c_tenant_id = 6 and o_tenant_id = 6 and l_tenant_id = 6 and c_mktsegment = &apos;BUILDING&apos; and c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate &lt; date &apos;1995-03-06&apos; and l_shipdate &gt; date &apos;1995-03-06&apos; group by l_orderkey, o_orderdate, o_shippriority order by revenue desc, o_orderdate limit 10;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T6 - Q4" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select o_orderpriority, count(*) as order_count from orders where o_tenant_id = 6 and o_orderdate &gt;= date &apos;1993-12-01&apos; and o_orderdate &lt; date &apos;1993-12-01&apos; + interval &apos;3&apos; month and exists ( select * from lineitem where l_tenant_id = 6 and l_orderkey = o_orderkey and l_commitdate &lt; l_receiptdate ) group by o_orderpriority order by o_orderpriority;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T6 - Q5" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select n_name, sum(l_extendedprice * (1 - l_discount)) as revenue from customer, orders, lineitem, supplier, nation, region where c_tenant_id = 6 and o_tenant_id = 6 and l_tenant_id = 6 and s_tenant_id = 6 and c_custkey = o_custkey and l_orderkey = o_orderkey and l_suppkey = s_suppkey and c_nationkey = s_nationkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; and o_orderdate &gt;= date &apos;1994-01-01&apos; and o_orderdate &lt; date &apos;1994-01-01&apos; + interval &apos;1&apos; year group by n_name order by revenue desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T6 - Q6" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select sum(l_extendedprice * l_discount) as revenue from lineitem where l_tenant_id = 6 and l_shipdate &gt;= date &apos;1994-01-01&apos; and l_shipdate &lt; date &apos;1994-01-01&apos; + interval &apos;1&apos; year and l_discount between 0.09 - 0.01 and 0.09 + 0.01 and l_quantity &lt; 25;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T6 - Q7" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select supp_nation, cust_nation, l_year, sum(volume) as revenue from ( select n1.n_name as supp_nation, n2.n_name as cust_nation, extract(year from l_shipdate) as l_year, l_extendedprice * (1 - l_discount) as volume from supplier, lineitem, orders, customer, nation n1, nation n2 where s_tenant_id = 6 and l_tenant_id = 6 and o_tenant_id = 6 and c_tenant_id = 6 and s_suppkey = l_suppkey and o_orderkey = l_orderkey and c_custkey = o_custkey and s_nationkey = n1.n_nationkey and c_nationkey = n2.n_nationkey and ( (n1.n_name = &apos;RUSSIA&apos; and n2.n_name = &apos;ROMANIA&apos;) or (n1.n_name = &apos;ROMANIA&apos; and n2.n_name = &apos;RUSSIA&apos;) ) and l_shipdate between date &apos;1995-01-01&apos; and date &apos;1996-12-31&apos; ) as shipping group by supp_nation, cust_nation, l_year order by supp_nation, cust_nation, l_year;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T6 - Q8" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select o_year, sum(case when nation = &apos;ROMANIA&apos; then volume else 0 end) / sum(volume) as mkt_share from ( select extract(year from o_orderdate) as o_year, l_extendedprice * (1 - l_discount) as volume, n2.n_name as nation from part, supplier, lineitem, orders, customer, nation n1, nation n2, region where p_tenant_id = 6 and s_tenant_id = 6 and l_tenant_id = 6 and o_tenant_id = 6 and c_tenant_id = 6 and p_partkey = l_partkey and s_suppkey = l_suppkey and l_orderkey = o_orderkey and o_custkey = c_custkey and c_nationkey = n1.n_nationkey and n1.n_regionkey = r_regionkey and r_name = &apos;EUROPE&apos; and s_nationkey = n2.n_nationkey and o_orderdate between date &apos;1995-01-01&apos; and date &apos;1996-12-31&apos; and p_type = &apos;PROMO ANODIZED TIN&apos; ) as all_nations group by o_year order by o_year;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T6 - Q9" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select nation, o_year, sum(amount) as sum_profit from ( select n_name as nation, extract(year from o_orderdate) as o_year, l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity as amount from part, supplier, lineitem, partsupp, orders, nation where p_tenant_id = 6 and s_tenant_id = 6 and l_tenant_id = 6 and ps_tenant_id = 6 and o_tenant_id = 6 and s_suppkey = l_suppkey and ps_suppkey = l_suppkey and ps_partkey = l_partkey and p_partkey = l_partkey and o_orderkey = l_orderkey and s_nationkey = n_nationkey and p_name like &apos;%sienna%&apos; ) as profit group by nation, o_year order by nation, o_year desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T6 - Q10" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_custkey, c_name, sum(l_extendedprice * (1 - l_discount)) as revenue, c_acctbal, n_name, c_address, c_phone, c_comment from customer, orders, lineitem, nation where c_tenant_id = 6 and o_tenant_id = 6 and l_tenant_id = 6 and c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate &gt;= date &apos;1993-04-01&apos; and o_orderdate &lt; date &apos;1993-04-01&apos; + interval &apos;3&apos; month and l_returnflag = &apos;R&apos; and c_nationkey = n_nationkey group by c_custkey, c_name, c_acctbal, c_phone, n_name, c_address, c_comment order by revenue desc limit 20;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T6 - Q11" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select ps_partkey, sum(ps_supplycost * ps_availqty) as value from partsupp, supplier, nation where ps_tenant_id = 6 and s_tenant_id = 6 and ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = &apos;INDONESIA&apos; group by ps_partkey having sum(ps_supplycost * ps_availqty) &gt; ( select sum(ps_supplycost * ps_availqty) * 0.0000090909 from partsupp, supplier, nation where ps_tenant_id = 6 and s_tenant_id = 6 and ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = &apos;INDONESIA&apos; ) order by value desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T6 - Q12" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select l_shipmode, sum(case when o_orderpriority = &apos;1-URGENT&apos; or o_orderpriority = &apos;2-HIGH&apos; then 1 else 0 end) as high_line_count, sum(case when o_orderpriority &lt;&gt; &apos;1-URGENT&apos; and o_orderpriority &lt;&gt; &apos;2-HIGH&apos; then 1 else 0 end) as low_line_count from orders, lineitem where o_tenant_id = 6 and l_tenant_id = 6 and o_orderkey = l_orderkey and l_shipmode in (&apos;RAIL&apos;, &apos;TRUCK&apos;) and l_commitdate &lt; l_receiptdate and l_shipdate &lt; l_commitdate and l_receiptdate &gt;= date &apos;1995-01-01&apos; and l_receiptdate &lt; date &apos;1995-01-01&apos; + interval &apos;1&apos; year group by l_shipmode order by l_shipmode;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T6 - Q13" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_count, count(*) as custdist from ( select c_custkey, count(o_orderkey) from customer left outer join orders on c_custkey = o_custkey and o_comment not like &apos;%pending%accounts%&apos; where c_tenant_id = 6 group by c_custkey ) as c_orders (c_custkey, c_count) group by c_count order by custdist desc, c_count desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T6 - Q14" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select 100.00 * sum(case when p_type like &apos;PROMO%&apos; then l_extendedprice * (1 - l_discount) else 0 end) / sum(l_extendedprice * (1 - l_discount)) as promo_revenue from lineitem, part where l_tenant_id = 6 and p_tenant_id = 6 and l_partkey = p_partkey and l_shipdate &gt;= date &apos;1995-12-01&apos; and l_shipdate &lt; date &apos;1995-12-01&apos; + interval &apos;1&apos; month;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T6 - Q15" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Callable Statement</stringProp>
            <stringProp name="query">create view revenue0 (supplier_no, total_revenue) as select l_suppkey, sum(l_extendedprice * (1 - l_discount)) from lineitem where l_tenant_id = 6 and l_shipdate &gt;= date &apos;1994-03-01&apos; and l_shipdate &lt; date &apos;1994-03-01&apos; + interval &apos;3&apos; month group by l_suppkey; select s_suppkey, s_name, s_address, s_phone, total_revenue from supplier, revenue0 where s_tenant_id = 6 and s_suppkey = supplier_no and total_revenue = ( select max(total_revenue) from revenue0 ) order by s_suppkey; drop view revenue0;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T6 - Q16" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select p_brand, p_type, p_size, count(distinct ps_suppkey) as supplier_cnt from partsupp, part where ps_tenant_id = 6 and p_tenant_id = 6 and p_partkey = ps_partkey and p_brand &lt;&gt; &apos;Brand#52&apos; and p_type not like &apos;LARGE BRUSHED%&apos; and p_size in (20, 35, 34, 50, 23, 28, 48, 17) and ps_suppkey not in ( select s_suppkey from supplier where s_tenant_id = 6 and s_comment like &apos;%Customer%Complaints%&apos; ) group by p_brand, p_type, p_size order by supplier_cnt desc, p_brand, p_type, p_size;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T6 - Q18" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice, sum(l_quantity) from customer, orders, lineitem where c_tenant_id = 6 and o_tenant_id = 6 and l_tenant_id = 6 and o_orderkey in ( select l_orderkey from lineitem where l_tenant_id = 6 group by l_orderkey having sum(l_quantity) &gt; 314 ) and c_custkey = o_custkey and o_orderkey = l_orderkey group by c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice order by o_totalprice desc, o_orderdate limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T6 - Q19" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select sum(l_extendedprice* (1 - l_discount)) as revenue from lineitem, part where l_tenant_id = 6 and p_tenant_id = 6 and (( p_partkey = l_partkey and p_brand = &apos;Brand#24&apos; and p_container in (&apos;SM CasE&apos;, &apos;SM BOX&apos;, &apos;SM PACK&apos;, &apos;SM PKG&apos;) and l_quantity &gt;= 10 and l_quantity &lt;= 10 + 10 and p_size between 1 and 5 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ) or ( p_partkey = l_partkey and p_brand = &apos;Brand#45&apos; and p_container in (&apos;MED BAG&apos;, &apos;MED BOX&apos;, &apos;MED PKG&apos;, &apos;MED PACK&apos;) and l_quantity &gt;= 12 and l_quantity &lt;= 12 + 10 and p_size between 1 and 10 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ) or ( p_partkey = l_partkey and p_brand = &apos;Brand#33&apos; and p_container in (&apos;LG CasE&apos;, &apos;LG BOX&apos;, &apos;LG PACK&apos;, &apos;LG PKG&apos;) and l_quantity &gt;= 30 and l_quantity &lt;= 30 + 10 and p_size between 1 and 15 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos;));
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T6 - Q21" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select s_name, count(*) as numwait from supplier, lineitem l1, orders, nation where s_tenant_id = 6 and l1.l_tenant_id = 6 and o_tenant_id = 6 and s_suppkey = l1.l_suppkey and o_orderkey = l1.l_orderkey and o_orderstatus = &apos;F&apos; and l1.l_receiptdate &gt; l1.l_commitdate and exists ( select * from lineitem l2 where l2.l_tenant_id = 6 and l2.l_orderkey = l1.l_orderkey and l2.l_suppkey &lt;&gt; l1.l_suppkey ) and not exists ( select * from lineitem l3 where l3.l_tenant_id = 6 and l3.l_orderkey = l1.l_orderkey and l3.l_suppkey &lt;&gt; l1.l_suppkey and l3.l_receiptdate &gt; l3.l_commitdate ) and s_nationkey = n_nationkey and n_name = &apos;MOZAMBIQUE&apos; group by s_name order by numwait desc, s_name limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T6 - Q22" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select cntrycode, count(*) as numcust, sum(c_acctbal) as totacctbal from ( select substring(c_phone from 1 for 2) as cntrycode, c_acctbal from customer where c_tenant_id = 6 and substring(c_phone from 1 for 2) in (&apos;34&apos;, &apos;20&apos;, &apos;23&apos;, &apos;33&apos;, &apos;18&apos;, &apos;10&apos;, &apos;30&apos;) and c_acctbal &gt; ( select avg(c_acctbal) from customer where c_tenant_id = 6 and c_acctbal &gt; 0.00 and substring(c_phone from 1 for 2) in (&apos;34&apos;, &apos;20&apos;, &apos;23&apos;, &apos;33&apos;, &apos;18&apos;, &apos;10&apos;, &apos;30&apos;) ) and not exists ( select * from orders where o_tenant_id = 6 and o_custkey = c_custkey ) ) as custsale group by cntrycode order by cntrycode;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T6 - RF1" enabled="false">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO region (r_regionkey, r_name, r_comment) VALUES (123476241, &apos;AFRICA&apos;, &apos;lar deposits. blithely final packages cajole. regular&apos;);
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T6 - RF2" enabled="false">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">DELETE FROM region WHERE r_regionkey = 123476241;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="T7" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <RandomOrderController guiclass="RandomOrderControllerGui" testclass="RandomOrderController" testname="Random Order Controller" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T7 - Q1" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="query">select l_returnflag, l_linestatus, sum(l_quantity) as sum_qty, sum(l_extendedprice) as sum_base_price, sum(l_extendedprice * (1 - l_discount)) as sum_disc_price, sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge, avg(l_quantity) as avg_qty, avg(l_extendedprice) as avg_price, avg(l_discount) as avg_disc, count(*) as count_order from lineitem where l_tenant_id = 7 and l_shipdate &lt;= date &apos;1998-12-01&apos; - interval &apos;85&apos; day group by l_returnflag, l_linestatus order by l_returnflag, l_linestatus;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T7 - Q2" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select s_acctbal, s_name, n_name, p_partkey, p_mfgr, s_address, s_phone, s_comment from part, supplier, partsupp, nation, region where p_tenant_id = 7 and s_tenant_id = 7 and ps_tenant_id = 7 and p_partkey = ps_partkey and s_suppkey = ps_suppkey and p_size = 28 and p_type like &apos;%STEEL&apos; and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;EUROPE&apos; and ps_supplycost = ( select min(ps_supplycost) from partsupp, supplier, nation, region where ps_tenant_id = 7 and s_tenant_id = 7 and p_partkey = ps_partkey and s_suppkey = ps_suppkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;EUROPE&apos; ) order by s_acctbal desc, n_name, s_name, p_partkey limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T7 - Q3" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select l_orderkey, sum(l_extendedprice * (1 - l_discount)) as revenue, o_orderdate, o_shippriority from customer, orders, lineitem where c_tenant_id = 7 and o_tenant_id = 7 and l_tenant_id = 7 and c_mktsegment = &apos;HOUSEHOLD&apos; and c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate &lt; date &apos;1995-03-25&apos; and l_shipdate &gt; date &apos;1995-03-25&apos; group by l_orderkey, o_orderdate, o_shippriority order by revenue desc, o_orderdate limit 10;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T7 - Q4" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select o_orderpriority, count(*) as order_count from orders where o_tenant_id = 7 and o_orderdate &gt;= date &apos;1996-10-01&apos; and o_orderdate &lt; date &apos;1996-10-01&apos; + interval &apos;3&apos; month and exists ( select * from lineitem where l_tenant_id = 7 and l_orderkey = o_orderkey and l_commitdate &lt; l_receiptdate ) group by o_orderpriority order by o_orderpriority;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T7 - Q5" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select n_name, sum(l_extendedprice * (1 - l_discount)) as revenue from customer, orders, lineitem, supplier, nation, region where c_tenant_id = 7 and o_tenant_id = 7 and l_tenant_id = 7 and s_tenant_id = 7 and c_custkey = o_custkey and l_orderkey = o_orderkey and l_suppkey = s_suppkey and c_nationkey = s_nationkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;ASIA&apos; and o_orderdate &gt;= date &apos;1995-01-01&apos; and o_orderdate &lt; date &apos;1995-01-01&apos; + interval &apos;1&apos; year group by n_name order by revenue desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T7 - Q6" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select sum(l_extendedprice * l_discount) as revenue from lineitem where l_tenant_id = 7 and l_shipdate &gt;= date &apos;1995-01-01&apos; and l_shipdate &lt; date &apos;1995-01-01&apos; + interval &apos;1&apos; year and l_discount between 0.04 - 0.01 and 0.04 + 0.01 and l_quantity &lt; 24;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T7 - Q7" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select supp_nation, cust_nation, l_year, sum(volume) as revenue from ( select n1.n_name as supp_nation, n2.n_name as cust_nation, extract(year from l_shipdate) as l_year, l_extendedprice * (1 - l_discount) as volume from supplier, lineitem, orders, customer, nation n1, nation n2 where s_tenant_id = 7 and l_tenant_id = 7 and o_tenant_id = 7 and c_tenant_id = 7 and s_suppkey = l_suppkey and o_orderkey = l_orderkey and c_custkey = o_custkey and s_nationkey = n1.n_nationkey and c_nationkey = n2.n_nationkey and ( (n1.n_name = &apos;FRANCE&apos; and n2.n_name = &apos;CANADA&apos;) or (n1.n_name = &apos;CANADA&apos; and n2.n_name = &apos;FRANCE&apos;) ) and l_shipdate between date &apos;1995-01-01&apos; and date &apos;1996-12-31&apos; ) as shipping group by supp_nation, cust_nation, l_year order by supp_nation, cust_nation, l_year;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T7 - Q8" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select o_year, sum(case when nation = &apos;CANADA&apos; then volume else 0 end) / sum(volume) as mkt_share from ( select extract(year from o_orderdate) as o_year, l_extendedprice * (1 - l_discount) as volume, n2.n_name as nation from part, supplier, lineitem, orders, customer, nation n1, nation n2, region where p_tenant_id = 7 and s_tenant_id =  7 and l_tenant_id = 7 and o_tenant_id = 7 and c_tenant_id = 7 and p_partkey = l_partkey and s_suppkey = l_suppkey and l_orderkey = o_orderkey and o_custkey = c_custkey and c_nationkey = n1.n_nationkey and n1.n_regionkey = r_regionkey and r_name = &apos;AMERICA&apos; and s_nationkey = n2.n_nationkey and o_orderdate between date &apos;1995-01-01&apos; and date &apos;1996-12-31&apos; and p_type = &apos;ECONOMY BURNISHED NICKEL&apos; ) as all_nations group by o_year order by o_year;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T7 - Q9" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select nation, o_year, sum(amount) as sum_profit from ( select n_name as nation, extract(year from o_orderdate) as o_year, l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity as amount from part, supplier, lineitem, partsupp, orders, nation where p_tenant_id = 7 and s_tenant_id = 7 and l_tenant_id = 7 and ps_tenant_id = 7 and o_tenant_id = 7 and s_suppkey = l_suppkey and ps_suppkey = l_suppkey and ps_partkey = l_partkey and p_partkey = l_partkey and o_orderkey = l_orderkey and s_nationkey = n_nationkey and p_name like &apos;%plum%&apos; ) as profit group by nation, o_year order by nation, o_year desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T7 - Q10" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_custkey, c_name, sum(l_extendedprice * (1 - l_discount)) as revenue, c_acctbal, n_name, c_address, c_phone, c_comment from customer, orders, lineitem, nation where c_tenant_id = 7 and o_tenant_id = 7 and l_tenant_id = 7 and c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate &gt;= date &apos;1994-10-01&apos; and o_orderdate &lt; date &apos;1994-10-01&apos; + interval &apos;3&apos; month and l_returnflag = &apos;R&apos; and c_nationkey = n_nationkey group by c_custkey, c_name, c_acctbal, c_phone, n_name, c_address, c_comment order by revenue desc limit 20;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T7 - Q11" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select ps_partkey, sum(ps_supplycost * ps_availqty) as value from partsupp, supplier, nation where ps_tenant_id = 7 and s_tenant_id = 7 and ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = &apos;IRAN&apos; group by ps_partkey having sum(ps_supplycost * ps_availqty) &gt; ( select sum(ps_supplycost * ps_availqty) * 0.0000012987 from partsupp, supplier, nation where ps_tenant_id = 7 and s_tenant_id = 7 and ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = &apos;IRAN&apos; ) order by value desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T7 - Q12" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select l_shipmode, sum(case when o_orderpriority = &apos;1-URGENT&apos; or o_orderpriority = &apos;2-HIGH&apos; then 1 else 0 end) as high_line_count, sum(case when o_orderpriority &lt;&gt; &apos;1-URGENT&apos; and o_orderpriority &lt;&gt; &apos;2-HIGH&apos; then 1 else 0 end) as low_line_count from orders, lineitem where o_tenant_id = 7 and l_tenant_id = 7 and o_orderkey = l_orderkey and l_shipmode in (&apos;REG AIR&apos;, &apos;TRUCK&apos;) and l_commitdate &lt; l_receiptdate and l_shipdate &lt; l_commitdate and l_receiptdate &gt;= date &apos;1996-01-01&apos; and l_receiptdate &lt; date &apos;1996-01-01&apos; + interval &apos;1&apos; year group by l_shipmode order by l_shipmode;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T7 - Q13" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_count, count(*) as custdist from ( select c_custkey, count(o_orderkey) from customer left outer join orders on c_custkey = o_custkey and o_comment not like &apos;%unusual%accounts%&apos; where c_tenant_id = 7 group by c_custkey ) as c_orders (c_custkey, c_count) group by c_count order by custdist desc, c_count desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T7 - Q14" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select 100.00 * sum(case when p_type like &apos;PROMO%&apos; then l_extendedprice * (1 - l_discount) else 0 end) / sum(l_extendedprice * (1 - l_discount)) as promo_revenue from lineitem, part where l_tenant_id = 7 and p_tenant_id = 7 and l_partkey = p_partkey and l_shipdate &gt;= date &apos;1996-06-01&apos; and l_shipdate &lt; date &apos;1996-06-01&apos; + interval &apos;1&apos; month;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T7 - Q15" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Callable Statement</stringProp>
            <stringProp name="query">create view revenue0 (supplier_no, total_revenue) as select l_suppkey, sum(l_extendedprice * (1 - l_discount)) from lineitem where l_tenant_id = 7 and l_shipdate &gt;= date &apos;1996-10-01&apos; and l_shipdate &lt; date &apos;1996-10-01&apos; + interval &apos;3&apos; month group by l_suppkey; select s_suppkey, s_name, s_address, s_phone, total_revenue from supplier, revenue0 where s_tenant_id = 7 and s_suppkey = supplier_no and total_revenue = ( select max(total_revenue) from revenue0 ) order by s_suppkey; drop view revenue0;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T7 - Q16" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select p_brand, p_type, p_size, count(distinct ps_suppkey) as supplier_cnt from partsupp, part where ps_tenant_id = 7 and p_tenant_id = 7 and p_partkey = ps_partkey and p_brand &lt;&gt; &apos;Brand#22&apos; and p_type not like &apos;MEDIUM PLATED%&apos; and p_size in (27, 1, 4, 12, 17, 14, 50, 25) and ps_suppkey not in ( select s_suppkey from supplier where s_tenant_id = 7 and s_comment like &apos;%Customer%Complaints%&apos; ) group by p_brand, p_type, p_size order by supplier_cnt desc, p_brand, p_type, p_size;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T7 - Q18" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice, sum(l_quantity) from customer, orders, lineitem where c_tenant_id = 7 and o_tenant_id = 7 and l_tenant_id = 7 and o_orderkey in ( select l_orderkey from lineitem where l_tenant_id = 7 group by l_orderkey having sum(l_quantity) &gt; 313 ) and c_custkey = o_custkey and o_orderkey = l_orderkey group by c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice order by o_totalprice desc, o_orderdate limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T7 - Q19" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select sum(l_extendedprice* (1 - l_discount)) as revenue from lineitem, part where l_tenant_id = 7 and p_tenant_id = 7 and (( p_partkey = l_partkey and p_brand = &apos;Brand#35&apos; and p_container in (&apos;SM CasE&apos;, &apos;SM BOX&apos;, &apos;SM PACK&apos;, &apos;SM PKG&apos;) and l_quantity &gt;= 6 and l_quantity &lt;= 6 + 10 and p_size between 1 and 5 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ) or ( p_partkey = l_partkey and p_brand = &apos;Brand#44&apos; and p_container in (&apos;MED BAG&apos;, &apos;MED BOX&apos;, &apos;MED PKG&apos;, &apos;MED PACK&apos;) and l_quantity &gt;= 15 and l_quantity &lt;= 15 + 10 and p_size between 1 and 10 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ) or ( p_partkey = l_partkey and p_brand = &apos;Brand#21&apos; and p_container in (&apos;LG CasE&apos;, &apos;LG BOX&apos;, &apos;LG PACK&apos;, &apos;LG PKG&apos;) and l_quantity &gt;= 30 and l_quantity &lt;= 30 + 10 and p_size between 1 and 15 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos;));
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T7 - Q21" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select s_name, count(*) as numwait from supplier, lineitem l1, orders, nation where s_tenant_id = 7 and l1.l_tenant_id = 7 and o_tenant_id = 7 and s_suppkey = l1.l_suppkey and o_orderkey = l1.l_orderkey and o_orderstatus = &apos;F&apos; and l1.l_receiptdate &gt; l1.l_commitdate and exists ( select * from lineitem l2 where l2.l_tenant_id = 7 and l2.l_orderkey = l1.l_orderkey and l2.l_suppkey &lt;&gt; l1.l_suppkey ) and not exists ( select * from lineitem l3 where l3.l_tenant_id = 7 and l3.l_orderkey = l1.l_orderkey and l3.l_suppkey &lt;&gt; l1.l_suppkey and l3.l_receiptdate &gt; l3.l_commitdate ) and s_nationkey = n_nationkey and n_name = &apos;PERU&apos; group by s_name order by numwait desc, s_name limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T7 - Q22" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select cntrycode, count(*) as numcust, sum(c_acctbal) as totacctbal from ( select substring(c_phone from 1 for 2) as cntrycode, c_acctbal from customer where c_tenant_id = 7 and substring(c_phone from 1 for 2) in (&apos;29&apos;, &apos;15&apos;, &apos;12&apos;, &apos;24&apos;, &apos;13&apos;, &apos;34&apos;, &apos;16&apos;) and c_acctbal &gt; ( select avg(c_acctbal) from customer where c_tenant_id = 7 and c_acctbal &gt; 0.00 and substring(c_phone from 1 for 2) in (&apos;29&apos;, &apos;15&apos;, &apos;12&apos;, &apos;24&apos;, &apos;13&apos;, &apos;34&apos;, &apos;16&apos;) ) and not exists ( select * from orders where o_tenant_id = 7 and o_custkey = c_custkey ) ) as custsale group by cntrycode order by cntrycode;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T7 - RF1" enabled="false">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO region (r_regionkey, r_name, r_comment) VALUES (123476241, &apos;AFRICA&apos;, &apos;lar deposits. blithely final packages cajole. regular&apos;);
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T7 - RF2" enabled="false">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">DELETE FROM region WHERE r_regionkey = 123476241;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="T8" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <RandomOrderController guiclass="RandomOrderControllerGui" testclass="RandomOrderController" testname="Random Order Controller" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T8 - Q1" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="query">select l_returnflag, l_linestatus, sum(l_quantity) as sum_qty, sum(l_extendedprice) as sum_base_price, sum(l_extendedprice * (1 - l_discount)) as sum_disc_price, sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge, avg(l_quantity) as avg_qty, avg(l_extendedprice) as avg_price, avg(l_discount) as avg_disc, count(*) as count_order from lineitem where l_tenant_id = 8 and l_shipdate &lt;= date &apos;1998-12-01&apos; - interval &apos;61&apos; day group by l_returnflag, l_linestatus order by l_returnflag, l_linestatus;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T8 - Q2" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select s_acctbal, s_name, n_name, p_partkey, p_mfgr, s_address, s_phone, s_comment from part, supplier, partsupp, nation, region where p_tenant_id = 8 and s_tenant_id = 8 and ps_tenant_id = 8 and p_partkey = ps_partkey and s_suppkey = ps_suppkey and p_size = 14 and p_type like &apos;%BRASS&apos; and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; and ps_supplycost = ( select min(ps_supplycost) from partsupp, supplier, nation, region where ps_tenant_id = 8 and s_tenant_id = 8 and p_partkey = ps_partkey and s_suppkey = ps_suppkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; ) order by s_acctbal desc, n_name, s_name, p_partkey limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T8 - Q3" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select l_orderkey, sum(l_extendedprice * (1 - l_discount)) as revenue, o_orderdate, o_shippriority from customer, orders, lineitem where c_tenant_id = 8 and o_tenant_id = 8 and l_tenant_id = 8 and c_mktsegment = &apos;BUILDING&apos; and c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate &lt; date &apos;1995-03-06&apos; and l_shipdate &gt; date &apos;1995-03-06&apos; group by l_orderkey, o_orderdate, o_shippriority order by revenue desc, o_orderdate limit 10;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T8 - Q4" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select o_orderpriority, count(*) as order_count from orders where o_tenant_id = 8 and o_orderdate &gt;= date &apos;1993-12-01&apos; and o_orderdate &lt; date &apos;1993-12-01&apos; + interval &apos;3&apos; month and exists ( select * from lineitem where l_tenant_id = 8 and l_orderkey = o_orderkey and l_commitdate &lt; l_receiptdate ) group by o_orderpriority order by o_orderpriority;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T8 - Q5" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select n_name, sum(l_extendedprice * (1 - l_discount)) as revenue from customer, orders, lineitem, supplier, nation, region where c_tenant_id = 8 and o_tenant_id = 8 and l_tenant_id = 8 and s_tenant_id = 8 and c_custkey = o_custkey and l_orderkey = o_orderkey and l_suppkey = s_suppkey and c_nationkey = s_nationkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; and o_orderdate &gt;= date &apos;1994-01-01&apos; and o_orderdate &lt; date &apos;1994-01-01&apos; + interval &apos;1&apos; year group by n_name order by revenue desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T8 - Q6" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select sum(l_extendedprice * l_discount) as revenue from lineitem where l_tenant_id = 8 and l_shipdate &gt;= date &apos;1994-01-01&apos; and l_shipdate &lt; date &apos;1994-01-01&apos; + interval &apos;1&apos; year and l_discount between 0.09 - 0.01 and 0.09 + 0.01 and l_quantity &lt; 25;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T8 - Q7" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select supp_nation, cust_nation, l_year, sum(volume) as revenue from ( select n1.n_name as supp_nation, n2.n_name as cust_nation, extract(year from l_shipdate) as l_year, l_extendedprice * (1 - l_discount) as volume from supplier, lineitem, orders, customer, nation n1, nation n2 where s_tenant_id = 8 and l_tenant_id = 8 and o_tenant_id = 8 and c_tenant_id = 8 and s_suppkey = l_suppkey and o_orderkey = l_orderkey and c_custkey = o_custkey and s_nationkey = n1.n_nationkey and c_nationkey = n2.n_nationkey and ( (n1.n_name = &apos;RUSSIA&apos; and n2.n_name = &apos;ROMANIA&apos;) or (n1.n_name = &apos;ROMANIA&apos; and n2.n_name = &apos;RUSSIA&apos;) ) and l_shipdate between date &apos;1995-01-01&apos; and date &apos;1996-12-31&apos; ) as shipping group by supp_nation, cust_nation, l_year order by supp_nation, cust_nation, l_year;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T8 - Q8" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select o_year, sum(case when nation = &apos;ROMANIA&apos; then volume else 0 end) / sum(volume) as mkt_share from ( select extract(year from o_orderdate) as o_year, l_extendedprice * (1 - l_discount) as volume, n2.n_name as nation from part, supplier, lineitem, orders, customer, nation n1, nation n2, region where p_tenant_id = 8 and s_tenant_id =  8 and l_tenant_id = 8 and o_tenant_id = 8 and c_tenant_id = 8 and p_partkey = l_partkey and s_suppkey = l_suppkey and l_orderkey = o_orderkey and o_custkey = c_custkey and c_nationkey = n1.n_nationkey and n1.n_regionkey = r_regionkey and r_name = &apos;EUROPE&apos; and s_nationkey = n2.n_nationkey and o_orderdate between date &apos;1995-01-01&apos; and date &apos;1996-12-31&apos; and p_type = &apos;PROMO ANODIZED TIN&apos; ) as all_nations group by o_year order by o_year;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T8 - Q9" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select nation, o_year, sum(amount) as sum_profit from ( select n_name as nation, extract(year from o_orderdate) as o_year, l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity as amount from part, supplier, lineitem, partsupp, orders, nation where p_tenant_id = 8 and s_tenant_id = 8 and l_tenant_id = 8 and ps_tenant_id = 8 and o_tenant_id = 8 and s_suppkey = l_suppkey and ps_suppkey = l_suppkey and ps_partkey = l_partkey and p_partkey = l_partkey and o_orderkey = l_orderkey and s_nationkey = n_nationkey and p_name like &apos;%sienna%&apos; ) as profit group by nation, o_year order by nation, o_year desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T8 - Q10" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_custkey, c_name, sum(l_extendedprice * (1 - l_discount)) as revenue, c_acctbal, n_name, c_address, c_phone, c_comment from customer, orders, lineitem, nation where c_tenant_id = 8 and o_tenant_id = 8 and l_tenant_id = 8 and c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate &gt;= date &apos;1993-04-01&apos; and o_orderdate &lt; date &apos;1993-04-01&apos; + interval &apos;3&apos; month and l_returnflag = &apos;R&apos; and c_nationkey = n_nationkey group by c_custkey, c_name, c_acctbal, c_phone, n_name, c_address, c_comment order by revenue desc limit 20;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T8 - Q11" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select ps_partkey, sum(ps_supplycost * ps_availqty) as value from partsupp, supplier, nation where ps_tenant_id = 8 and s_tenant_id = 8 and ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = &apos;INDONESIA&apos; group by ps_partkey having sum(ps_supplycost * ps_availqty) &gt; ( select sum(ps_supplycost * ps_availqty) * 0.0000090909 from partsupp, supplier, nation where ps_tenant_id = 8 and s_tenant_id = 8 and ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = &apos;INDONESIA&apos; ) order by value desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T8 - Q12" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select l_shipmode, sum(case when o_orderpriority = &apos;1-URGENT&apos; or o_orderpriority = &apos;2-HIGH&apos; then 1 else 0 end) as high_line_count, sum(case when o_orderpriority &lt;&gt; &apos;1-URGENT&apos; and o_orderpriority &lt;&gt; &apos;2-HIGH&apos; then 1 else 0 end) as low_line_count from orders, lineitem where o_tenant_id = 8 and l_tenant_id = 8 and o_orderkey = l_orderkey and l_shipmode in (&apos;RAIL&apos;, &apos;TRUCK&apos;) and l_commitdate &lt; l_receiptdate and l_shipdate &lt; l_commitdate and l_receiptdate &gt;= date &apos;1995-01-01&apos; and l_receiptdate &lt; date &apos;1995-01-01&apos; + interval &apos;1&apos; year group by l_shipmode order by l_shipmode;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T8 - Q13" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_count, count(*) as custdist from ( select c_custkey, count(o_orderkey) from customer left outer join orders on c_custkey = o_custkey and o_comment not like &apos;%pending%accounts%&apos; where c_tenant_id = 8 group by c_custkey ) as c_orders (c_custkey, c_count) group by c_count order by custdist desc, c_count desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T8 - Q14" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select 100.00 * sum(case when p_type like &apos;PROMO%&apos; then l_extendedprice * (1 - l_discount) else 0 end) / sum(l_extendedprice * (1 - l_discount)) as promo_revenue from lineitem, part where l_tenant_id = 8 and p_tenant_id = 8 and l_partkey = p_partkey and l_shipdate &gt;= date &apos;1995-12-01&apos; and l_shipdate &lt; date &apos;1995-12-01&apos; + interval &apos;1&apos; month;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T8 - Q15" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Callable Statement</stringProp>
            <stringProp name="query">create view revenue0 (supplier_no, total_revenue) as select l_suppkey, sum(l_extendedprice * (1 - l_discount)) from lineitem where l_tenant_id = 8 and l_shipdate &gt;= date &apos;1994-07-01&apos; and l_shipdate &lt; date &apos;1994-07-01&apos; + interval &apos;3&apos; month group by l_suppkey; select s_suppkey, s_name, s_address, s_phone, total_revenue from supplier, revenue0 where s_tenant_id = 8 and s_suppkey = supplier_no and total_revenue = ( select max(total_revenue) from revenue0 ) order by s_suppkey; drop view revenue0;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T8 - Q16" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select p_brand, p_type, p_size, count(distinct ps_suppkey) as supplier_cnt from partsupp, part where ps_tenant_id = 8 and p_tenant_id = 8 and p_partkey = ps_partkey and p_brand &lt;&gt; &apos;Brand#52&apos; and p_type not like &apos;LARGE BRUSHED%&apos; and p_size in (20, 35, 34, 50, 23, 28, 48, 17) and ps_suppkey not in ( select s_suppkey from supplier where s_tenant_id = 8 and s_comment like &apos;%Customer%Complaints%&apos; ) group by p_brand, p_type, p_size order by supplier_cnt desc, p_brand, p_type, p_size;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T8 - Q18" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice, sum(l_quantity) from customer, orders, lineitem where c_tenant_id = 8 and o_tenant_id = 8 and l_tenant_id = 8 and o_orderkey in ( select l_orderkey from lineitem where l_tenant_id = 8 group by l_orderkey having sum(l_quantity) &gt; 314 ) and c_custkey = o_custkey and o_orderkey = l_orderkey group by c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice order by o_totalprice desc, o_orderdate limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T8 - Q19" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select sum(l_extendedprice* (1 - l_discount)) as revenue from lineitem, part where l_tenant_id = 8 and p_tenant_id = 8 and (( p_partkey = l_partkey and p_brand = &apos;Brand#24&apos; and p_container in (&apos;SM CasE&apos;, &apos;SM BOX&apos;, &apos;SM PACK&apos;, &apos;SM PKG&apos;) and l_quantity &gt;= 10 and l_quantity &lt;= 10 + 10 and p_size between 1 and 5 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ) or ( p_partkey = l_partkey and p_brand = &apos;Brand#45&apos; and p_container in (&apos;MED BAG&apos;, &apos;MED BOX&apos;, &apos;MED PKG&apos;, &apos;MED PACK&apos;) and l_quantity &gt;= 12 and l_quantity &lt;= 12 + 10 and p_size between 1 and 10 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ) or ( p_partkey = l_partkey and p_brand = &apos;Brand#33&apos; and p_container in (&apos;LG CasE&apos;, &apos;LG BOX&apos;, &apos;LG PACK&apos;, &apos;LG PKG&apos;) and l_quantity &gt;= 30 and l_quantity &lt;= 30 + 10 and p_size between 1 and 15 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos;));
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T8 - Q21" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select s_name, count(*) as numwait from supplier, lineitem l1, orders, nation where s_tenant_id = 8 and l1.l_tenant_id = 8 and o_tenant_id = 8 and s_suppkey = l1.l_suppkey and o_orderkey = l1.l_orderkey and o_orderstatus = &apos;F&apos; and l1.l_receiptdate &gt; l1.l_commitdate and exists ( select * from lineitem l2 where l2.l_tenant_id = 8 and l2.l_orderkey = l1.l_orderkey and l2.l_suppkey &lt;&gt; l1.l_suppkey ) and not exists ( select * from lineitem l3 where l3.l_tenant_id = 8 and l3.l_orderkey = l1.l_orderkey and l3.l_suppkey &lt;&gt; l1.l_suppkey and l3.l_receiptdate &gt; l3.l_commitdate ) and s_nationkey = n_nationkey and n_name = &apos;MOZAMBIQUE&apos; group by s_name order by numwait desc, s_name limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T8 - Q22" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select cntrycode, count(*) as numcust, sum(c_acctbal) as totacctbal from ( select substring(c_phone from 1 for 2) as cntrycode, c_acctbal from customer where c_tenant_id = 8 and substring(c_phone from 1 for 2) in (&apos;34&apos;, &apos;20&apos;, &apos;23&apos;, &apos;33&apos;, &apos;18&apos;, &apos;10&apos;, &apos;30&apos;) and c_acctbal &gt; ( select avg(c_acctbal) from customer where c_tenant_id = 8 and c_acctbal &gt; 0.00 and substring(c_phone from 1 for 2) in (&apos;34&apos;, &apos;20&apos;, &apos;23&apos;, &apos;33&apos;, &apos;18&apos;, &apos;10&apos;, &apos;30&apos;) ) and not exists ( select * from orders where o_tenant_id = 8 and o_custkey = c_custkey ) ) as custsale group by cntrycode order by cntrycode;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T8 - RF1" enabled="false">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO region (r_regionkey, r_name, r_comment) VALUES (123476241, &apos;AFRICA&apos;, &apos;lar deposits. blithely final packages cajole. regular&apos;);
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T8 - RF2" enabled="false">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">DELETE FROM region WHERE r_regionkey = 123476241;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="T9" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <RandomOrderController guiclass="RandomOrderControllerGui" testclass="RandomOrderController" testname="Random Order Controller" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T9 - Q1" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="query">select l_returnflag, l_linestatus, sum(l_quantity) as sum_qty, sum(l_extendedprice) as sum_base_price, sum(l_extendedprice * (1 - l_discount)) as sum_disc_price, sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge, avg(l_quantity) as avg_qty, avg(l_extendedprice) as avg_price, avg(l_discount) as avg_disc, count(*) as count_order from lineitem where l_tenant_id = 9 and l_shipdate &lt;= date &apos;1998-12-01&apos; - interval &apos;61&apos; day group by l_returnflag, l_linestatus order by l_returnflag, l_linestatus;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T9 - Q2" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select s_acctbal, s_name, n_name, p_partkey, p_mfgr, s_address, s_phone, s_comment from part, supplier, partsupp, nation, region where p_tenant_id = 9 and s_tenant_id = 9 and ps_tenant_id = 9 and p_partkey = ps_partkey and s_suppkey = ps_suppkey and p_size = 14 and p_type like &apos;%BRASS&apos; and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; and ps_supplycost = ( select min(ps_supplycost) from partsupp, supplier, nation, region where ps_tenant_id = 9 and s_tenant_id = 9 and p_partkey = ps_partkey and s_suppkey = ps_suppkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; ) order by s_acctbal desc, n_name, s_name, p_partkey limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T9 - Q3" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select l_orderkey, sum(l_extendedprice * (1 - l_discount)) as revenue, o_orderdate, o_shippriority from customer, orders, lineitem where c_tenant_id = 9 and o_tenant_id = 9 and l_tenant_id = 9 and c_mktsegment = &apos;BUILDING&apos; and c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate &lt; date &apos;1995-03-06&apos; and l_shipdate &gt; date &apos;1995-03-06&apos; group by l_orderkey, o_orderdate, o_shippriority order by revenue desc, o_orderdate limit 10;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T9 - Q4" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select o_orderpriority, count(*) as order_count from orders where o_tenant_id = 9 and o_orderdate &gt;= date &apos;1993-12-01&apos; and o_orderdate &lt; date &apos;1993-12-01&apos; + interval &apos;3&apos; month and exists ( select * from lineitem where l_tenant_id = 9 and l_orderkey = o_orderkey and l_commitdate &lt; l_receiptdate ) group by o_orderpriority order by o_orderpriority;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T9 - Q5" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select n_name, sum(l_extendedprice * (1 - l_discount)) as revenue from customer, orders, lineitem, supplier, nation, region where c_tenant_id = 9 and o_tenant_id = 9 and l_tenant_id = 9 and s_tenant_id = 9 and c_custkey = o_custkey and l_orderkey = o_orderkey and l_suppkey = s_suppkey and c_nationkey = s_nationkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; and o_orderdate &gt;= date &apos;1994-01-01&apos; and o_orderdate &lt; date &apos;1994-01-01&apos; + interval &apos;1&apos; year group by n_name order by revenue desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T9 - Q6" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select sum(l_extendedprice * l_discount) as revenue from lineitem where l_tenant_id = 9 and l_shipdate &gt;= date &apos;1994-01-01&apos; and l_shipdate &lt; date &apos;1994-01-01&apos; + interval &apos;1&apos; year and l_discount between 0.09 - 0.01 and 0.09 + 0.01 and l_quantity &lt; 25;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T9 - Q7" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select supp_nation, cust_nation, l_year, sum(volume) as revenue from ( select n1.n_name as supp_nation, n2.n_name as cust_nation, extract(year from l_shipdate) as l_year, l_extendedprice * (1 - l_discount) as volume from supplier, lineitem, orders, customer, nation n1, nation n2 where s_tenant_id = 9 and l_tenant_id = 9 and o_tenant_id = 9 and c_tenant_id = 9 and s_suppkey = l_suppkey and o_orderkey = l_orderkey and c_custkey = o_custkey and s_nationkey = n1.n_nationkey and c_nationkey = n2.n_nationkey and ( (n1.n_name = &apos;RUSSIA&apos; and n2.n_name = &apos;ROMANIA&apos;) or (n1.n_name = &apos;ROMANIA&apos; and n2.n_name = &apos;RUSSIA&apos;) ) and l_shipdate between date &apos;1995-01-01&apos; and date &apos;1996-12-31&apos; ) as shipping group by supp_nation, cust_nation, l_year order by supp_nation, cust_nation, l_year;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T9 - Q8" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select o_year, sum(case when nation = &apos;ROMANIA&apos; then volume else 0 end) / sum(volume) as mkt_share from ( select extract(year from o_orderdate) as o_year, l_extendedprice * (1 - l_discount) as volume, n2.n_name as nation from part, supplier, lineitem, orders, customer, nation n1, nation n2, region where p_tenant_id = 9 and s_tenant_id =  9 and l_tenant_id = 9 and o_tenant_id = 9 and c_tenant_id = 9 and p_partkey = l_partkey and s_suppkey = l_suppkey and l_orderkey = o_orderkey and o_custkey = c_custkey and c_nationkey = n1.n_nationkey and n1.n_regionkey = r_regionkey and r_name = &apos;EUROPE&apos; and s_nationkey = n2.n_nationkey and o_orderdate between date &apos;1995-01-01&apos; and date &apos;1996-12-31&apos; and p_type = &apos;PROMO ANODIZED TIN&apos; ) as all_nations group by o_year order by o_year;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T9 - Q9" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select nation, o_year, sum(amount) as sum_profit from ( select n_name as nation, extract(year from o_orderdate) as o_year, l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity as amount from part, supplier, lineitem, partsupp, orders, nation where p_tenant_id = 9 and s_tenant_id = 9 and l_tenant_id = 9 and ps_tenant_id = 9 and o_tenant_id = 9 and s_suppkey = l_suppkey and ps_suppkey = l_suppkey and ps_partkey = l_partkey and p_partkey = l_partkey and o_orderkey = l_orderkey and s_nationkey = n_nationkey and p_name like &apos;%sienna%&apos; ) as profit group by nation, o_year order by nation, o_year desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T9 - Q10" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_custkey, c_name, sum(l_extendedprice * (1 - l_discount)) as revenue, c_acctbal, n_name, c_address, c_phone, c_comment from customer, orders, lineitem, nation where c_tenant_id = 9 and o_tenant_id = 9 and l_tenant_id = 9 and c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate &gt;= date &apos;1993-04-01&apos; and o_orderdate &lt; date &apos;1993-04-01&apos; + interval &apos;3&apos; month and l_returnflag = &apos;R&apos; and c_nationkey = n_nationkey group by c_custkey, c_name, c_acctbal, c_phone, n_name, c_address, c_comment order by revenue desc limit 20;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T9 - Q11" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select ps_partkey, sum(ps_supplycost * ps_availqty) as value from partsupp, supplier, nation where ps_tenant_id = 9 and s_tenant_id = 9 and ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = &apos;INDONESIA&apos; group by ps_partkey having sum(ps_supplycost * ps_availqty) &gt; ( select sum(ps_supplycost * ps_availqty) * 0.0000090909 from partsupp, supplier, nation where ps_tenant_id = 9 and s_tenant_id = 9 and ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = &apos;INDONESIA&apos; ) order by value desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T9 - Q12" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select l_shipmode, sum(case when o_orderpriority = &apos;1-URGENT&apos; or o_orderpriority = &apos;2-HIGH&apos; then 1 else 0 end) as high_line_count, sum(case when o_orderpriority &lt;&gt; &apos;1-URGENT&apos; and o_orderpriority &lt;&gt; &apos;2-HIGH&apos; then 1 else 0 end) as low_line_count from orders, lineitem where o_tenant_id = 9 and l_tenant_id = 9 and o_orderkey = l_orderkey and l_shipmode in (&apos;RAIL&apos;, &apos;TRUCK&apos;) and l_commitdate &lt; l_receiptdate and l_shipdate &lt; l_commitdate and l_receiptdate &gt;= date &apos;1995-01-01&apos; and l_receiptdate &lt; date &apos;1995-01-01&apos; + interval &apos;1&apos; year group by l_shipmode order by l_shipmode;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T9 - Q13" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_count, count(*) as custdist from ( select c_custkey, count(o_orderkey) from customer left outer join orders on c_custkey = o_custkey and o_comment not like &apos;%pending%accounts%&apos; where c_tenant_id = 9 group by c_custkey ) as c_orders (c_custkey, c_count) group by c_count order by custdist desc, c_count desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T9 - Q14" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select 100.00 * sum(case when p_type like &apos;PROMO%&apos; then l_extendedprice * (1 - l_discount) else 0 end) / sum(l_extendedprice * (1 - l_discount)) as promo_revenue from lineitem, part where l_tenant_id = 9 and p_tenant_id = 9 and l_partkey = p_partkey and l_shipdate &gt;= date &apos;1995-12-01&apos; and l_shipdate &lt; date &apos;1995-12-01&apos; + interval &apos;1&apos; month;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T9 - Q15" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Callable Statement</stringProp>
            <stringProp name="query">create view revenue0 (supplier_no, total_revenue) as select l_suppkey, sum(l_extendedprice * (1 - l_discount)) from lineitem where l_tenant_id = 9 and l_shipdate &gt;= date &apos;1997-02-01&apos; and l_shipdate &lt; date &apos;1997-02-01&apos; + interval &apos;3&apos; month group by l_suppkey; select s_suppkey, s_name, s_address, s_phone, total_revenue from supplier, revenue0 where s_tenant_id = 9 and s_suppkey = supplier_no and total_revenue = ( select max(total_revenue) from revenue0 ) order by s_suppkey; drop view revenue0;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T9 - Q16" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select p_brand, p_type, p_size, count(distinct ps_suppkey) as supplier_cnt from partsupp, part where ps_tenant_id = 9 and p_tenant_id = 9 and p_partkey = ps_partkey and p_brand &lt;&gt; &apos;Brand#52&apos; and p_type not like &apos;LARGE BRUSHED%&apos; and p_size in (20, 35, 34, 50, 23, 28, 48, 17) and ps_suppkey not in ( select s_suppkey from supplier where s_tenant_id = 9 and s_comment like &apos;%Customer%Complaints%&apos; ) group by p_brand, p_type, p_size order by supplier_cnt desc, p_brand, p_type, p_size;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T9 - Q18" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice, sum(l_quantity) from customer, orders, lineitem where c_tenant_id = 9 and o_tenant_id = 9 and l_tenant_id = 9 and o_orderkey in ( select l_orderkey from lineitem where l_tenant_id = 9 group by l_orderkey having sum(l_quantity) &gt; 314 ) and c_custkey = o_custkey and o_orderkey = l_orderkey group by c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice order by o_totalprice desc, o_orderdate limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T9 - Q19" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select sum(l_extendedprice* (1 - l_discount)) as revenue from lineitem, part where l_tenant_id = 9 and p_tenant_id = 9 and (( p_partkey = l_partkey and p_brand = &apos;Brand#24&apos; and p_container in (&apos;SM CasE&apos;, &apos;SM BOX&apos;, &apos;SM PACK&apos;, &apos;SM PKG&apos;) and l_quantity &gt;= 10 and l_quantity &lt;= 10 + 10 and p_size between 1 and 5 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ) or ( p_partkey = l_partkey and p_brand = &apos;Brand#45&apos; and p_container in (&apos;MED BAG&apos;, &apos;MED BOX&apos;, &apos;MED PKG&apos;, &apos;MED PACK&apos;) and l_quantity &gt;= 12 and l_quantity &lt;= 12 + 10 and p_size between 1 and 10 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ) or ( p_partkey = l_partkey and p_brand = &apos;Brand#33&apos; and p_container in (&apos;LG CasE&apos;, &apos;LG BOX&apos;, &apos;LG PACK&apos;, &apos;LG PKG&apos;) and l_quantity &gt;= 30 and l_quantity &lt;= 30 + 10 and p_size between 1 and 15 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos;));
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T9 - Q21" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select s_name, count(*) as numwait from supplier, lineitem l1, orders, nation where s_tenant_id = 9 and l1.l_tenant_id = 9 and o_tenant_id = 9 and s_suppkey = l1.l_suppkey and o_orderkey = l1.l_orderkey and o_orderstatus = &apos;F&apos; and l1.l_receiptdate &gt; l1.l_commitdate and exists ( select * from lineitem l2 where l2.l_tenant_id = 9 and l2.l_orderkey = l1.l_orderkey and l2.l_suppkey &lt;&gt; l1.l_suppkey ) and not exists ( select * from lineitem l3 where l3.l_tenant_id = 9 and l3.l_orderkey = l1.l_orderkey and l3.l_suppkey &lt;&gt; l1.l_suppkey and l3.l_receiptdate &gt; l3.l_commitdate ) and s_nationkey = n_nationkey and n_name = &apos;MOZAMBIQUE&apos; group by s_name order by numwait desc, s_name limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T9 - Q22" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select cntrycode, count(*) as numcust, sum(c_acctbal) as totacctbal from ( select substring(c_phone from 1 for 2) as cntrycode, c_acctbal from customer where c_tenant_id = 9 and substring(c_phone from 1 for 2) in (&apos;34&apos;, &apos;20&apos;, &apos;23&apos;, &apos;33&apos;, &apos;18&apos;, &apos;10&apos;, &apos;30&apos;) and c_acctbal &gt; ( select avg(c_acctbal) from customer where c_tenant_id = 9 and c_acctbal &gt; 0.00 and substring(c_phone from 1 for 2) in (&apos;34&apos;, &apos;20&apos;, &apos;23&apos;, &apos;33&apos;, &apos;18&apos;, &apos;10&apos;, &apos;30&apos;) ) and not exists ( select * from orders where o_tenant_id = 9 and o_custkey = c_custkey ) ) as custsale group by cntrycode order by cntrycode;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T9 - RF1" enabled="false">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO region (r_regionkey, r_name, r_comment) VALUES (123476241, &apos;AFRICA&apos;, &apos;lar deposits. blithely final packages cajole. regular&apos;);
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T9 - RF2" enabled="false">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">DELETE FROM region WHERE r_regionkey = 123476241;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="T10" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <RandomOrderController guiclass="RandomOrderControllerGui" testclass="RandomOrderController" testname="Random Order Controller" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T10 - Q1" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="query">select l_returnflag, l_linestatus, sum(l_quantity) as sum_qty, sum(l_extendedprice) as sum_base_price, sum(l_extendedprice * (1 - l_discount)) as sum_disc_price, sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge, avg(l_quantity) as avg_qty, avg(l_extendedprice) as avg_price, avg(l_discount) as avg_disc, count(*) as count_order from lineitem where l_tenant_id = 10 and l_shipdate &lt;= date &apos;1998-12-01&apos; - interval &apos;61&apos; day group by l_returnflag, l_linestatus order by l_returnflag, l_linestatus;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T10 - Q2" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select s_acctbal, s_name, n_name, p_partkey, p_mfgr, s_address, s_phone, s_comment from part, supplier, partsupp, nation, region where p_tenant_id = 10 and s_tenant_id = 10 and ps_tenant_id = 10 and p_partkey = ps_partkey and s_suppkey = ps_suppkey and p_size = 14 and p_type like &apos;%BRASS&apos; and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; and ps_supplycost = ( select min(ps_supplycost) from partsupp, supplier, nation, region where ps_tenant_id = 10 and s_tenant_id = 10 and p_partkey = ps_partkey and s_suppkey = ps_suppkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; ) order by s_acctbal desc, n_name, s_name, p_partkey limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T10 - Q3" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select l_orderkey, sum(l_extendedprice * (1 - l_discount)) as revenue, o_orderdate, o_shippriority from customer, orders, lineitem where c_tenant_id = 10 and o_tenant_id = 10 and l_tenant_id = 10 and c_mktsegment = &apos;BUILDING&apos; and c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate &lt; date &apos;1995-03-06&apos; and l_shipdate &gt; date &apos;1995-03-06&apos; group by l_orderkey, o_orderdate, o_shippriority order by revenue desc, o_orderdate limit 10;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T10 - Q4" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select o_orderpriority, count(*) as order_count from orders where o_tenant_id = 10 and o_orderdate &gt;= date &apos;1993-12-01&apos; and o_orderdate &lt; date &apos;1993-12-01&apos; + interval &apos;3&apos; month and exists ( select * from lineitem where l_tenant_id = 10 and l_orderkey = o_orderkey and l_commitdate &lt; l_receiptdate ) group by o_orderpriority order by o_orderpriority;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T10 - Q5" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select n_name, sum(l_extendedprice * (1 - l_discount)) as revenue from customer, orders, lineitem, supplier, nation, region where c_tenant_id = 10 and o_tenant_id = 10 and l_tenant_id = 10 and s_tenant_id = 10 and c_custkey = o_custkey and l_orderkey = o_orderkey and l_suppkey = s_suppkey and c_nationkey = s_nationkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; and o_orderdate &gt;= date &apos;1994-01-01&apos; and o_orderdate &lt; date &apos;1994-01-01&apos; + interval &apos;1&apos; year group by n_name order by revenue desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T10 - Q6" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select sum(l_extendedprice * l_discount) as revenue from lineitem where l_tenant_id = 10 and l_shipdate &gt;= date &apos;1994-01-01&apos; and l_shipdate &lt; date &apos;1994-01-01&apos; + interval &apos;1&apos; year and l_discount between 0.09 - 0.01 and 0.09 + 0.01 and l_quantity &lt; 25;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T10 - Q7" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select supp_nation, cust_nation, l_year, sum(volume) as revenue from ( select n1.n_name as supp_nation, n2.n_name as cust_nation, extract(year from l_shipdate) as l_year, l_extendedprice * (1 - l_discount) as volume from supplier, lineitem, orders, customer, nation n1, nation n2 where s_tenant_id = 10 and l_tenant_id = 10 and o_tenant_id = 10 and c_tenant_id = 10 and s_suppkey = l_suppkey and o_orderkey = l_orderkey and c_custkey = o_custkey and s_nationkey = n1.n_nationkey and c_nationkey = n2.n_nationkey and ( (n1.n_name = &apos;RUSSIA&apos; and n2.n_name = &apos;ROMANIA&apos;) or (n1.n_name = &apos;ROMANIA&apos; and n2.n_name = &apos;RUSSIA&apos;) ) and l_shipdate between date &apos;1995-01-01&apos; and date &apos;1996-12-31&apos; ) as shipping group by supp_nation, cust_nation, l_year order by supp_nation, cust_nation, l_year;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T10 - Q8" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select o_year, sum(case when nation = &apos;ROMANIA&apos; then volume else 0 end) / sum(volume) as mkt_share from ( select extract(year from o_orderdate) as o_year, l_extendedprice * (1 - l_discount) as volume, n2.n_name as nation from part, supplier, lineitem, orders, customer, nation n1, nation n2, region where p_tenant_id = 10 and s_tenant_id =  10 and l_tenant_id = 10 and o_tenant_id = 10 and c_tenant_id = 10 and p_partkey = l_partkey and s_suppkey = l_suppkey and l_orderkey = o_orderkey and o_custkey = c_custkey and c_nationkey = n1.n_nationkey and n1.n_regionkey = r_regionkey and r_name = &apos;EUROPE&apos; and s_nationkey = n2.n_nationkey and o_orderdate between date &apos;1995-01-01&apos; and date &apos;1996-12-31&apos; and p_type = &apos;PROMO ANODIZED TIN&apos; ) as all_nations group by o_year order by o_year;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T10 - Q9" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select nation, o_year, sum(amount) as sum_profit from ( select n_name as nation, extract(year from o_orderdate) as o_year, l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity as amount from part, supplier, lineitem, partsupp, orders, nation where p_tenant_id = 10 and s_tenant_id = 10 and l_tenant_id = 10 and ps_tenant_id = 10 and o_tenant_id = 10 and s_suppkey = l_suppkey and ps_suppkey = l_suppkey and ps_partkey = l_partkey and p_partkey = l_partkey and o_orderkey = l_orderkey and s_nationkey = n_nationkey and p_name like &apos;%sienna%&apos; ) as profit group by nation, o_year order by nation, o_year desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T10 - Q10" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_custkey, c_name, sum(l_extendedprice * (1 - l_discount)) as revenue, c_acctbal, n_name, c_address, c_phone, c_comment from customer, orders, lineitem, nation where c_tenant_id = 10 and o_tenant_id = 10 and l_tenant_id = 10 and c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate &gt;= date &apos;1993-04-01&apos; and o_orderdate &lt; date &apos;1993-04-01&apos; + interval &apos;3&apos; month and l_returnflag = &apos;R&apos; and c_nationkey = n_nationkey group by c_custkey, c_name, c_acctbal, c_phone, n_name, c_address, c_comment order by revenue desc limit 20;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T10 - Q11" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select ps_partkey, sum(ps_supplycost * ps_availqty) as value from partsupp, supplier, nation where ps_tenant_id = 10 and s_tenant_id = 10 and ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = &apos;INDONESIA&apos; group by ps_partkey having sum(ps_supplycost * ps_availqty) &gt; ( select sum(ps_supplycost * ps_availqty) * 0.0000090909 from partsupp, supplier, nation where ps_tenant_id = 10 and s_tenant_id = 10 and ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = &apos;INDONESIA&apos; ) order by value desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T10 - Q12" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select l_shipmode, sum(case when o_orderpriority = &apos;1-URGENT&apos; or o_orderpriority = &apos;2-HIGH&apos; then 1 else 0 end) as high_line_count, sum(case when o_orderpriority &lt;&gt; &apos;1-URGENT&apos; and o_orderpriority &lt;&gt; &apos;2-HIGH&apos; then 1 else 0 end) as low_line_count from orders, lineitem where o_tenant_id = 10 and l_tenant_id = 10 and o_orderkey = l_orderkey and l_shipmode in (&apos;RAIL&apos;, &apos;TRUCK&apos;) and l_commitdate &lt; l_receiptdate and l_shipdate &lt; l_commitdate and l_receiptdate &gt;= date &apos;1995-01-01&apos; and l_receiptdate &lt; date &apos;1995-01-01&apos; + interval &apos;1&apos; year group by l_shipmode order by l_shipmode;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T10 - Q13" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_count, count(*) as custdist from ( select c_custkey, count(o_orderkey) from customer left outer join orders on c_custkey = o_custkey and o_comment not like &apos;%pending%accounts%&apos; where c_tenant_id = 10 group by c_custkey ) as c_orders (c_custkey, c_count) group by c_count order by custdist desc, c_count desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T10 - Q14" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select 100.00 * sum(case when p_type like &apos;PROMO%&apos; then l_extendedprice * (1 - l_discount) else 0 end) / sum(l_extendedprice * (1 - l_discount)) as promo_revenue from lineitem, part where l_tenant_id = 10 and p_tenant_id = 10 and l_partkey = p_partkey and l_shipdate &gt;= date &apos;1995-12-01&apos; and l_shipdate &lt; date &apos;1995-12-01&apos; + interval &apos;1&apos; month;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T10 - Q15" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Callable Statement</stringProp>
            <stringProp name="query">create view revenue0 (supplier_no, total_revenue) as select l_suppkey, sum(l_extendedprice * (1 - l_discount)) from lineitem where l_tenant_id = 10 and l_shipdate &gt;= date &apos;1994-10-01&apos; and l_shipdate &lt; date &apos;1994-10-01&apos; + interval &apos;3&apos; month group by l_suppkey; select s_suppkey, s_name, s_address, s_phone, total_revenue from supplier, revenue0 where s_tenant_id = 10 and s_suppkey = supplier_no and total_revenue = ( select max(total_revenue) from revenue0 ) order by s_suppkey; drop view revenue0;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T10 - Q16" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select p_brand, p_type, p_size, count(distinct ps_suppkey) as supplier_cnt from partsupp, part where ps_tenant_id = 10 and p_tenant_id = 10 and p_partkey = ps_partkey and p_brand &lt;&gt; &apos;Brand#52&apos; and p_type not like &apos;LARGE BRUSHED%&apos; and p_size in (20, 35, 34, 50, 23, 28, 48, 17) and ps_suppkey not in ( select s_suppkey from supplier where s_tenant_id = 10 and s_comment like &apos;%Customer%Complaints%&apos; ) group by p_brand, p_type, p_size order by supplier_cnt desc, p_brand, p_type, p_size;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T10 - Q18" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice, sum(l_quantity) from customer, orders, lineitem where c_tenant_id = 10 and o_tenant_id = 10 and l_tenant_id = 10 and o_orderkey in ( select l_orderkey from lineitem where l_tenant_id = 10 group by l_orderkey having sum(l_quantity) &gt; 314 ) and c_custkey = o_custkey and o_orderkey = l_orderkey group by c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice order by o_totalprice desc, o_orderdate limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T10 - Q19" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select sum(l_extendedprice* (1 - l_discount)) as revenue from lineitem, part where l_tenant_id = 10 and p_tenant_id = 10 and (( p_partkey = l_partkey and p_brand = &apos;Brand#24&apos; and p_container in (&apos;SM CasE&apos;, &apos;SM BOX&apos;, &apos;SM PACK&apos;, &apos;SM PKG&apos;) and l_quantity &gt;= 10 and l_quantity &lt;= 10 + 10 and p_size between 1 and 5 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ) or ( p_partkey = l_partkey and p_brand = &apos;Brand#45&apos; and p_container in (&apos;MED BAG&apos;, &apos;MED BOX&apos;, &apos;MED PKG&apos;, &apos;MED PACK&apos;) and l_quantity &gt;= 12 and l_quantity &lt;= 12 + 10 and p_size between 1 and 10 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ) or ( p_partkey = l_partkey and p_brand = &apos;Brand#33&apos; and p_container in (&apos;LG CasE&apos;, &apos;LG BOX&apos;, &apos;LG PACK&apos;, &apos;LG PKG&apos;) and l_quantity &gt;= 30 and l_quantity &lt;= 30 + 10 and p_size between 1 and 15 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos;));
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T10 - Q21" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select s_name, count(*) as numwait from supplier, lineitem l1, orders, nation where s_tenant_id = 10 and l1.l_tenant_id = 10 and o_tenant_id = 10 and s_suppkey = l1.l_suppkey and o_orderkey = l1.l_orderkey and o_orderstatus = &apos;F&apos; and l1.l_receiptdate &gt; l1.l_commitdate and exists ( select * from lineitem l2 where l2.l_tenant_id = 10 and l2.l_orderkey = l1.l_orderkey and l2.l_suppkey &lt;&gt; l1.l_suppkey ) and not exists ( select * from lineitem l3 where l3.l_tenant_id = 10 and l3.l_orderkey = l1.l_orderkey and l3.l_suppkey &lt;&gt; l1.l_suppkey and l3.l_receiptdate &gt; l3.l_commitdate ) and s_nationkey = n_nationkey and n_name = &apos;MOZAMBIQUE&apos; group by s_name order by numwait desc, s_name limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T10 - Q22" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select cntrycode, count(*) as numcust, sum(c_acctbal) as totacctbal from ( select substring(c_phone from 1 for 2) as cntrycode, c_acctbal from customer where c_tenant_id = 10 and substring(c_phone from 1 for 2) in (&apos;34&apos;, &apos;20&apos;, &apos;23&apos;, &apos;33&apos;, &apos;18&apos;, &apos;10&apos;, &apos;30&apos;) and c_acctbal &gt; ( select avg(c_acctbal) from customer where c_tenant_id = 10 and c_acctbal &gt; 0.00 and substring(c_phone from 1 for 2) in (&apos;34&apos;, &apos;20&apos;, &apos;23&apos;, &apos;33&apos;, &apos;18&apos;, &apos;10&apos;, &apos;30&apos;) ) and not exists ( select * from orders where o_tenant_id = 10 and o_custkey = c_custkey ) ) as custsale group by cntrycode order by cntrycode;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T10 - RF1" enabled="false">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO region (r_regionkey, r_name, r_comment) VALUES (123476241, &apos;AFRICA&apos;, &apos;lar deposits. blithely final packages cajole. regular&apos;);
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T10 - RF2" enabled="false">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">DELETE FROM region WHERE r_regionkey = 123476241;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="T11" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <RandomOrderController guiclass="RandomOrderControllerGui" testclass="RandomOrderController" testname="Random Order Controller" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T11 - Q1" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="query">select l_returnflag, l_linestatus, sum(l_quantity) as sum_qty, sum(l_extendedprice) as sum_base_price, sum(l_extendedprice * (1 - l_discount)) as sum_disc_price, sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge, avg(l_quantity) as avg_qty, avg(l_extendedprice) as avg_price, avg(l_discount) as avg_disc, count(*) as count_order from lineitem where l_tenant_id = 11 and l_shipdate &lt;= date &apos;1998-12-01&apos; - interval &apos;61&apos; day group by l_returnflag, l_linestatus order by l_returnflag, l_linestatus;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T11 - Q2" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select s_acctbal, s_name, n_name, p_partkey, p_mfgr, s_address, s_phone, s_comment from part, supplier, partsupp, nation, region where p_tenant_id = 11 and s_tenant_id = 11 and ps_tenant_id = 11 and p_partkey = ps_partkey and s_suppkey = ps_suppkey and p_size = 14 and p_type like &apos;%BRASS&apos; and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; and ps_supplycost = ( select min(ps_supplycost) from partsupp, supplier, nation, region where ps_tenant_id = 11 and s_tenant_id = 11 and p_partkey = ps_partkey and s_suppkey = ps_suppkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; ) order by s_acctbal desc, n_name, s_name, p_partkey limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T11 - Q3" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select l_orderkey, sum(l_extendedprice * (1 - l_discount)) as revenue, o_orderdate, o_shippriority from customer, orders, lineitem where c_tenant_id = 11 and o_tenant_id = 11 and l_tenant_id = 11 and c_mktsegment = &apos;BUILDING&apos; and c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate &lt; date &apos;1995-03-06&apos; and l_shipdate &gt; date &apos;1995-03-06&apos; group by l_orderkey, o_orderdate, o_shippriority order by revenue desc, o_orderdate limit 10;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T11 - Q4" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select o_orderpriority, count(*) as order_count from orders where o_tenant_id = 11 and o_orderdate &gt;= date &apos;1993-12-01&apos; and o_orderdate &lt; date &apos;1993-12-01&apos; + interval &apos;3&apos; month and exists ( select * from lineitem where l_tenant_id = 11 and l_orderkey = o_orderkey and l_commitdate &lt; l_receiptdate ) group by o_orderpriority order by o_orderpriority;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T11 - Q5" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select n_name, sum(l_extendedprice * (1 - l_discount)) as revenue from customer, orders, lineitem, supplier, nation, region where c_tenant_id = 11 and o_tenant_id = 11 and l_tenant_id = 11 and s_tenant_id = 11 and c_custkey = o_custkey and l_orderkey = o_orderkey and l_suppkey = s_suppkey and c_nationkey = s_nationkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; and o_orderdate &gt;= date &apos;1994-01-01&apos; and o_orderdate &lt; date &apos;1994-01-01&apos; + interval &apos;1&apos; year group by n_name order by revenue desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T11 - Q6" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select sum(l_extendedprice * l_discount) as revenue from lineitem where l_tenant_id = 11 and l_shipdate &gt;= date &apos;1994-01-01&apos; and l_shipdate &lt; date &apos;1994-01-01&apos; + interval &apos;1&apos; year and l_discount between 0.09 - 0.01 and 0.09 + 0.01 and l_quantity &lt; 25;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T11 - Q7" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select supp_nation, cust_nation, l_year, sum(volume) as revenue from ( select n1.n_name as supp_nation, n2.n_name as cust_nation, extract(year from l_shipdate) as l_year, l_extendedprice * (1 - l_discount) as volume from supplier, lineitem, orders, customer, nation n1, nation n2 where s_tenant_id = 11 and l_tenant_id = 11 and o_tenant_id = 11 and c_tenant_id = 11 and s_suppkey = l_suppkey and o_orderkey = l_orderkey and c_custkey = o_custkey and s_nationkey = n1.n_nationkey and c_nationkey = n2.n_nationkey and ( (n1.n_name = &apos;RUSSIA&apos; and n2.n_name = &apos;ROMANIA&apos;) or (n1.n_name = &apos;ROMANIA&apos; and n2.n_name = &apos;RUSSIA&apos;) ) and l_shipdate between date &apos;1995-01-01&apos; and date &apos;1996-12-31&apos; ) as shipping group by supp_nation, cust_nation, l_year order by supp_nation, cust_nation, l_year;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T11 - Q8" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select o_year, sum(case when nation = &apos;ROMANIA&apos; then volume else 0 end) / sum(volume) as mkt_share from ( select extract(year from o_orderdate) as o_year, l_extendedprice * (1 - l_discount) as volume, n2.n_name as nation from part, supplier, lineitem, orders, customer, nation n1, nation n2, region where p_tenant_id = 11 and s_tenant_id =  11 and l_tenant_id = 11 and o_tenant_id = 11 and c_tenant_id = 11 and p_partkey = l_partkey and s_suppkey = l_suppkey and l_orderkey = o_orderkey and o_custkey = c_custkey and c_nationkey = n1.n_nationkey and n1.n_regionkey = r_regionkey and r_name = &apos;EUROPE&apos; and s_nationkey = n2.n_nationkey and o_orderdate between date &apos;1995-01-01&apos; and date &apos;1996-12-31&apos; and p_type = &apos;PROMO ANODIZED TIN&apos; ) as all_nations group by o_year order by o_year;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T11 - Q9" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select nation, o_year, sum(amount) as sum_profit from ( select n_name as nation, extract(year from o_orderdate) as o_year, l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity as amount from part, supplier, lineitem, partsupp, orders, nation where p_tenant_id = 11 and s_tenant_id = 11 and l_tenant_id = 11 and ps_tenant_id = 11 and o_tenant_id = 11 and s_suppkey = l_suppkey and ps_suppkey = l_suppkey and ps_partkey = l_partkey and p_partkey = l_partkey and o_orderkey = l_orderkey and s_nationkey = n_nationkey and p_name like &apos;%sienna%&apos; ) as profit group by nation, o_year order by nation, o_year desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T11 - Q10" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_custkey, c_name, sum(l_extendedprice * (1 - l_discount)) as revenue, c_acctbal, n_name, c_address, c_phone, c_comment from customer, orders, lineitem, nation where c_tenant_id = 11 and o_tenant_id = 11 and l_tenant_id = 11 and c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate &gt;= date &apos;1993-04-01&apos; and o_orderdate &lt; date &apos;1993-04-01&apos; + interval &apos;3&apos; month and l_returnflag = &apos;R&apos; and c_nationkey = n_nationkey group by c_custkey, c_name, c_acctbal, c_phone, n_name, c_address, c_comment order by revenue desc limit 20;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T11 - Q11" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select ps_partkey, sum(ps_supplycost * ps_availqty) as value from partsupp, supplier, nation where ps_tenant_id = 11 and s_tenant_id = 11 and ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = &apos;INDONESIA&apos; group by ps_partkey having sum(ps_supplycost * ps_availqty) &gt; ( select sum(ps_supplycost * ps_availqty) * 0.0000090909 from partsupp, supplier, nation where ps_tenant_id = 11 and s_tenant_id = 11 and ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = &apos;INDONESIA&apos; ) order by value desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T11 - Q12" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select l_shipmode, sum(case when o_orderpriority = &apos;1-URGENT&apos; or o_orderpriority = &apos;2-HIGH&apos; then 1 else 0 end) as high_line_count, sum(case when o_orderpriority &lt;&gt; &apos;1-URGENT&apos; and o_orderpriority &lt;&gt; &apos;2-HIGH&apos; then 1 else 0 end) as low_line_count from orders, lineitem where o_tenant_id = 11 and l_tenant_id = 11 and o_orderkey = l_orderkey and l_shipmode in (&apos;RAIL&apos;, &apos;TRUCK&apos;) and l_commitdate &lt; l_receiptdate and l_shipdate &lt; l_commitdate and l_receiptdate &gt;= date &apos;1995-01-01&apos; and l_receiptdate &lt; date &apos;1995-01-01&apos; + interval &apos;1&apos; year group by l_shipmode order by l_shipmode;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T11 - Q13" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_count, count(*) as custdist from ( select c_custkey, count(o_orderkey) from customer left outer join orders on c_custkey = o_custkey and o_comment not like &apos;%pending%accounts%&apos; where c_tenant_id = 11 group by c_custkey ) as c_orders (c_custkey, c_count) group by c_count order by custdist desc, c_count desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T11 - Q14" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select 100.00 * sum(case when p_type like &apos;PROMO%&apos; then l_extendedprice * (1 - l_discount) else 0 end) / sum(l_extendedprice * (1 - l_discount)) as promo_revenue from lineitem, part where l_tenant_id = 11 and p_tenant_id = 11 and l_partkey = p_partkey and l_shipdate &gt;= date &apos;1995-12-01&apos; and l_shipdate &lt; date &apos;1995-12-01&apos; + interval &apos;1&apos; month;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T11 - Q15" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Callable Statement</stringProp>
            <stringProp name="query">create view revenue0 (supplier_no, total_revenue) as select l_suppkey, sum(l_extendedprice * (1 - l_discount)) from lineitem where l_tenant_id = 11 and l_shipdate &gt;= date &apos;1997-05-01&apos; and l_shipdate &lt; date &apos;1997-05-01&apos; + interval &apos;3&apos; month group by l_suppkey; select s_suppkey, s_name, s_address, s_phone, total_revenue from supplier, revenue0 where s_tenant_id = 11 and s_suppkey = supplier_no and total_revenue = ( select max(total_revenue) from revenue0 ) order by s_suppkey; drop view revenue0;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T11 - Q16" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select p_brand, p_type, p_size, count(distinct ps_suppkey) as supplier_cnt from partsupp, part where ps_tenant_id = 11 and p_tenant_id = 11 and p_partkey = ps_partkey and p_brand &lt;&gt; &apos;Brand#52&apos; and p_type not like &apos;LARGE BRUSHED%&apos; and p_size in (20, 35, 34, 50, 23, 28, 48, 17) and ps_suppkey not in ( select s_suppkey from supplier where s_tenant_id = 11 and s_comment like &apos;%Customer%Complaints%&apos; ) group by p_brand, p_type, p_size order by supplier_cnt desc, p_brand, p_type, p_size;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T11 - Q18" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice, sum(l_quantity) from customer, orders, lineitem where c_tenant_id = 11 and o_tenant_id = 11 and l_tenant_id = 11 and o_orderkey in ( select l_orderkey from lineitem where l_tenant_id = 11 group by l_orderkey having sum(l_quantity) &gt; 314 ) and c_custkey = o_custkey and o_orderkey = l_orderkey group by c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice order by o_totalprice desc, o_orderdate limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T11 - Q19" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select sum(l_extendedprice* (1 - l_discount)) as revenue from lineitem, part where l_tenant_id = 11 and p_tenant_id = 11 and (( p_partkey = l_partkey and p_brand = &apos;Brand#24&apos; and p_container in (&apos;SM CasE&apos;, &apos;SM BOX&apos;, &apos;SM PACK&apos;, &apos;SM PKG&apos;) and l_quantity &gt;= 10 and l_quantity &lt;= 10 + 10 and p_size between 1 and 5 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ) or ( p_partkey = l_partkey and p_brand = &apos;Brand#45&apos; and p_container in (&apos;MED BAG&apos;, &apos;MED BOX&apos;, &apos;MED PKG&apos;, &apos;MED PACK&apos;) and l_quantity &gt;= 12 and l_quantity &lt;= 12 + 10 and p_size between 1 and 10 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ) or ( p_partkey = l_partkey and p_brand = &apos;Brand#33&apos; and p_container in (&apos;LG CasE&apos;, &apos;LG BOX&apos;, &apos;LG PACK&apos;, &apos;LG PKG&apos;) and l_quantity &gt;= 30 and l_quantity &lt;= 30 + 10 and p_size between 1 and 15 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos;));
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T11 - Q21" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select s_name, count(*) as numwait from supplier, lineitem l1, orders, nation where s_tenant_id = 11 and l1.l_tenant_id = 11 and o_tenant_id = 11 and s_suppkey = l1.l_suppkey and o_orderkey = l1.l_orderkey and o_orderstatus = &apos;F&apos; and l1.l_receiptdate &gt; l1.l_commitdate and exists ( select * from lineitem l2 where l2.l_tenant_id = 11 and l2.l_orderkey = l1.l_orderkey and l2.l_suppkey &lt;&gt; l1.l_suppkey ) and not exists ( select * from lineitem l3 where l3.l_tenant_id = 11 and l3.l_orderkey = l1.l_orderkey and l3.l_suppkey &lt;&gt; l1.l_suppkey and l3.l_receiptdate &gt; l3.l_commitdate ) and s_nationkey = n_nationkey and n_name = &apos;MOZAMBIQUE&apos; group by s_name order by numwait desc, s_name limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T11 - Q22" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select cntrycode, count(*) as numcust, sum(c_acctbal) as totacctbal from ( select substring(c_phone from 1 for 2) as cntrycode, c_acctbal from customer where c_tenant_id = 11 and substring(c_phone from 1 for 2) in (&apos;34&apos;, &apos;20&apos;, &apos;23&apos;, &apos;33&apos;, &apos;18&apos;, &apos;10&apos;, &apos;30&apos;) and c_acctbal &gt; ( select avg(c_acctbal) from customer where c_tenant_id = 11 and c_acctbal &gt; 0.00 and substring(c_phone from 1 for 2) in (&apos;34&apos;, &apos;20&apos;, &apos;23&apos;, &apos;33&apos;, &apos;18&apos;, &apos;10&apos;, &apos;30&apos;) ) and not exists ( select * from orders where o_tenant_id = 11 and o_custkey = c_custkey ) ) as custsale group by cntrycode order by cntrycode;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T11 - RF1" enabled="false">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO region (r_regionkey, r_name, r_comment) VALUES (123476241, &apos;AFRICA&apos;, &apos;lar deposits. blithely final packages cajole. regular&apos;);
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T11 - RF2" enabled="false">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">DELETE FROM region WHERE r_regionkey = 123476241;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="T12" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <RandomOrderController guiclass="RandomOrderControllerGui" testclass="RandomOrderController" testname="Random Order Controller" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T12 - Q1" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="query">select l_returnflag, l_linestatus, sum(l_quantity) as sum_qty, sum(l_extendedprice) as sum_base_price, sum(l_extendedprice * (1 - l_discount)) as sum_disc_price, sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge, avg(l_quantity) as avg_qty, avg(l_extendedprice) as avg_price, avg(l_discount) as avg_disc, count(*) as count_order from lineitem where l_tenant_id = 12 and l_shipdate &lt;= date &apos;1998-12-01&apos; - interval &apos;61&apos; day group by l_returnflag, l_linestatus order by l_returnflag, l_linestatus;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T12 - Q2" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select s_acctbal, s_name, n_name, p_partkey, p_mfgr, s_address, s_phone, s_comment from part, supplier, partsupp, nation, region where p_tenant_id = 12 and s_tenant_id = 12 and ps_tenant_id = 12 and p_partkey = ps_partkey and s_suppkey = ps_suppkey and p_size = 14 and p_type like &apos;%BRASS&apos; and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; and ps_supplycost = ( select min(ps_supplycost) from partsupp, supplier, nation, region where ps_tenant_id = 12 and s_tenant_id = 12 and p_partkey = ps_partkey and s_suppkey = ps_suppkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; ) order by s_acctbal desc, n_name, s_name, p_partkey limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T12 - Q3" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select l_orderkey, sum(l_extendedprice * (1 - l_discount)) as revenue, o_orderdate, o_shippriority from customer, orders, lineitem where c_tenant_id = 12 and o_tenant_id = 12 and l_tenant_id = 12 and c_mktsegment = &apos;BUILDING&apos; and c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate &lt; date &apos;1995-03-06&apos; and l_shipdate &gt; date &apos;1995-03-06&apos; group by l_orderkey, o_orderdate, o_shippriority order by revenue desc, o_orderdate limit 10;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T12 - Q4" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select o_orderpriority, count(*) as order_count from orders where o_tenant_id = 12 and o_orderdate &gt;= date &apos;1993-12-01&apos; and o_orderdate &lt; date &apos;1993-12-01&apos; + interval &apos;3&apos; month and exists ( select * from lineitem where l_tenant_id = 12 and l_orderkey = o_orderkey and l_commitdate &lt; l_receiptdate ) group by o_orderpriority order by o_orderpriority;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T12 - Q5" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select n_name, sum(l_extendedprice * (1 - l_discount)) as revenue from customer, orders, lineitem, supplier, nation, region where c_tenant_id = 12 and o_tenant_id = 12 and l_tenant_id = 12 and s_tenant_id = 12 and c_custkey = o_custkey and l_orderkey = o_orderkey and l_suppkey = s_suppkey and c_nationkey = s_nationkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; and o_orderdate &gt;= date &apos;1994-01-01&apos; and o_orderdate &lt; date &apos;1994-01-01&apos; + interval &apos;1&apos; year group by n_name order by revenue desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T12 - Q6" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select sum(l_extendedprice * l_discount) as revenue from lineitem where l_tenant_id = 12 and l_shipdate &gt;= date &apos;1994-01-01&apos; and l_shipdate &lt; date &apos;1994-01-01&apos; + interval &apos;1&apos; year and l_discount between 0.09 - 0.01 and 0.09 + 0.01 and l_quantity &lt; 25;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T12 - Q7" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select supp_nation, cust_nation, l_year, sum(volume) as revenue from ( select n1.n_name as supp_nation, n2.n_name as cust_nation, extract(year from l_shipdate) as l_year, l_extendedprice * (1 - l_discount) as volume from supplier, lineitem, orders, customer, nation n1, nation n2 where s_tenant_id = 12 and l_tenant_id = 12 and o_tenant_id = 12 and c_tenant_id = 12 and s_suppkey = l_suppkey and o_orderkey = l_orderkey and c_custkey = o_custkey and s_nationkey = n1.n_nationkey and c_nationkey = n2.n_nationkey and ( (n1.n_name = &apos;RUSSIA&apos; and n2.n_name = &apos;ROMANIA&apos;) or (n1.n_name = &apos;ROMANIA&apos; and n2.n_name = &apos;RUSSIA&apos;) ) and l_shipdate between date &apos;1995-01-01&apos; and date &apos;1996-12-31&apos; ) as shipping group by supp_nation, cust_nation, l_year order by supp_nation, cust_nation, l_year;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T12 - Q8" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select o_year, sum(case when nation = &apos;ROMANIA&apos; then volume else 0 end) / sum(volume) as mkt_share from ( select extract(year from o_orderdate) as o_year, l_extendedprice * (1 - l_discount) as volume, n2.n_name as nation from part, supplier, lineitem, orders, customer, nation n1, nation n2, region where p_tenant_id = 12 and s_tenant_id =  12 and l_tenant_id = 12 and o_tenant_id = 12 and c_tenant_id = 12 and p_partkey = l_partkey and s_suppkey = l_suppkey and l_orderkey = o_orderkey and o_custkey = c_custkey and c_nationkey = n1.n_nationkey and n1.n_regionkey = r_regionkey and r_name = &apos;EUROPE&apos; and s_nationkey = n2.n_nationkey and o_orderdate between date &apos;1995-01-01&apos; and date &apos;1996-12-31&apos; and p_type = &apos;PROMO ANODIZED TIN&apos; ) as all_nations group by o_year order by o_year;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T12 - Q9" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select nation, o_year, sum(amount) as sum_profit from ( select n_name as nation, extract(year from o_orderdate) as o_year, l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity as amount from part, supplier, lineitem, partsupp, orders, nation where p_tenant_id = 12 and s_tenant_id = 12 and l_tenant_id = 12 and ps_tenant_id = 12 and o_tenant_id = 12 and s_suppkey = l_suppkey and ps_suppkey = l_suppkey and ps_partkey = l_partkey and p_partkey = l_partkey and o_orderkey = l_orderkey and s_nationkey = n_nationkey and p_name like &apos;%sienna%&apos; ) as profit group by nation, o_year order by nation, o_year desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T12 - Q10" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_custkey, c_name, sum(l_extendedprice * (1 - l_discount)) as revenue, c_acctbal, n_name, c_address, c_phone, c_comment from customer, orders, lineitem, nation where c_tenant_id = 12 and o_tenant_id = 12 and l_tenant_id = 12 and c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate &gt;= date &apos;1993-04-01&apos; and o_orderdate &lt; date &apos;1993-04-01&apos; + interval &apos;3&apos; month and l_returnflag = &apos;R&apos; and c_nationkey = n_nationkey group by c_custkey, c_name, c_acctbal, c_phone, n_name, c_address, c_comment order by revenue desc limit 20;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T12 - Q11" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select ps_partkey, sum(ps_supplycost * ps_availqty) as value from partsupp, supplier, nation where ps_tenant_id = 12 and s_tenant_id = 12 and ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = &apos;INDONESIA&apos; group by ps_partkey having sum(ps_supplycost * ps_availqty) &gt; ( select sum(ps_supplycost * ps_availqty) * 0.0000090909 from partsupp, supplier, nation where ps_tenant_id = 12 and s_tenant_id = 12 and ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = &apos;INDONESIA&apos; ) order by value desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T12 - Q12" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select l_shipmode, sum(case when o_orderpriority = &apos;1-URGENT&apos; or o_orderpriority = &apos;2-HIGH&apos; then 1 else 0 end) as high_line_count, sum(case when o_orderpriority &lt;&gt; &apos;1-URGENT&apos; and o_orderpriority &lt;&gt; &apos;2-HIGH&apos; then 1 else 0 end) as low_line_count from orders, lineitem where o_tenant_id = 12 and l_tenant_id = 12 and o_orderkey = l_orderkey and l_shipmode in (&apos;RAIL&apos;, &apos;TRUCK&apos;) and l_commitdate &lt; l_receiptdate and l_shipdate &lt; l_commitdate and l_receiptdate &gt;= date &apos;1995-01-01&apos; and l_receiptdate &lt; date &apos;1995-01-01&apos; + interval &apos;1&apos; year group by l_shipmode order by l_shipmode;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T12 - Q13" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_count, count(*) as custdist from ( select c_custkey, count(o_orderkey) from customer left outer join orders on c_custkey = o_custkey and o_comment not like &apos;%pending%accounts%&apos; where c_tenant_id = 12 group by c_custkey ) as c_orders (c_custkey, c_count) group by c_count order by custdist desc, c_count desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T12 - Q14" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select 100.00 * sum(case when p_type like &apos;PROMO%&apos; then l_extendedprice * (1 - l_discount) else 0 end) / sum(l_extendedprice * (1 - l_discount)) as promo_revenue from lineitem, part where l_tenant_id = 12 and p_tenant_id = 12 and l_partkey = p_partkey and l_shipdate &gt;= date &apos;1995-12-01&apos; and l_shipdate &lt; date &apos;1995-12-01&apos; + interval &apos;1&apos; month;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T12 - Q15" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Callable Statement</stringProp>
            <stringProp name="query">create view revenue0 (supplier_no, total_revenue) as select l_suppkey, sum(l_extendedprice * (1 - l_discount)) from lineitem where l_tenant_id = 12 and l_shipdate &gt;= date &apos;1995-02-01&apos; and l_shipdate &lt; date &apos;1995-02-01&apos; + interval &apos;3&apos; month group by l_suppkey; select s_suppkey, s_name, s_address, s_phone, total_revenue from supplier, revenue0 where s_tenant_id = 12 and s_suppkey = supplier_no and total_revenue = ( select max(total_revenue) from revenue0 ) order by s_suppkey; drop view revenue0;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T12 - Q16" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select p_brand, p_type, p_size, count(distinct ps_suppkey) as supplier_cnt from partsupp, part where ps_tenant_id = 12 and p_tenant_id = 12 and p_partkey = ps_partkey and p_brand &lt;&gt; &apos;Brand#52&apos; and p_type not like &apos;LARGE BRUSHED%&apos; and p_size in (20, 35, 34, 50, 23, 28, 48, 17) and ps_suppkey not in ( select s_suppkey from supplier where s_tenant_id = 12 and s_comment like &apos;%Customer%Complaints%&apos; ) group by p_brand, p_type, p_size order by supplier_cnt desc, p_brand, p_type, p_size;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T12 - Q18" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice, sum(l_quantity) from customer, orders, lineitem where c_tenant_id = 12 and o_tenant_id = 12 and l_tenant_id = 12 and o_orderkey in ( select l_orderkey from lineitem where l_tenant_id = 12 group by l_orderkey having sum(l_quantity) &gt; 314 ) and c_custkey = o_custkey and o_orderkey = l_orderkey group by c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice order by o_totalprice desc, o_orderdate limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T12 - Q19" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select sum(l_extendedprice* (1 - l_discount)) as revenue from lineitem, part where l_tenant_id = 12 and p_tenant_id = 12 and (( p_partkey = l_partkey and p_brand = &apos;Brand#24&apos; and p_container in (&apos;SM CasE&apos;, &apos;SM BOX&apos;, &apos;SM PACK&apos;, &apos;SM PKG&apos;) and l_quantity &gt;= 10 and l_quantity &lt;= 10 + 10 and p_size between 1 and 5 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ) or ( p_partkey = l_partkey and p_brand = &apos;Brand#45&apos; and p_container in (&apos;MED BAG&apos;, &apos;MED BOX&apos;, &apos;MED PKG&apos;, &apos;MED PACK&apos;) and l_quantity &gt;= 12 and l_quantity &lt;= 12 + 10 and p_size between 1 and 10 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ) or ( p_partkey = l_partkey and p_brand = &apos;Brand#33&apos; and p_container in (&apos;LG CasE&apos;, &apos;LG BOX&apos;, &apos;LG PACK&apos;, &apos;LG PKG&apos;) and l_quantity &gt;= 30 and l_quantity &lt;= 30 + 10 and p_size between 1 and 15 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos;));
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T12 - Q21" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select s_name, count(*) as numwait from supplier, lineitem l1, orders, nation where s_tenant_id = 12 and l1.l_tenant_id = 12 and o_tenant_id = 12 and s_suppkey = l1.l_suppkey and o_orderkey = l1.l_orderkey and o_orderstatus = &apos;F&apos; and l1.l_receiptdate &gt; l1.l_commitdate and exists ( select * from lineitem l2 where l2.l_tenant_id = 12 and l2.l_orderkey = l1.l_orderkey and l2.l_suppkey &lt;&gt; l1.l_suppkey ) and not exists ( select * from lineitem l3 where l3.l_tenant_id = 12 and l3.l_orderkey = l1.l_orderkey and l3.l_suppkey &lt;&gt; l1.l_suppkey and l3.l_receiptdate &gt; l3.l_commitdate ) and s_nationkey = n_nationkey and n_name = &apos;MOZAMBIQUE&apos; group by s_name order by numwait desc, s_name limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T12 - Q22" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select cntrycode, count(*) as numcust, sum(c_acctbal) as totacctbal from ( select substring(c_phone from 1 for 2) as cntrycode, c_acctbal from customer where c_tenant_id = 12 and substring(c_phone from 1 for 2) in (&apos;34&apos;, &apos;20&apos;, &apos;23&apos;, &apos;33&apos;, &apos;18&apos;, &apos;10&apos;, &apos;30&apos;) and c_acctbal &gt; ( select avg(c_acctbal) from customer where c_tenant_id = 12 and c_acctbal &gt; 0.00 and substring(c_phone from 1 for 2) in (&apos;34&apos;, &apos;20&apos;, &apos;23&apos;, &apos;33&apos;, &apos;18&apos;, &apos;10&apos;, &apos;30&apos;) ) and not exists ( select * from orders where o_tenant_id = 12 and o_custkey = c_custkey ) ) as custsale group by cntrycode order by cntrycode;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T12 - RF1" enabled="false">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO region (r_regionkey, r_name, r_comment) VALUES (123476241, &apos;AFRICA&apos;, &apos;lar deposits. blithely final packages cajole. regular&apos;);
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T12 - RF2" enabled="false">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">DELETE FROM region WHERE r_regionkey = 123476241;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="T13" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <RandomOrderController guiclass="RandomOrderControllerGui" testclass="RandomOrderController" testname="Random Order Controller" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T13 - Q1" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="query">select l_returnflag, l_linestatus, sum(l_quantity) as sum_qty, sum(l_extendedprice) as sum_base_price, sum(l_extendedprice * (1 - l_discount)) as sum_disc_price, sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge, avg(l_quantity) as avg_qty, avg(l_extendedprice) as avg_price, avg(l_discount) as avg_disc, count(*) as count_order from lineitem where l_tenant_id = 13 and l_shipdate &lt;= date &apos;1998-12-01&apos; - interval &apos;61&apos; day group by l_returnflag, l_linestatus order by l_returnflag, l_linestatus;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T13 - Q2" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select s_acctbal, s_name, n_name, p_partkey, p_mfgr, s_address, s_phone, s_comment from part, supplier, partsupp, nation, region where p_tenant_id = 13 and s_tenant_id = 13 and ps_tenant_id = 13 and p_partkey = ps_partkey and s_suppkey = ps_suppkey and p_size = 14 and p_type like &apos;%BRASS&apos; and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; and ps_supplycost = ( select min(ps_supplycost) from partsupp, supplier, nation, region where ps_tenant_id = 13 and s_tenant_id = 13 and p_partkey = ps_partkey and s_suppkey = ps_suppkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; ) order by s_acctbal desc, n_name, s_name, p_partkey limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T13 - Q3" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select l_orderkey, sum(l_extendedprice * (1 - l_discount)) as revenue, o_orderdate, o_shippriority from customer, orders, lineitem where c_tenant_id = 13 and o_tenant_id = 13 and l_tenant_id = 13 and c_mktsegment = &apos;BUILDING&apos; and c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate &lt; date &apos;1995-03-06&apos; and l_shipdate &gt; date &apos;1995-03-06&apos; group by l_orderkey, o_orderdate, o_shippriority order by revenue desc, o_orderdate limit 10;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T13 - Q4" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select o_orderpriority, count(*) as order_count from orders where o_tenant_id = 13 and o_orderdate &gt;= date &apos;1993-12-01&apos; and o_orderdate &lt; date &apos;1993-12-01&apos; + interval &apos;3&apos; month and exists ( select * from lineitem where l_tenant_id = 13 and l_orderkey = o_orderkey and l_commitdate &lt; l_receiptdate ) group by o_orderpriority order by o_orderpriority;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T13 - Q5" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select n_name, sum(l_extendedprice * (1 - l_discount)) as revenue from customer, orders, lineitem, supplier, nation, region where c_tenant_id = 13 and o_tenant_id = 13 and l_tenant_id = 13 and s_tenant_id = 13 and c_custkey = o_custkey and l_orderkey = o_orderkey and l_suppkey = s_suppkey and c_nationkey = s_nationkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; and o_orderdate &gt;= date &apos;1994-01-01&apos; and o_orderdate &lt; date &apos;1994-01-01&apos; + interval &apos;1&apos; year group by n_name order by revenue desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T13 - Q6" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select sum(l_extendedprice * l_discount) as revenue from lineitem where l_tenant_id = 13 and l_shipdate &gt;= date &apos;1994-01-01&apos; and l_shipdate &lt; date &apos;1994-01-01&apos; + interval &apos;1&apos; year and l_discount between 0.09 - 0.01 and 0.09 + 0.01 and l_quantity &lt; 25;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T13 - Q7" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select supp_nation, cust_nation, l_year, sum(volume) as revenue from ( select n1.n_name as supp_nation, n2.n_name as cust_nation, extract(year from l_shipdate) as l_year, l_extendedprice * (1 - l_discount) as volume from supplier, lineitem, orders, customer, nation n1, nation n2 where s_tenant_id = 13 and l_tenant_id = 13 and o_tenant_id = 13 and c_tenant_id = 13 and s_suppkey = l_suppkey and o_orderkey = l_orderkey and c_custkey = o_custkey and s_nationkey = n1.n_nationkey and c_nationkey = n2.n_nationkey and ( (n1.n_name = &apos;RUSSIA&apos; and n2.n_name = &apos;ROMANIA&apos;) or (n1.n_name = &apos;ROMANIA&apos; and n2.n_name = &apos;RUSSIA&apos;) ) and l_shipdate between date &apos;1995-01-01&apos; and date &apos;1996-12-31&apos; ) as shipping group by supp_nation, cust_nation, l_year order by supp_nation, cust_nation, l_year;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T13 - Q8" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select o_year, sum(case when nation = &apos;ROMANIA&apos; then volume else 0 end) / sum(volume) as mkt_share from ( select extract(year from o_orderdate) as o_year, l_extendedprice * (1 - l_discount) as volume, n2.n_name as nation from part, supplier, lineitem, orders, customer, nation n1, nation n2, region where p_tenant_id = 13 and s_tenant_id =  13 and l_tenant_id = 13 and o_tenant_id = 13 and c_tenant_id = 13 and p_partkey = l_partkey and s_suppkey = l_suppkey and l_orderkey = o_orderkey and o_custkey = c_custkey and c_nationkey = n1.n_nationkey and n1.n_regionkey = r_regionkey and r_name = &apos;EUROPE&apos; and s_nationkey = n2.n_nationkey and o_orderdate between date &apos;1995-01-01&apos; and date &apos;1996-12-31&apos; and p_type = &apos;PROMO ANODIZED TIN&apos; ) as all_nations group by o_year order by o_year;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T13 - Q9" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select nation, o_year, sum(amount) as sum_profit from ( select n_name as nation, extract(year from o_orderdate) as o_year, l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity as amount from part, supplier, lineitem, partsupp, orders, nation where p_tenant_id = 13 and s_tenant_id = 13 and l_tenant_id = 13 and ps_tenant_id = 13 and o_tenant_id = 13 and s_suppkey = l_suppkey and ps_suppkey = l_suppkey and ps_partkey = l_partkey and p_partkey = l_partkey and o_orderkey = l_orderkey and s_nationkey = n_nationkey and p_name like &apos;%sienna%&apos; ) as profit group by nation, o_year order by nation, o_year desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T13 - Q10" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_custkey, c_name, sum(l_extendedprice * (1 - l_discount)) as revenue, c_acctbal, n_name, c_address, c_phone, c_comment from customer, orders, lineitem, nation where c_tenant_id = 13 and o_tenant_id = 13 and l_tenant_id = 13 and c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate &gt;= date &apos;1993-04-01&apos; and o_orderdate &lt; date &apos;1993-04-01&apos; + interval &apos;3&apos; month and l_returnflag = &apos;R&apos; and c_nationkey = n_nationkey group by c_custkey, c_name, c_acctbal, c_phone, n_name, c_address, c_comment order by revenue desc limit 20;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T13 - Q11" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select ps_partkey, sum(ps_supplycost * ps_availqty) as value from partsupp, supplier, nation where ps_tenant_id = 13 and s_tenant_id = 13 and ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = &apos;INDONESIA&apos; group by ps_partkey having sum(ps_supplycost * ps_availqty) &gt; ( select sum(ps_supplycost * ps_availqty) * 0.0000090909 from partsupp, supplier, nation where ps_tenant_id = 13 and s_tenant_id = 13 and ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = &apos;INDONESIA&apos; ) order by value desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T13 - Q12" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select l_shipmode, sum(case when o_orderpriority = &apos;1-URGENT&apos; or o_orderpriority = &apos;2-HIGH&apos; then 1 else 0 end) as high_line_count, sum(case when o_orderpriority &lt;&gt; &apos;1-URGENT&apos; and o_orderpriority &lt;&gt; &apos;2-HIGH&apos; then 1 else 0 end) as low_line_count from orders, lineitem where o_tenant_id = 13 and l_tenant_id = 13 and o_orderkey = l_orderkey and l_shipmode in (&apos;RAIL&apos;, &apos;TRUCK&apos;) and l_commitdate &lt; l_receiptdate and l_shipdate &lt; l_commitdate and l_receiptdate &gt;= date &apos;1995-01-01&apos; and l_receiptdate &lt; date &apos;1995-01-01&apos; + interval &apos;1&apos; year group by l_shipmode order by l_shipmode;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T13 - Q13" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_count, count(*) as custdist from ( select c_custkey, count(o_orderkey) from customer left outer join orders on c_custkey = o_custkey and o_comment not like &apos;%pending%accounts%&apos; where c_tenant_id = 13 group by c_custkey ) as c_orders (c_custkey, c_count) group by c_count order by custdist desc, c_count desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T13 - Q14" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select 100.00 * sum(case when p_type like &apos;PROMO%&apos; then l_extendedprice * (1 - l_discount) else 0 end) / sum(l_extendedprice * (1 - l_discount)) as promo_revenue from lineitem, part where l_tenant_id = 13 and p_tenant_id = 13 and l_partkey = p_partkey and l_shipdate &gt;= date &apos;1995-12-01&apos; and l_shipdate &lt; date &apos;1995-12-01&apos; + interval &apos;1&apos; month;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T13 - Q15" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Callable Statement</stringProp>
            <stringProp name="query">create view revenue0 (supplier_no, total_revenue) as select l_suppkey, sum(l_extendedprice * (1 - l_discount)) from lineitem where l_tenant_id = 13 and l_shipdate &gt;= date &apos;1997-08-01&apos; and l_shipdate &lt; date &apos;1997-08-01&apos; + interval &apos;3&apos; month group by l_suppkey; select s_suppkey, s_name, s_address, s_phone, total_revenue from supplier, revenue0 where s_tenant_id = 13 and s_suppkey = supplier_no and total_revenue = ( select max(total_revenue) from revenue0 ) order by s_suppkey; drop view revenue0;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T13 - Q16" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select p_brand, p_type, p_size, count(distinct ps_suppkey) as supplier_cnt from partsupp, part where ps_tenant_id = 13 and p_tenant_id = 13 and p_partkey = ps_partkey and p_brand &lt;&gt; &apos;Brand#52&apos; and p_type not like &apos;LARGE BRUSHED%&apos; and p_size in (20, 35, 34, 50, 23, 28, 48, 17) and ps_suppkey not in ( select s_suppkey from supplier where s_tenant_id = 13 and s_comment like &apos;%Customer%Complaints%&apos; ) group by p_brand, p_type, p_size order by supplier_cnt desc, p_brand, p_type, p_size;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T13 - Q18" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice, sum(l_quantity) from customer, orders, lineitem where c_tenant_id = 13 and o_tenant_id = 13 and l_tenant_id = 13 and o_orderkey in ( select l_orderkey from lineitem where l_tenant_id = 13 group by l_orderkey having sum(l_quantity) &gt; 314 ) and c_custkey = o_custkey and o_orderkey = l_orderkey group by c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice order by o_totalprice desc, o_orderdate limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T13 - Q19" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select sum(l_extendedprice* (1 - l_discount)) as revenue from lineitem, part where l_tenant_id = 13 and p_tenant_id = 13 and (( p_partkey = l_partkey and p_brand = &apos;Brand#24&apos; and p_container in (&apos;SM CasE&apos;, &apos;SM BOX&apos;, &apos;SM PACK&apos;, &apos;SM PKG&apos;) and l_quantity &gt;= 10 and l_quantity &lt;= 10 + 10 and p_size between 1 and 5 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ) or ( p_partkey = l_partkey and p_brand = &apos;Brand#45&apos; and p_container in (&apos;MED BAG&apos;, &apos;MED BOX&apos;, &apos;MED PKG&apos;, &apos;MED PACK&apos;) and l_quantity &gt;= 12 and l_quantity &lt;= 12 + 10 and p_size between 1 and 10 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ) or ( p_partkey = l_partkey and p_brand = &apos;Brand#33&apos; and p_container in (&apos;LG CasE&apos;, &apos;LG BOX&apos;, &apos;LG PACK&apos;, &apos;LG PKG&apos;) and l_quantity &gt;= 30 and l_quantity &lt;= 30 + 10 and p_size between 1 and 15 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos;));
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T13 - Q21" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select s_name, count(*) as numwait from supplier, lineitem l1, orders, nation where s_tenant_id = 13 and l1.l_tenant_id = 13 and o_tenant_id = 13 and s_suppkey = l1.l_suppkey and o_orderkey = l1.l_orderkey and o_orderstatus = &apos;F&apos; and l1.l_receiptdate &gt; l1.l_commitdate and exists ( select * from lineitem l2 where l2.l_tenant_id = 13 and l2.l_orderkey = l1.l_orderkey and l2.l_suppkey &lt;&gt; l1.l_suppkey ) and not exists ( select * from lineitem l3 where l3.l_tenant_id = 13 and l3.l_orderkey = l1.l_orderkey and l3.l_suppkey &lt;&gt; l1.l_suppkey and l3.l_receiptdate &gt; l3.l_commitdate ) and s_nationkey = n_nationkey and n_name = &apos;MOZAMBIQUE&apos; group by s_name order by numwait desc, s_name limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T13 - Q22" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select cntrycode, count(*) as numcust, sum(c_acctbal) as totacctbal from ( select substring(c_phone from 1 for 2) as cntrycode, c_acctbal from customer where c_tenant_id = 13 and substring(c_phone from 1 for 2) in (&apos;34&apos;, &apos;20&apos;, &apos;23&apos;, &apos;33&apos;, &apos;18&apos;, &apos;10&apos;, &apos;30&apos;) and c_acctbal &gt; ( select avg(c_acctbal) from customer where c_tenant_id = 13 and c_acctbal &gt; 0.00 and substring(c_phone from 1 for 2) in (&apos;34&apos;, &apos;20&apos;, &apos;23&apos;, &apos;33&apos;, &apos;18&apos;, &apos;10&apos;, &apos;30&apos;) ) and not exists ( select * from orders where o_tenant_id = 13 and o_custkey = c_custkey ) ) as custsale group by cntrycode order by cntrycode;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T13 - RF1" enabled="false">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO region (r_regionkey, r_name, r_comment) VALUES (123476241, &apos;AFRICA&apos;, &apos;lar deposits. blithely final packages cajole. regular&apos;);
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T13 - RF2" enabled="false">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">DELETE FROM region WHERE r_regionkey = 123476241;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="T14" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <RandomOrderController guiclass="RandomOrderControllerGui" testclass="RandomOrderController" testname="Random Order Controller" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T14 - Q1" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="query">select l_returnflag, l_linestatus, sum(l_quantity) as sum_qty, sum(l_extendedprice) as sum_base_price, sum(l_extendedprice * (1 - l_discount)) as sum_disc_price, sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge, avg(l_quantity) as avg_qty, avg(l_extendedprice) as avg_price, avg(l_discount) as avg_disc, count(*) as count_order from lineitem where l_tenant_id = 14 and l_shipdate &lt;= date &apos;1998-12-01&apos; - interval &apos;64&apos; day group by l_returnflag, l_linestatus order by l_returnflag, l_linestatus;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T14 - Q2" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select s_acctbal, s_name, n_name, p_partkey, p_mfgr, s_address, s_phone, s_comment from part, supplier, partsupp, nation, region where p_tenant_id = 14 and s_tenant_id = 14 and ps_tenant_id = 14 and p_partkey = ps_partkey and s_suppkey = ps_suppkey and p_size = 17 and p_type like &apos;%BRASS&apos; and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;ASIA&apos; and ps_supplycost = ( select min(ps_supplycost) from partsupp, supplier, nation, region where ps_tenant_id = 14 and s_tenant_id = 14 and p_partkey = ps_partkey and s_suppkey = ps_suppkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;ASIA&apos; ) order by s_acctbal desc, n_name, s_name, p_partkey limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T14 - Q3" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select l_orderkey, sum(l_extendedprice * (1 - l_discount)) as revenue, o_orderdate, o_shippriority from customer, orders, lineitem where c_tenant_id = 14 and o_tenant_id = 14 and l_tenant_id = 14 and c_mktsegment = &apos;AUTOMOBILE&apos; and c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate &lt; date &apos;1995-03-15&apos; and l_shipdate &gt; date &apos;1995-03-15&apos; group by l_orderkey, o_orderdate, o_shippriority order by revenue desc, o_orderdate limit 10;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T14 - Q4" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select o_orderpriority, count(*) as order_count from orders where o_tenant_id = 14 and o_orderdate &gt;= date &apos;1995-03-01&apos; and o_orderdate &lt; date &apos;1995-03-01&apos; + interval &apos;3&apos; month and exists ( select * from lineitem where l_tenant_id = 14 and l_orderkey = o_orderkey and l_commitdate &lt; l_receiptdate ) group by o_orderpriority order by o_orderpriority;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T14 - Q5" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select n_name, sum(l_extendedprice * (1 - l_discount)) as revenue from customer, orders, lineitem, supplier, nation, region where c_tenant_id = 14 and o_tenant_id = 14 and l_tenant_id = 14 and s_tenant_id = 14 and c_custkey = o_custkey and l_orderkey = o_orderkey and l_suppkey = s_suppkey and c_nationkey = s_nationkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;EUROPE&apos; and o_orderdate &gt;= date &apos;1996-01-01&apos; and o_orderdate &lt; date &apos;1996-01-01&apos; + interval &apos;1&apos; year group by n_name order by revenue desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T14 - Q6" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select sum(l_extendedprice * l_discount) as revenue from lineitem where l_tenant_id = 14 and l_shipdate &gt;= date &apos;1996-01-01&apos; and l_shipdate &lt; date &apos;1996-01-01&apos; + interval &apos;1&apos; year and l_discount between 0.07 - 0.01 and 0.07 + 0.01 and l_quantity &lt; 25;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T14 - Q7" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select supp_nation, cust_nation, l_year, sum(volume) as revenue from ( select n1.n_name as supp_nation, n2.n_name as cust_nation, extract(year from l_shipdate) as l_year, l_extendedprice * (1 - l_discount) as volume from supplier, lineitem, orders, customer, nation n1, nation n2 where s_tenant_id = 14 and l_tenant_id = 14 and o_tenant_id = 14 and c_tenant_id = 14 and s_suppkey = l_suppkey and o_orderkey = l_orderkey and c_custkey = o_custkey and s_nationkey = n1.n_nationkey and c_nationkey = n2.n_nationkey and ( (n1.n_name = &apos;MOZAMBIQUE&apos; and n2.n_name = &apos;JORDAN&apos;) or (n1.n_name = &apos;JORDAN&apos; and n2.n_name = &apos;MOZAMBIQUE&apos;) ) and l_shipdate between date &apos;1995-01-01&apos; and date &apos;1996-12-31&apos; ) as shipping group by supp_nation, cust_nation, l_year order by supp_nation, cust_nation, l_year;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T14 - Q8" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select o_year, sum(case when nation = &apos;ETHIOPIA&apos; then volume else 0 end) / sum(volume) as mkt_share from ( select extract(year from o_orderdate) as o_year, l_extendedprice * (1 - l_discount) as volume, n2.n_name as nation from part, supplier, lineitem, orders, customer, nation n1, nation n2, region where p_tenant_id = 14 and s_tenant_id =  14 and l_tenant_id = 14 and o_tenant_id = 14 and c_tenant_id = 14 and p_partkey = l_partkey and s_suppkey = l_suppkey and l_orderkey = o_orderkey and o_custkey = c_custkey and c_nationkey = n1.n_nationkey and n1.n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; and s_nationkey = n2.n_nationkey and o_orderdate between date &apos;1995-01-01&apos; and date &apos;1996-12-31&apos; and p_type = &apos;SMALL BRUSHED BRASS&apos; ) as all_nations group by o_year order by o_year;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T14 - Q9" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select nation, o_year, sum(amount) as sum_profit from ( select n_name as nation, extract(year from o_orderdate) as o_year, l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity as amount from part, supplier, lineitem, partsupp, orders, nation where p_tenant_id = 14 and s_tenant_id = 14 and l_tenant_id = 14 and ps_tenant_id = 14 and o_tenant_id = 14 and s_suppkey = l_suppkey and ps_suppkey = l_suppkey and ps_partkey = l_partkey and p_partkey = l_partkey and o_orderkey = l_orderkey and s_nationkey = n_nationkey and p_name like &apos;%frosted%&apos; ) as profit group by nation, o_year order by nation, o_year desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T14 - Q10" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_custkey, c_name, sum(l_extendedprice * (1 - l_discount)) as revenue, c_acctbal, n_name, c_address, c_phone, c_comment from customer, orders, lineitem, nation where c_tenant_id = 14 and o_tenant_id = 14 and l_tenant_id = 14 and c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate &gt;= date &apos;1993-06-01&apos; and o_orderdate &lt; date &apos;1993-06-01&apos; + interval &apos;3&apos; month and l_returnflag = &apos;R&apos; and c_nationkey = n_nationkey group by c_custkey, c_name, c_acctbal, c_phone, n_name, c_address, c_comment order by revenue desc limit 20;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T14 - Q11" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select ps_partkey, sum(ps_supplycost * ps_availqty) as value from partsupp, supplier, nation where ps_tenant_id = 14 and s_tenant_id = 14 and ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = &apos;JORDAN&apos; group by ps_partkey having sum(ps_supplycost * ps_availqty) &gt; ( select sum(ps_supplycost * ps_availqty) * 0.0000004329 from partsupp, supplier, nation where ps_tenant_id = 14 and s_tenant_id = 14 and ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = &apos;JORDAN&apos; ) order by value desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T14 - Q12" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select l_shipmode, sum(case when o_orderpriority = &apos;1-URGENT&apos; or o_orderpriority = &apos;2-HIGH&apos; then 1 else 0 end) as high_line_count, sum(case when o_orderpriority &lt;&gt; &apos;1-URGENT&apos; and o_orderpriority &lt;&gt; &apos;2-HIGH&apos; then 1 else 0 end) as low_line_count from orders, lineitem where o_tenant_id = 14 and l_tenant_id = 14 and o_orderkey = l_orderkey and l_shipmode in (&apos;REG AIR&apos;, &apos;FOB&apos;) and l_commitdate &lt; l_receiptdate and l_shipdate &lt; l_commitdate and l_receiptdate &gt;= date &apos;1993-01-01&apos; and l_receiptdate &lt; date &apos;1993-01-01&apos; + interval &apos;1&apos; year group by l_shipmode order by l_shipmode;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T14 - Q13" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_count, count(*) as custdist from ( select c_custkey, count(o_orderkey) from customer left outer join orders on c_custkey = o_custkey and o_comment not like &apos;%unusual%packages%&apos; where c_tenant_id = 14 group by c_custkey ) as c_orders (c_custkey, c_count) group by c_count order by custdist desc, c_count desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T14 - Q14" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select 100.00 * sum(case when p_type like &apos;PROMO%&apos; then l_extendedprice * (1 - l_discount) else 0 end) / sum(l_extendedprice * (1 - l_discount)) as promo_revenue from lineitem, part where l_tenant_id = 14 and p_tenant_id = 14 and l_partkey = p_partkey and l_shipdate &gt;= date &apos;1993-02-01&apos; and l_shipdate &lt; date &apos;1993-02-01&apos; + interval &apos;1&apos; month;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T14 - Q15" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Callable Statement</stringProp>
            <stringProp name="query">create view revenue0 (supplier_no, total_revenue) as select l_suppkey, sum(l_extendedprice * (1 - l_discount)) from lineitem where l_tenant_id = 14 and l_shipdate &gt;= date &apos;1995-05-01&apos; and l_shipdate &lt; date &apos;1995-05-01&apos; + interval &apos;3&apos; month group by l_suppkey; select s_suppkey, s_name, s_address, s_phone, total_revenue from supplier, revenue0 where s_tenant_id = 14 and s_suppkey = supplier_no and total_revenue = ( select max(total_revenue) from revenue0 ) order by s_suppkey; drop view revenue0;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T14 - Q16" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select p_brand, p_type, p_size, count(distinct ps_suppkey) as supplier_cnt from partsupp, part where ps_tenant_id = 14 and p_tenant_id = 14 and p_partkey = ps_partkey and p_brand &lt;&gt; &apos;Brand#22&apos; and p_type not like &apos;ECONOMY BURNISHED%&apos; and p_size in (47, 3, 10, 37, 44, 17, 14, 49) and ps_suppkey not in ( select s_suppkey from supplier where s_tenant_id = 14 and s_comment like &apos;%Customer%Complaints%&apos; ) group by p_brand, p_type, p_size order by supplier_cnt desc, p_brand, p_type, p_size;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T14 - Q18" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice, sum(l_quantity) from customer, orders, lineitem where c_tenant_id = 14 and o_tenant_id = 14 and l_tenant_id = 14 and o_orderkey in ( select l_orderkey from lineitem where l_tenant_id = 14 group by l_orderkey having sum(l_quantity) &gt; 314 ) and c_custkey = o_custkey and o_orderkey = l_orderkey group by c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice order by o_totalprice desc, o_orderdate limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T14 - Q19" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select sum(l_extendedprice* (1 - l_discount)) as revenue from lineitem, part where l_tenant_id = 14 and p_tenant_id = 14 and (( p_partkey = l_partkey and p_brand = &apos;Brand#51&apos; and p_container in (&apos;SM CasE&apos;, &apos;SM BOX&apos;, &apos;SM PACK&apos;, &apos;SM PKG&apos;) and l_quantity &gt;= 2 and l_quantity &lt;= 2 + 10 and p_size between 1 and 5 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ) or ( p_partkey = l_partkey and p_brand = &apos;Brand#14&apos; and p_container in (&apos;MED BAG&apos;, &apos;MED BOX&apos;, &apos;MED PKG&apos;, &apos;MED PACK&apos;) and l_quantity &gt;= 20 and l_quantity &lt;= 20 + 10 and p_size between 1 and 10 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ) or ( p_partkey = l_partkey and p_brand = &apos;Brand#52&apos; and p_container in (&apos;LG CasE&apos;, &apos;LG BOX&apos;, &apos;LG PACK&apos;, &apos;LG PKG&apos;) and l_quantity &gt;= 22 and l_quantity &lt;= 22 + 10 and p_size between 1 and 15 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos;));
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T14 - Q21" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select s_name, count(*) as numwait from supplier, lineitem l1, orders, nation where s_tenant_id = 14 and l1.l_tenant_id = 14 and o_tenant_id = 14 and s_suppkey = l1.l_suppkey and o_orderkey = l1.l_orderkey and o_orderstatus = &apos;F&apos; and l1.l_receiptdate &gt; l1.l_commitdate and exists ( select * from lineitem l2 where l2.l_tenant_id = 14 and l2.l_orderkey = l1.l_orderkey and l2.l_suppkey &lt;&gt; l1.l_suppkey ) and not exists ( select * from lineitem l3 where l3.l_tenant_id = 14 and l3.l_orderkey = l1.l_orderkey and l3.l_suppkey &lt;&gt; l1.l_suppkey and l3.l_receiptdate &gt; l3.l_commitdate ) and s_nationkey = n_nationkey and n_name = &apos;CANADA&apos; group by s_name order by numwait desc, s_name limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T14 - Q22" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select cntrycode, count(*) as numcust, sum(c_acctbal) as totacctbal from ( select substring(c_phone from 1 for 2) as cntrycode, c_acctbal from customer where c_tenant_id = 14 and substring(c_phone from 1 for 2) in (&apos;27&apos;, &apos;31&apos;, &apos;18&apos;, &apos;16&apos;, &apos;34&apos;, &apos;19&apos;, &apos;12&apos;) and c_acctbal &gt; ( select avg(c_acctbal) from customer where c_tenant_id = 14 and c_acctbal &gt; 0.00 and substring(c_phone from 1 for 2) in (&apos;27&apos;, &apos;31&apos;, &apos;18&apos;, &apos;16&apos;, &apos;34&apos;, &apos;19&apos;, &apos;12&apos;) ) and not exists ( select * from orders where o_tenant_id = 14 and o_custkey = c_custkey ) ) as custsale group by cntrycode order by cntrycode;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T14 - RF1" enabled="false">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO region (r_regionkey, r_name, r_comment) VALUES (123476241, &apos;AFRICA&apos;, &apos;lar deposits. blithely final packages cajole. regular&apos;);
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T14 - RF2" enabled="false">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">DELETE FROM region WHERE r_regionkey = 123476241;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="T15" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <RandomOrderController guiclass="RandomOrderControllerGui" testclass="RandomOrderController" testname="Random Order Controller" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T15 - Q1" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="query">select l_returnflag, l_linestatus, sum(l_quantity) as sum_qty, sum(l_extendedprice) as sum_base_price, sum(l_extendedprice * (1 - l_discount)) as sum_disc_price, sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge, avg(l_quantity) as avg_qty, avg(l_extendedprice) as avg_price, avg(l_discount) as avg_disc, count(*) as count_order from lineitem where l_tenant_id = 15 and l_shipdate &lt;= date &apos;1998-12-01&apos; - interval &apos;93&apos; day group by l_returnflag, l_linestatus order by l_returnflag, l_linestatus;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T15 - Q2" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select s_acctbal, s_name, n_name, p_partkey, p_mfgr, s_address, s_phone, s_comment from part, supplier, partsupp, nation, region where p_tenant_id = 15 and s_tenant_id = 15 and ps_tenant_id = 15 and p_partkey = ps_partkey and s_suppkey = ps_suppkey and p_size = 16 and p_type like &apos;%BRASS&apos; and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AMERICA&apos; and ps_supplycost = ( select min(ps_supplycost) from partsupp, supplier, nation, region where ps_tenant_id = 15 and s_tenant_id = 15 and p_partkey = ps_partkey and s_suppkey = ps_suppkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AMERICA&apos; ) order by s_acctbal desc, n_name, s_name, p_partkey limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T15 - Q3" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select l_orderkey, sum(l_extendedprice * (1 - l_discount)) as revenue, o_orderdate, o_shippriority from customer, orders, lineitem where c_tenant_id = 15 and o_tenant_id = 15 and l_tenant_id = 15 and c_mktsegment = &apos;HOUSEHOLD&apos; and c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate &lt; date &apos;1995-03-27&apos; and l_shipdate &gt; date &apos;1995-03-27&apos; group by l_orderkey, o_orderdate, o_shippriority order by revenue desc, o_orderdate limit 10;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T15 - Q4" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select o_orderpriority, count(*) as order_count from orders where o_tenant_id = 15 and o_orderdate &gt;= date &apos;1997-02-01&apos; and o_orderdate &lt; date &apos;1997-02-01&apos; + interval &apos;3&apos; month and exists ( select * from lineitem where l_tenant_id = 15 and l_orderkey = o_orderkey and l_commitdate &lt; l_receiptdate ) group by o_orderpriority order by o_orderpriority;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T15 - Q5" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select n_name, sum(l_extendedprice * (1 - l_discount)) as revenue from customer, orders, lineitem, supplier, nation, region where c_tenant_id = 15 and o_tenant_id = 15 and l_tenant_id = 15 and s_tenant_id = 15 and c_custkey = o_custkey and l_orderkey = o_orderkey and l_suppkey = s_suppkey and c_nationkey = s_nationkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;MIDDLE EAST&apos; and o_orderdate &gt;= date &apos;1995-01-01&apos; and o_orderdate &lt; date &apos;1995-01-01&apos; + interval &apos;1&apos; year group by n_name order by revenue desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T15 - Q6" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select sum(l_extendedprice * l_discount) as revenue from lineitem where l_tenant_id = 15 and l_shipdate &gt;= date &apos;1995-01-01&apos; and l_shipdate &lt; date &apos;1995-01-01&apos; + interval &apos;1&apos; year and l_discount between 0.07 - 0.01 and 0.07 + 0.01 and l_quantity &lt; 25;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T15 - Q7" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select supp_nation, cust_nation, l_year, sum(volume) as revenue from ( select n1.n_name as supp_nation, n2.n_name as cust_nation, extract(year from l_shipdate) as l_year, l_extendedprice * (1 - l_discount) as volume from supplier, lineitem, orders, customer, nation n1, nation n2 where s_tenant_id = 15 and l_tenant_id = 15 and o_tenant_id = 15 and c_tenant_id = 15 and s_suppkey = l_suppkey and o_orderkey = l_orderkey and c_custkey = o_custkey and s_nationkey = n1.n_nationkey and c_nationkey = n2.n_nationkey and ( (n1.n_name = &apos;MOROCCO&apos; and n2.n_name = &apos;JAPAN&apos;) or (n1.n_name = &apos;JAPAN&apos; and n2.n_name = &apos;MOROCCO&apos;) ) and l_shipdate between date &apos;1995-01-01&apos; and date &apos;1996-12-31&apos; ) as shipping group by supp_nation, cust_nation, l_year order by supp_nation, cust_nation, l_year;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T15 - Q8" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select o_year, sum(case when nation = &apos;JAPAN&apos; then volume else 0 end) / sum(volume) as mkt_share from ( select extract(year from o_orderdate) as o_year, l_extendedprice * (1 - l_discount) as volume, n2.n_name as nation from part, supplier, lineitem, orders, customer, nation n1, nation n2, region where p_tenant_id = 15 and s_tenant_id = 15 and l_tenant_id = 15 and o_tenant_id = 15 and c_tenant_id = 15 and p_partkey = l_partkey and s_suppkey = l_suppkey and l_orderkey = o_orderkey and o_custkey = c_custkey and c_nationkey = n1.n_nationkey and n1.n_regionkey = r_regionkey and r_name = &apos;ASIA&apos; and s_nationkey = n2.n_nationkey and o_orderdate between date &apos;1995-01-01&apos; and date &apos;1996-12-31&apos; and p_type = &apos;LARGE PLATED NICKEL&apos; ) as all_nations group by o_year order by o_year;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T15 - Q9" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select nation, o_year, sum(amount) as sum_profit from ( select n_name as nation, extract(year from o_orderdate) as o_year, l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity as amount from part, supplier, lineitem, partsupp, orders, nation where p_tenant_id = 15 and s_tenant_id = 15 and l_tenant_id = 15 and ps_tenant_id = 15 and o_tenant_id = 15 and s_suppkey = l_suppkey and ps_suppkey = l_suppkey and ps_partkey = l_partkey and p_partkey = l_partkey and o_orderkey = l_orderkey and s_nationkey = n_nationkey and p_name like &apos;%misty%&apos; ) as profit group by nation, o_year order by nation, o_year desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T15 - Q10" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_custkey, c_name, sum(l_extendedprice * (1 - l_discount)) as revenue, c_acctbal, n_name, c_address, c_phone, c_comment from customer, orders, lineitem, nation where c_tenant_id = 15 and o_tenant_id = 15 and l_tenant_id = 15 and c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate &gt;= date &apos;1994-05-01&apos; and o_orderdate &lt; date &apos;1994-05-01&apos; + interval &apos;3&apos; month and l_returnflag = &apos;R&apos; and c_nationkey = n_nationkey group by c_custkey, c_name, c_acctbal, c_phone, n_name, c_address, c_comment order by revenue desc limit 20;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T15 - Q11" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select ps_partkey, sum(ps_supplycost * ps_availqty) as value from partsupp, supplier, nation where ps_tenant_id = 15 and s_tenant_id = 15 and ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = &apos;IRAQ&apos; group by ps_partkey having sum(ps_supplycost * ps_availqty) &gt; ( select sum(ps_supplycost * ps_availqty) * 0.0000008264 from partsupp, supplier, nation where ps_tenant_id = 15 and s_tenant_id = 15 and ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = &apos;IRAQ&apos; ) order by value desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T15 - Q12" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select l_shipmode, sum(case when o_orderpriority = &apos;1-URGENT&apos; or o_orderpriority = &apos;2-HIGH&apos; then 1 else 0 end) as high_line_count, sum(case when o_orderpriority &lt;&gt; &apos;1-URGENT&apos; and o_orderpriority &lt;&gt; &apos;2-HIGH&apos; then 1 else 0 end) as low_line_count from orders, lineitem where o_tenant_id = 15 and l_tenant_id = 15 and o_orderkey = l_orderkey and l_shipmode in (&apos;FOB&apos;, &apos;MAIL&apos;) and l_commitdate &lt; l_receiptdate and l_shipdate &lt; l_commitdate and l_receiptdate &gt;= date &apos;1997-01-01&apos; and l_receiptdate &lt; date &apos;1997-01-01&apos; + interval &apos;1&apos; year group by l_shipmode order by l_shipmode;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T15 - Q13" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_count, count(*) as custdist from ( select c_custkey, count(o_orderkey) from customer left outer join orders on c_custkey = o_custkey and o_comment not like &apos;%unusual%deposits%&apos; where c_tenant_id = 15 group by c_custkey ) as c_orders (c_custkey, c_count) group by c_count order by custdist desc, c_count desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T15 - Q14" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select 100.00 * sum(case when p_type like &apos;PROMO%&apos; then l_extendedprice * (1 - l_discount) else 0 end) / sum(l_extendedprice * (1 - l_discount)) as promo_revenue from lineitem, part where l_tenant_id = 15 and p_tenant_id = 15 and l_partkey = p_partkey and l_shipdate &gt;= date &apos;1997-01-01&apos; and l_shipdate &lt; date &apos;1997-01-01&apos; + interval &apos;1&apos; month;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T15 - Q15" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Callable Statement</stringProp>
            <stringProp name="query">create view revenue0 (supplier_no, total_revenue) as select l_suppkey, sum(l_extendedprice * (1 - l_discount)) from lineitem where l_tenant_id = 15 and l_shipdate &gt;= date &apos;1993-02-01&apos; and l_shipdate &lt; date &apos;1993-02-01&apos; + interval &apos;3&apos; month group by l_suppkey; select s_suppkey, s_name, s_address, s_phone, total_revenue from supplier, revenue0 where s_tenant_id = 15 and s_suppkey = supplier_no and total_revenue = ( select max(total_revenue) from revenue0 ) order by s_suppkey; drop view revenue0;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T15 - Q16" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select p_brand, p_type, p_size, count(distinct ps_suppkey) as supplier_cnt from partsupp, part where ps_tenant_id = 15 and p_tenant_id = 15 and p_partkey = ps_partkey and p_brand &lt;&gt; &apos;Brand#32&apos; and p_type not like &apos;SMALL ANODIZED%&apos; and p_size in (33, 19, 22, 20, 11, 45, 9, 1) and ps_suppkey not in ( select s_suppkey from supplier where s_tenant_id = 15 and s_comment like &apos;%Customer%Complaints%&apos; ) group by p_brand, p_type, p_size order by supplier_cnt desc, p_brand, p_type, p_size;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T15 - Q18" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice, sum(l_quantity) from customer, orders, lineitem where c_tenant_id = 15 and o_tenant_id = 15 and l_tenant_id = 15 and o_orderkey in ( select l_orderkey from lineitem where l_tenant_id = 15 group by l_orderkey having sum(l_quantity) &gt; 312 ) and c_custkey = o_custkey and o_orderkey = l_orderkey group by c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice order by o_totalprice desc, o_orderdate limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T15 - Q19" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select sum(l_extendedprice* (1 - l_discount)) as revenue from lineitem, part where l_tenant_id = 15 and p_tenant_id = 15 and (( p_partkey = l_partkey and p_brand = &apos;Brand#42&apos; and p_container in (&apos;SM CasE&apos;, &apos;SM BOX&apos;, &apos;SM PACK&apos;, &apos;SM PKG&apos;) and l_quantity &gt;= 1 and l_quantity &lt;= 1 + 10 and p_size between 1 and 5 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ) or ( p_partkey = l_partkey and p_brand = &apos;Brand#32&apos; and p_container in (&apos;MED BAG&apos;, &apos;MED BOX&apos;, &apos;MED PKG&apos;, &apos;MED PACK&apos;) and l_quantity &gt;= 16 and l_quantity &lt;= 16 + 10 and p_size between 1 and 10 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ) or ( p_partkey = l_partkey and p_brand = &apos;Brand#15&apos; and p_container in (&apos;LG CasE&apos;, &apos;LG BOX&apos;, &apos;LG PACK&apos;, &apos;LG PKG&apos;) and l_quantity &gt;= 26 and l_quantity &lt;= 26 + 10 and p_size between 1 and 15 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos;));
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T15 - Q21" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select s_name, count(*) as numwait from supplier, lineitem l1, orders, nation where s_tenant_id = 15 and l1.l_tenant_id = 15 and o_tenant_id = 15 and s_suppkey = l1.l_suppkey and o_orderkey = l1.l_orderkey and o_orderstatus = &apos;F&apos; and l1.l_receiptdate &gt; l1.l_commitdate and exists ( select * from lineitem l2 where l2.l_tenant_id = 15 and l2.l_orderkey = l1.l_orderkey and l2.l_suppkey &lt;&gt; l1.l_suppkey ) and not exists ( select * from lineitem l3 where l3.l_tenant_id = 15 and l3.l_orderkey = l1.l_orderkey and l3.l_suppkey &lt;&gt; l1.l_suppkey and l3.l_receiptdate &gt; l3.l_commitdate ) and s_nationkey = n_nationkey and n_name = &apos;IRAN&apos; group by s_name order by numwait desc, s_name limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T15 - Q22" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select cntrycode, count(*) as numcust, sum(c_acctbal) as totacctbal from ( select substring(c_phone from 1 for 2) as cntrycode, c_acctbal from customer where c_tenant_id = 15 and substring(c_phone from 1 for 2) in (&apos;18&apos;, &apos;14&apos;, &apos;32&apos;, &apos;11&apos;, &apos;26&apos;, &apos;27&apos;, &apos;24&apos;) and c_acctbal &gt; ( select avg(c_acctbal) from customer where c_tenant_id = 15 and c_acctbal &gt; 0.00 and substring(c_phone from 1 for 2) in (&apos;18&apos;, &apos;14&apos;, &apos;32&apos;, &apos;11&apos;, &apos;26&apos;, &apos;27&apos;, &apos;24&apos;) ) and not exists ( select * from orders where o_tenant_id = 15 and o_custkey = c_custkey ) ) as custsale group by cntrycode order by cntrycode;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T15 - RF1" enabled="false">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO region (r_regionkey, r_name, r_comment) VALUES (123476241, &apos;AFRICA&apos;, &apos;lar deposits. blithely final packages cajole. regular&apos;);
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T15 - RF2" enabled="false">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">DELETE FROM region WHERE r_regionkey = 123476241;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="T16" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <RandomOrderController guiclass="RandomOrderControllerGui" testclass="RandomOrderController" testname="Random Order Controller" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T16 - Q1" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="query">select l_returnflag, l_linestatus, sum(l_quantity) as sum_qty, sum(l_extendedprice) as sum_base_price, sum(l_extendedprice * (1 - l_discount)) as sum_disc_price, sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge, avg(l_quantity) as avg_qty, avg(l_extendedprice) as avg_price, avg(l_discount) as avg_disc, count(*) as count_order from lineitem where l_tenant_id = 16 and l_shipdate &lt;= date &apos;1998-12-01&apos; - interval &apos;69&apos; day group by l_returnflag, l_linestatus order by l_returnflag, l_linestatus;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T16 - Q2" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select s_acctbal, s_name, n_name, p_partkey, p_mfgr, s_address, s_phone, s_comment from part, supplier, partsupp, nation, region where p_tenant_id = 16 and s_tenant_id = 16 and ps_tenant_id = 16 and p_partkey = ps_partkey and s_suppkey = ps_suppkey and p_size = 2 and p_type like &apos;%NICKEL&apos; and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;EUROPE&apos; and ps_supplycost = ( select min(ps_supplycost) from partsupp, supplier, nation, region where ps_tenant_id = 16 and s_tenant_id = 16 and p_partkey = ps_partkey and s_suppkey = ps_suppkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;EUROPE&apos; ) order by s_acctbal desc, n_name, s_name, p_partkey limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T16 - Q3" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select l_orderkey, sum(l_extendedprice * (1 - l_discount)) as revenue, o_orderdate, o_shippriority from customer, orders, lineitem where c_tenant_id = 16 and o_tenant_id = 16 and l_tenant_id = 16 and c_mktsegment = &apos;MACHINERY&apos; and c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate &lt; date &apos;1995-03-23&apos; and l_shipdate &gt; date &apos;1995-03-23&apos; group by l_orderkey, o_orderdate, o_shippriority order by revenue desc, o_orderdate limit 10;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T16 - Q4" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select o_orderpriority, count(*) as order_count from orders where o_tenant_id = 16 and o_orderdate &gt;= date &apos;1996-06-01&apos; and o_orderdate &lt; date &apos;1996-06-01&apos; + interval &apos;3&apos; month and exists ( select * from lineitem where l_tenant_id = 16 and l_orderkey = o_orderkey and l_commitdate &lt; l_receiptdate ) group by o_orderpriority order by o_orderpriority;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T16 - Q5" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select n_name, sum(l_extendedprice * (1 - l_discount)) as revenue from customer, orders, lineitem, supplier, nation, region where c_tenant_id = 16 and o_tenant_id = 16 and l_tenant_id = 16 and s_tenant_id = 16 and c_custkey = o_custkey and l_orderkey = o_orderkey and l_suppkey = s_suppkey and c_nationkey = s_nationkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; and o_orderdate &gt;= date &apos;1994-01-01&apos; and o_orderdate &lt; date &apos;1994-01-01&apos; + interval &apos;1&apos; year group by n_name order by revenue desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T16 - Q6" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select sum(l_extendedprice * l_discount) as revenue from lineitem where l_tenant_id = 16 and l_shipdate &gt;= date &apos;1994-01-01&apos; and l_shipdate &lt; date &apos;1994-01-01&apos; + interval &apos;1&apos; year and l_discount between 0.09 - 0.01 and 0.09 + 0.01 and l_quantity &lt; 25;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T16 - Q7" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select supp_nation, cust_nation, l_year, sum(volume) as revenue from ( select n1.n_name as supp_nation, n2.n_name as cust_nation, extract(year from l_shipdate) as l_year, l_extendedprice * (1 - l_discount) as volume from supplier, lineitem, orders, customer, nation n1, nation n2 where s_tenant_id = 16 and l_tenant_id = 16 and o_tenant_id = 16 and c_tenant_id = 16 and s_suppkey = l_suppkey and o_orderkey = l_orderkey and c_custkey = o_custkey and s_nationkey = n1.n_nationkey and c_nationkey = n2.n_nationkey and ( (n1.n_name = &apos;RUSSIA&apos; and n2.n_name = &apos;ROMANIA&apos;) or (n1.n_name = &apos;ROMANIA&apos; and n2.n_name = &apos;RUSSIA&apos;) ) and l_shipdate between date &apos;1995-01-01&apos; and date &apos;1996-12-31&apos; ) as shipping group by supp_nation, cust_nation, l_year order by supp_nation, cust_nation, l_year;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T16 - Q8" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select o_year, sum(case when nation = &apos;ROMANIA&apos; then volume else 0 end) / sum(volume) as mkt_share from ( select extract(year from o_orderdate) as o_year, l_extendedprice * (1 - l_discount) as volume, n2.n_name as nation from part, supplier, lineitem, orders, customer, nation n1, nation n2, region where p_tenant_id = 16 and s_tenant_id = 16 and l_tenant_id = 16 and o_tenant_id = 16 and c_tenant_id = 16 and p_partkey = l_partkey and s_suppkey = l_suppkey and l_orderkey = o_orderkey and o_custkey = c_custkey and c_nationkey = n1.n_nationkey and n1.n_regionkey = r_regionkey and r_name = &apos;EUROPE&apos; and s_nationkey = n2.n_nationkey and o_orderdate between date &apos;1995-01-01&apos; and date &apos;1996-12-31&apos; and p_type = &apos;PROMO ANODIZED TIN&apos; ) as all_nations group by o_year order by o_year;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T16 - Q9" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select nation, o_year, sum(amount) as sum_profit from ( select n_name as nation, extract(year from o_orderdate) as o_year, l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity as amount from part, supplier, lineitem, partsupp, orders, nation where p_tenant_id = 16 and s_tenant_id = 16 and l_tenant_id = 16 and ps_tenant_id = 16 and o_tenant_id = 16 and s_suppkey = l_suppkey and ps_suppkey = l_suppkey and ps_partkey = l_partkey and p_partkey = l_partkey and o_orderkey = l_orderkey and s_nationkey = n_nationkey and p_name like &apos;%rosy%&apos; ) as profit group by nation, o_year order by nation, o_year desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T16 - Q10" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_custkey, c_name, sum(l_extendedprice * (1 - l_discount)) as revenue, c_acctbal, n_name, c_address, c_phone, c_comment from customer, orders, lineitem, nation where c_tenant_id = 16 and o_tenant_id = 16 and l_tenant_id = 16 and c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate &gt;= date &apos;1994-01-01&apos; and o_orderdate &lt; date &apos;1994-01-01&apos; + interval &apos;3&apos; month and l_returnflag = &apos;R&apos; and c_nationkey = n_nationkey group by c_custkey, c_name, c_acctbal, c_phone, n_name, c_address, c_comment order by revenue desc limit 20;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T16 - Q11" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select ps_partkey, sum(ps_supplycost * ps_availqty) as value from partsupp, supplier, nation where ps_tenant_id = 16 and s_tenant_id = 16 and ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = &apos;RUSSIA&apos; group by ps_partkey having sum(ps_supplycost * ps_availqty) &gt; ( select sum(ps_supplycost * ps_availqty) * 0.0000030303 from partsupp, supplier, nation where ps_tenant_id = 16 and s_tenant_id = 16 and ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = &apos;RUSSIA&apos; ) order by value desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T16 - Q12" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select l_shipmode, sum(case when o_orderpriority = &apos;1-URGENT&apos; or o_orderpriority = &apos;2-HIGH&apos; then 1 else 0 end) as high_line_count, sum(case when o_orderpriority &lt;&gt; &apos;1-URGENT&apos; and o_orderpriority &lt;&gt; &apos;2-HIGH&apos; then 1 else 0 end) as low_line_count from orders, lineitem where o_tenant_id = 16 and l_tenant_id = 16 and o_orderkey = l_orderkey and l_shipmode in (&apos;AIR&apos;, &apos;TRUCK&apos;) and l_commitdate &lt; l_receiptdate and l_shipdate &lt; l_commitdate and l_receiptdate &gt;= date &apos;1996-01-01&apos; and l_receiptdate &lt; date &apos;1996-01-01&apos; + interval &apos;1&apos; year group by l_shipmode order by l_shipmode;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T16 - Q13" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_count, count(*) as custdist from ( select c_custkey, count(o_orderkey) from customer left outer join orders on c_custkey = o_custkey and o_comment not like &apos;%pending%accounts%&apos; where c_tenant_id = 16 group by c_custkey ) as c_orders (c_custkey, c_count) group by c_count order by custdist desc, c_count desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T16 - Q14" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select 100.00 * sum(case when p_type like &apos;PROMO%&apos; then l_extendedprice * (1 - l_discount) else 0 end) / sum(l_extendedprice * (1 - l_discount)) as promo_revenue from lineitem, part where l_tenant_id = 16 and p_tenant_id = 16 and l_partkey = p_partkey and l_shipdate &gt;= date &apos;1996-03-01&apos; and l_shipdate &lt; date &apos;1996-03-01&apos; + interval &apos;1&apos; month;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T16 - Q15" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Callable Statement</stringProp>
            <stringProp name="query">create view revenue0 (supplier_no, total_revenue) as select l_suppkey, sum(l_extendedprice * (1 - l_discount)) from lineitem where l_tenant_id = 16 and l_shipdate &gt;= date &apos;1995-09-01&apos; and l_shipdate &lt; date &apos;1995-09-01&apos; + interval &apos;3&apos; month group by l_suppkey; select s_suppkey, s_name, s_address, s_phone, total_revenue from supplier, revenue0 where s_tenant_id = 16 and s_suppkey = supplier_no and total_revenue = ( select max(total_revenue) from revenue0 ) order by s_suppkey; drop view revenue0;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T16 - Q16" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select p_brand, p_type, p_size, count(distinct ps_suppkey) as supplier_cnt from partsupp, part where ps_tenant_id = 16 and p_tenant_id = 16 and p_partkey = ps_partkey and p_brand &lt;&gt; &apos;Brand#32&apos; and p_type not like &apos;STANDARD ANODIZED%&apos; and p_size in (23, 6, 19, 31, 20, 21, 27, 2) and ps_suppkey not in ( select s_suppkey from supplier where s_tenant_id = 16 and s_comment like &apos;%Customer%Complaints%&apos; ) group by p_brand, p_type, p_size order by supplier_cnt desc, p_brand, p_type, p_size;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T16 - Q18" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice, sum(l_quantity) from customer, orders, lineitem where c_tenant_id = 16 and o_tenant_id = 16 and l_tenant_id = 16 and o_orderkey in ( select l_orderkey from lineitem where l_tenant_id = 16 group by l_orderkey having sum(l_quantity) &gt; 312 ) and c_custkey = o_custkey and o_orderkey = l_orderkey group by c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice order by o_totalprice desc, o_orderdate limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T16 - Q19" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select sum(l_extendedprice* (1 - l_discount)) as revenue from lineitem, part where l_tenant_id = 16 and p_tenant_id = 16 and (( p_partkey = l_partkey and p_brand = &apos;Brand#31&apos; and p_container in (&apos;SM CasE&apos;, &apos;SM BOX&apos;, &apos;SM PACK&apos;, &apos;SM PKG&apos;) and l_quantity &gt;= 5 and l_quantity &lt;= 5 + 10 and p_size between 1 and 5 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ) or ( p_partkey = l_partkey and p_brand = &apos;Brand#23&apos; and p_container in (&apos;MED BAG&apos;, &apos;MED BOX&apos;, &apos;MED PKG&apos;, &apos;MED PACK&apos;) and l_quantity &gt;= 13 and l_quantity &lt;= 13 + 10 and p_size between 1 and 10 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ) or ( p_partkey = l_partkey and p_brand = &apos;Brand#22&apos; and p_container in (&apos;LG CasE&apos;, &apos;LG BOX&apos;, &apos;LG PACK&apos;, &apos;LG PKG&apos;) and l_quantity &gt;= 27 and l_quantity &lt;= 27 + 10 and p_size between 1 and 15 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos;));
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T16 - Q21" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select s_name, count(*) as numwait from supplier, lineitem l1, orders, nation where s_tenant_id = 16 and l1.l_tenant_id = 16 and o_tenant_id = 16 and s_suppkey = l1.l_suppkey and o_orderkey = l1.l_orderkey and o_orderstatus = &apos;F&apos; and l1.l_receiptdate &gt; l1.l_commitdate and exists ( select * from lineitem l2 where l2.l_tenant_id = 16 and l2.l_orderkey = l1.l_orderkey and l2.l_suppkey &lt;&gt; l1.l_suppkey ) and not exists ( select * from lineitem l3 where l3.l_tenant_id = 16 and l3.l_orderkey = l1.l_orderkey and l3.l_suppkey &lt;&gt; l1.l_suppkey and l3.l_receiptdate &gt; l3.l_commitdate ) and s_nationkey = n_nationkey and n_name = &apos;INDIA&apos; group by s_name order by numwait desc, s_name limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T16 - Q22" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select cntrycode, count(*) as numcust, sum(c_acctbal) as totacctbal from ( select substring(c_phone from 1 for 2) as cntrycode, c_acctbal from customer where c_tenant_id = 16 and substring(c_phone from 1 for 2) in (&apos;24&apos;, &apos;19&apos;, &apos;11&apos;, &apos;23&apos;, &apos;20&apos;, &apos;28&apos;, &apos;12&apos;) and c_acctbal &gt; ( select avg(c_acctbal) from customer where c_tenant_id = 16 and c_acctbal &gt; 0.00 and substring(c_phone from 1 for 2) in (&apos;24&apos;, &apos;19&apos;, &apos;11&apos;, &apos;23&apos;, &apos;20&apos;, &apos;28&apos;, &apos;12&apos;) ) and not exists ( select * from orders where o_tenant_id = 16 and o_custkey = c_custkey ) ) as custsale group by cntrycode order by cntrycode;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T16 - RF1" enabled="false">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO region (r_regionkey, r_name, r_comment) VALUES (123476241, &apos;AFRICA&apos;, &apos;lar deposits. blithely final packages cajole. regular&apos;);
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T16 - RF2" enabled="false">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">DELETE FROM region WHERE r_regionkey = 123476241;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="T17" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <RandomOrderController guiclass="RandomOrderControllerGui" testclass="RandomOrderController" testname="Random Order Controller" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T17 - Q1" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="query">select l_returnflag, l_linestatus, sum(l_quantity) as sum_qty, sum(l_extendedprice) as sum_base_price, sum(l_extendedprice * (1 - l_discount)) as sum_disc_price, sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge, avg(l_quantity) as avg_qty, avg(l_extendedprice) as avg_price, avg(l_discount) as avg_disc, count(*) as count_order from lineitem where l_tenant_id = 17 and l_shipdate &lt;= date &apos;1998-12-01&apos; - interval &apos;64&apos; day group by l_returnflag, l_linestatus order by l_returnflag, l_linestatus;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T17 - Q2" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select s_acctbal, s_name, n_name, p_partkey, p_mfgr, s_address, s_phone, s_comment from part, supplier, partsupp, nation, region where p_tenant_id = 17 and s_tenant_id = 17 and ps_tenant_id = 17 and p_partkey = ps_partkey and s_suppkey = ps_suppkey and p_size = 17 and p_type like &apos;%BRASS&apos; and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;ASIA&apos; and ps_supplycost = ( select min(ps_supplycost) from partsupp, supplier, nation, region where ps_tenant_id = 17 and s_tenant_id = 17 and p_partkey = ps_partkey and s_suppkey = ps_suppkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;ASIA&apos; ) order by s_acctbal desc, n_name, s_name, p_partkey limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T17 - Q3" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select l_orderkey, sum(l_extendedprice * (1 - l_discount)) as revenue, o_orderdate, o_shippriority from customer, orders, lineitem where c_tenant_id = 17 and o_tenant_id = 17 and l_tenant_id = 17 and c_mktsegment = &apos;AUTOMOBILE&apos; and c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate &lt; date &apos;1995-03-15&apos; and l_shipdate &gt; date &apos;1995-03-15&apos; group by l_orderkey, o_orderdate, o_shippriority order by revenue desc, o_orderdate limit 10;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T17 - Q4" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select o_orderpriority, count(*) as order_count from orders where o_tenant_id = 17 and o_orderdate &gt;= date &apos;1995-03-01&apos; and o_orderdate &lt; date &apos;1995-03-01&apos; + interval &apos;3&apos; month and exists ( select * from lineitem where l_tenant_id = 17 and l_orderkey = o_orderkey and l_commitdate &lt; l_receiptdate ) group by o_orderpriority order by o_orderpriority;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T17 - Q5" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select n_name, sum(l_extendedprice * (1 - l_discount)) as revenue from customer, orders, lineitem, supplier, nation, region where c_tenant_id = 17 and o_tenant_id = 17 and l_tenant_id = 17 and s_tenant_id = 17 and c_custkey = o_custkey and l_orderkey = o_orderkey and l_suppkey = s_suppkey and c_nationkey = s_nationkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;EUROPE&apos; and o_orderdate &gt;= date &apos;1996-01-01&apos; and o_orderdate &lt; date &apos;1996-01-01&apos; + interval &apos;1&apos; year group by n_name order by revenue desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T17 - Q6" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select sum(l_extendedprice * l_discount) as revenue from lineitem where l_tenant_id = 17 and l_shipdate &gt;= date &apos;1996-01-01&apos; and l_shipdate &lt; date &apos;1996-01-01&apos; + interval &apos;1&apos; year and l_discount between 0.07 - 0.01 and 0.07 + 0.01 and l_quantity &lt; 25;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T17 - Q7" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select supp_nation, cust_nation, l_year, sum(volume) as revenue from ( select n1.n_name as supp_nation, n2.n_name as cust_nation, extract(year from l_shipdate) as l_year, l_extendedprice * (1 - l_discount) as volume from supplier, lineitem, orders, customer, nation n1, nation n2 where s_tenant_id = 17 and l_tenant_id = 17 and o_tenant_id = 17 and c_tenant_id = 17 and s_suppkey = l_suppkey and o_orderkey = l_orderkey and c_custkey = o_custkey and s_nationkey = n1.n_nationkey and c_nationkey = n2.n_nationkey and ( (n1.n_name = &apos;MOZAMBIQUE&apos; and n2.n_name = &apos;JORDAN&apos;) or (n1.n_name = &apos;JORDAN&apos; and n2.n_name = &apos;MOZAMBIQUE&apos;) ) and l_shipdate between date &apos;1995-01-01&apos; and date &apos;1996-12-31&apos; ) as shipping group by supp_nation, cust_nation, l_year order by supp_nation, cust_nation, l_year;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T17 - Q8" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select o_year, sum(case when nation = &apos;ETHIOPIA&apos; then volume else 0 end) / sum(volume) as mkt_share from ( select extract(year from o_orderdate) as o_year, l_extendedprice * (1 - l_discount) as volume, n2.n_name as nation from part, supplier, lineitem, orders, customer, nation n1, nation n2, region where p_tenant_id = 17 and s_tenant_id = 17 and l_tenant_id = 17 and o_tenant_id = 17 and c_tenant_id = 17 and p_partkey = l_partkey and s_suppkey = l_suppkey and l_orderkey = o_orderkey and o_custkey = c_custkey and c_nationkey = n1.n_nationkey and n1.n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; and s_nationkey = n2.n_nationkey and o_orderdate between date &apos;1995-01-01&apos; and date &apos;1996-12-31&apos; and p_type = &apos;SMALL BRUSHED BRASS&apos; ) as all_nations group by o_year order by o_year;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T17 - Q9" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select nation, o_year, sum(amount) as sum_profit from ( select n_name as nation, extract(year from o_orderdate) as o_year, l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity as amount from part, supplier, lineitem, partsupp, orders, nation where p_tenant_id = 17 and s_tenant_id = 17 and l_tenant_id = 17 and ps_tenant_id = 17 and o_tenant_id = 17 and s_suppkey = l_suppkey and ps_suppkey = l_suppkey and ps_partkey = l_partkey and p_partkey = l_partkey and o_orderkey = l_orderkey and s_nationkey = n_nationkey and p_name like &apos;%frosted%&apos; ) as profit group by nation, o_year order by nation, o_year desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T17 - Q10" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_custkey, c_name, sum(l_extendedprice * (1 - l_discount)) as revenue, c_acctbal, n_name, c_address, c_phone, c_comment from customer, orders, lineitem, nation where c_tenant_id = 17 and o_tenant_id = 17 and l_tenant_id = 17 and c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate &gt;= date &apos;1993-06-01&apos; and o_orderdate &lt; date &apos;1993-06-01&apos; + interval &apos;3&apos; month and l_returnflag = &apos;R&apos; and c_nationkey = n_nationkey group by c_custkey, c_name, c_acctbal, c_phone, n_name, c_address, c_comment order by revenue desc limit 20;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T17 - Q11" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select ps_partkey, sum(ps_supplycost * ps_availqty) as value from partsupp, supplier, nation where ps_tenant_id = 17 and s_tenant_id = 17 and ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = &apos;JORDAN&apos; group by ps_partkey having sum(ps_supplycost * ps_availqty) &gt; ( select sum(ps_supplycost * ps_availqty) * 0.0000004329 from partsupp, supplier, nation where ps_tenant_id = 17 and s_tenant_id = 17 and ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = &apos;JORDAN&apos; ) order by value desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T17 - Q12" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select l_shipmode, sum(case when o_orderpriority = &apos;1-URGENT&apos; or o_orderpriority = &apos;2-HIGH&apos; then 1 else 0 end) as high_line_count, sum(case when o_orderpriority &lt;&gt; &apos;1-URGENT&apos; and o_orderpriority &lt;&gt; &apos;2-HIGH&apos; then 1 else 0 end) as low_line_count from orders, lineitem where o_tenant_id = 17 and l_tenant_id = 17 and o_orderkey = l_orderkey and l_shipmode in (&apos;REG AIR&apos;, &apos;FOB&apos;) and l_commitdate &lt; l_receiptdate and l_shipdate &lt; l_commitdate and l_receiptdate &gt;= date &apos;1993-01-01&apos; and l_receiptdate &lt; date &apos;1993-01-01&apos; + interval &apos;1&apos; year group by l_shipmode order by l_shipmode;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T17 - Q13" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_count, count(*) as custdist from ( select c_custkey, count(o_orderkey) from customer left outer join orders on c_custkey = o_custkey and o_comment not like &apos;%unusual%packages%&apos; where c_tenant_id = 17 group by c_custkey ) as c_orders (c_custkey, c_count) group by c_count order by custdist desc, c_count desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T17 - Q14" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select 100.00 * sum(case when p_type like &apos;PROMO%&apos; then l_extendedprice * (1 - l_discount) else 0 end) / sum(l_extendedprice * (1 - l_discount)) as promo_revenue from lineitem, part where l_tenant_id = 17 and p_tenant_id = 17 and l_partkey = p_partkey and l_shipdate &gt;= date &apos;1993-02-01&apos; and l_shipdate &lt; date &apos;1993-02-01&apos; + interval &apos;1&apos; month;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T17 - Q15" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Callable Statement</stringProp>
            <stringProp name="query">create view revenue0 (supplier_no, total_revenue) as select l_suppkey, sum(l_extendedprice * (1 - l_discount)) from lineitem where l_tenant_id = 17 and l_shipdate &gt;= date &apos;1995-12-01&apos; and l_shipdate &lt; date &apos;1995-12-01&apos; + interval &apos;3&apos; month group by l_suppkey; select s_suppkey, s_name, s_address, s_phone, total_revenue from supplier, revenue0 where s_tenant_id = 17 and s_suppkey = supplier_no and total_revenue = ( select max(total_revenue) from revenue0 ) order by s_suppkey; drop view revenue0;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T17 - Q16" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select p_brand, p_type, p_size, count(distinct ps_suppkey) as supplier_cnt from partsupp, part where ps_tenant_id = 17 and p_tenant_id = 17 and p_partkey = ps_partkey and p_brand &lt;&gt; &apos;Brand#22&apos; and p_type not like &apos;ECONOMY BURNISHED%&apos; and p_size in (47, 3, 10, 37, 44, 17, 14, 49) and ps_suppkey not in ( select s_suppkey from supplier where s_tenant_id = 17 and s_comment like &apos;%Customer%Complaints%&apos; ) group by p_brand, p_type, p_size order by supplier_cnt desc, p_brand, p_type, p_size;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T17 - Q18" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice, sum(l_quantity) from customer, orders, lineitem where c_tenant_id = 17 and o_tenant_id = 17 and l_tenant_id = 17 and o_orderkey in ( select l_orderkey from lineitem where l_tenant_id = 17 group by l_orderkey having sum(l_quantity) &gt; 314 ) and c_custkey = o_custkey and o_orderkey = l_orderkey group by c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice order by o_totalprice desc, o_orderdate limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T17 - Q19" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select sum(l_extendedprice* (1 - l_discount)) as revenue from lineitem, part where l_tenant_id = 17 and p_tenant_id = 17 and (( p_partkey = l_partkey and p_brand = &apos;Brand#51&apos; and p_container in (&apos;SM CasE&apos;, &apos;SM BOX&apos;, &apos;SM PACK&apos;, &apos;SM PKG&apos;) and l_quantity &gt;= 2 and l_quantity &lt;= 2 + 10 and p_size between 1 and 5 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ) or ( p_partkey = l_partkey and p_brand = &apos;Brand#14&apos; and p_container in (&apos;MED BAG&apos;, &apos;MED BOX&apos;, &apos;MED PKG&apos;, &apos;MED PACK&apos;) and l_quantity &gt;= 20 and l_quantity &lt;= 20 + 10 and p_size between 1 and 10 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ) or ( p_partkey = l_partkey and p_brand = &apos;Brand#52&apos; and p_container in (&apos;LG CasE&apos;, &apos;LG BOX&apos;, &apos;LG PACK&apos;, &apos;LG PKG&apos;) and l_quantity &gt;= 22 and l_quantity &lt;= 22 + 10 and p_size between 1 and 15 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos;));
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T17 - Q21" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select s_name, count(*) as numwait from supplier, lineitem l1, orders, nation where s_tenant_id = 17 and l1.l_tenant_id = 17 and o_tenant_id = 17 and s_suppkey = l1.l_suppkey and o_orderkey = l1.l_orderkey and o_orderstatus = &apos;F&apos; and l1.l_receiptdate &gt; l1.l_commitdate and exists ( select * from lineitem l2 where l2.l_tenant_id = 17 and l2.l_orderkey = l1.l_orderkey and l2.l_suppkey &lt;&gt; l1.l_suppkey ) and not exists ( select * from lineitem l3 where l3.l_tenant_id = 17 and l3.l_orderkey = l1.l_orderkey and l3.l_suppkey &lt;&gt; l1.l_suppkey and l3.l_receiptdate &gt; l3.l_commitdate ) and s_nationkey = n_nationkey and n_name = &apos;CANADA&apos; group by s_name order by numwait desc, s_name limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T17 - Q22" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select cntrycode, count(*) as numcust, sum(c_acctbal) as totacctbal from ( select substring(c_phone from 1 for 2) as cntrycode, c_acctbal from customer where c_tenant_id = 17 and substring(c_phone from 1 for 2) in (&apos;27&apos;, &apos;31&apos;, &apos;18&apos;, &apos;16&apos;, &apos;34&apos;, &apos;19&apos;, &apos;12&apos;) and c_acctbal &gt; ( select avg(c_acctbal) from customer where c_tenant_id = 17 and c_acctbal &gt; 0.00 and substring(c_phone from 1 for 2) in (&apos;27&apos;, &apos;31&apos;, &apos;18&apos;, &apos;16&apos;, &apos;34&apos;, &apos;19&apos;, &apos;12&apos;) ) and not exists ( select * from orders where o_tenant_id = 17 and o_custkey = c_custkey ) ) as custsale group by cntrycode order by cntrycode;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T17 - RF1" enabled="false">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO region (r_regionkey, r_name, r_comment) VALUES (123476241, &apos;AFRICA&apos;, &apos;lar deposits. blithely final packages cajole. regular&apos;);
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T17 - RF2" enabled="false">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">DELETE FROM region WHERE r_regionkey = 123476241;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="T18" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <RandomOrderController guiclass="RandomOrderControllerGui" testclass="RandomOrderController" testname="Random Order Controller" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T18 - Q1" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="query">select l_returnflag, l_linestatus, sum(l_quantity) as sum_qty, sum(l_extendedprice) as sum_base_price, sum(l_extendedprice * (1 - l_discount)) as sum_disc_price, sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge, avg(l_quantity) as avg_qty, avg(l_extendedprice) as avg_price, avg(l_discount) as avg_disc, count(*) as count_order from lineitem where l_tenant_id = 18 and l_shipdate &lt;= date &apos;1998-12-01&apos; - interval &apos;72&apos; day group by l_returnflag, l_linestatus order by l_returnflag, l_linestatus;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T18 - Q2" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select s_acctbal, s_name, n_name, p_partkey, p_mfgr, s_address, s_phone, s_comment from part, supplier, partsupp, nation, region where p_tenant_id = 18 and s_tenant_id = 18 and ps_tenant_id = 18 and p_partkey = ps_partkey and s_suppkey = ps_suppkey and p_size = 5 and p_type like &apos;%NICKEL&apos; and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;MIDDLE EAST&apos; and ps_supplycost = ( select min(ps_supplycost) from partsupp, supplier, nation, region where ps_tenant_id = 18 and s_tenant_id = 18 and p_partkey = ps_partkey and s_suppkey = ps_suppkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;MIDDLE EAST&apos; ) order by s_acctbal desc, n_name, s_name, p_partkey limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T18 - Q3" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select l_orderkey, sum(l_extendedprice * (1 - l_discount)) as revenue, o_orderdate, o_shippriority from customer, orders, lineitem where c_tenant_id = 18 and o_tenant_id = 18 and l_tenant_id = 18 and c_mktsegment = &apos;FURNITURE&apos; and c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate &lt; date &apos;1995-03-31&apos; and l_shipdate &gt; date &apos;1995-03-31&apos; group by l_orderkey, o_orderdate, o_shippriority order by revenue desc, o_orderdate limit 10;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T18 - Q4" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select o_orderpriority, count(*) as order_count from orders where o_tenant_id = 18 and o_orderdate &gt;= date &apos;1997-10-01&apos; and o_orderdate &lt; date &apos;1997-10-01&apos; + interval &apos;3&apos; month and exists ( select * from lineitem where l_tenant_id = 18 and l_orderkey = o_orderkey and l_commitdate &lt; l_receiptdate ) group by o_orderpriority order by o_orderpriority;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T18 - Q5" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select n_name, sum(l_extendedprice * (1 - l_discount)) as revenue from customer, orders, lineitem, supplier, nation, region where c_tenant_id = 18 and o_tenant_id = 18 and l_tenant_id = 18 and s_tenant_id = 18 and c_custkey = o_custkey and l_orderkey = o_orderkey and l_suppkey = s_suppkey and c_nationkey = s_nationkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;MIDDLE EAST&apos; and o_orderdate &gt;= date &apos;1996-01-01&apos; and o_orderdate &lt; date &apos;1996-01-01&apos; + interval &apos;1&apos; year group by n_name order by revenue desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T18 - Q6" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select sum(l_extendedprice * l_discount) as revenue from lineitem where l_tenant_id = 18 and l_shipdate &gt;= date &apos;1996-01-01&apos; and l_shipdate &lt; date &apos;1996-01-01&apos; + interval &apos;1&apos; year and l_discount between 0.04 - 0.01 and 0.04 + 0.01 and l_quantity &lt; 24;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T18 - Q7" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select supp_nation, cust_nation, l_year, sum(volume) as revenue from ( select n1.n_name as supp_nation, n2.n_name as cust_nation, extract(year from l_shipdate) as l_year, l_extendedprice * (1 - l_discount) as volume from supplier, lineitem, orders, customer, nation n1, nation n2 where s_tenant_id = 18 and l_tenant_id = 18 and o_tenant_id = 18 and c_tenant_id = 18 and s_suppkey = l_suppkey and o_orderkey = l_orderkey and c_custkey = o_custkey and s_nationkey = n1.n_nationkey and c_nationkey = n2.n_nationkey and ( (n1.n_name = &apos;INDIA&apos; and n2.n_name = &apos;ETHIOPIA&apos;) or (n1.n_name = &apos;ETHIOPIA&apos; and n2.n_name = &apos;INDIA&apos;) ) and l_shipdate between date &apos;1995-01-01&apos; and date &apos;1996-12-31&apos; ) as shipping group by supp_nation, cust_nation, l_year order by supp_nation, cust_nation, l_year;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T18 - Q8" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select o_year, sum(case when nation = &apos;ETHIOPIA&apos; then volume else 0 end) / sum(volume) as mkt_share from ( select extract(year from o_orderdate) as o_year, l_extendedprice * (1 - l_discount) as volume, n2.n_name as nation from part, supplier, lineitem, orders, customer, nation n1, nation n2, region where p_tenant_id = 18 and s_tenant_id = 18 and l_tenant_id = 18 and o_tenant_id = 18 and c_tenant_id = 18 and p_partkey = l_partkey and s_suppkey = l_suppkey and l_orderkey = o_orderkey and o_custkey = c_custkey and c_nationkey = n1.n_nationkey and n1.n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; and s_nationkey = n2.n_nationkey and o_orderdate between date &apos;1995-01-01&apos; and date &apos;1996-12-31&apos; and p_type = &apos;SMALL BRUSHED BRASS&apos; ) as all_nations group by o_year order by o_year;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T18 - Q9" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select nation, o_year, sum(amount) as sum_profit from ( select n_name as nation, extract(year from o_orderdate) as o_year, l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity as amount from part, supplier, lineitem, partsupp, orders, nation where p_tenant_id = 18 and s_tenant_id = 18 and l_tenant_id = 18 and ps_tenant_id = 18 and o_tenant_id = 18 and s_suppkey = l_suppkey and ps_suppkey = l_suppkey and ps_partkey = l_partkey and p_partkey = l_partkey and o_orderkey = l_orderkey and s_nationkey = n_nationkey and p_name like &apos;%frosted%&apos; ) as profit group by nation, o_year order by nation, o_year desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T18 - Q10" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_custkey, c_name, sum(l_extendedprice * (1 - l_discount)) as revenue, c_acctbal, n_name, c_address, c_phone, c_comment from customer, orders, lineitem, nation where c_tenant_id = 18 and o_tenant_id = 18 and l_tenant_id = 18 and c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate &gt;= date &apos;1993-06-01&apos; and o_orderdate &lt; date &apos;1993-06-01&apos; + interval &apos;3&apos; month and l_returnflag = &apos;R&apos; and c_nationkey = n_nationkey group by c_custkey, c_name, c_acctbal, c_phone, n_name, c_address, c_comment order by revenue desc limit 20;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T18 - Q11" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select ps_partkey, sum(ps_supplycost * ps_availqty) as value from partsupp, supplier, nation where ps_tenant_id = 18 and s_tenant_id = 18 and ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = &apos;JORDAN&apos; group by ps_partkey having sum(ps_supplycost * ps_availqty) &gt; ( select sum(ps_supplycost * ps_availqty) * 0.0000003953 from partsupp, supplier, nation where ps_tenant_id = 18 and s_tenant_id = 18 and ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = &apos;JORDAN&apos; ) order by value desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T18 - Q12" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select l_shipmode, sum(case when o_orderpriority = &apos;1-URGENT&apos; or o_orderpriority = &apos;2-HIGH&apos; then 1 else 0 end) as high_line_count, sum(case when o_orderpriority &lt;&gt; &apos;1-URGENT&apos; and o_orderpriority &lt;&gt; &apos;2-HIGH&apos; then 1 else 0 end) as low_line_count from orders, lineitem where o_tenant_id = 18 and l_tenant_id = 18 and o_orderkey = l_orderkey and l_shipmode in (&apos;REG AIR&apos;, &apos;FOB&apos;) and l_commitdate &lt; l_receiptdate and l_shipdate &lt; l_commitdate and l_receiptdate &gt;= date &apos;1993-01-01&apos; and l_receiptdate &lt; date &apos;1993-01-01&apos; + interval &apos;1&apos; year group by l_shipmode order by l_shipmode;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T18 - Q13" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_count, count(*) as custdist from ( select c_custkey, count(o_orderkey) from customer left outer join orders on c_custkey = o_custkey and o_comment not like &apos;%unusual%packages%&apos; where c_tenant_id = 18 group by c_custkey ) as c_orders (c_custkey, c_count) group by c_count order by custdist desc, c_count desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T18 - Q14" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select 100.00 * sum(case when p_type like &apos;PROMO%&apos; then l_extendedprice * (1 - l_discount) else 0 end) / sum(l_extendedprice * (1 - l_discount)) as promo_revenue from lineitem, part where l_tenant_id = 18 and p_tenant_id = 18 and l_partkey = p_partkey and l_shipdate &gt;= date &apos;1993-02-01&apos; and l_shipdate &lt; date &apos;1993-02-01&apos; + interval &apos;1&apos; month;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T18 - Q15" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Callable Statement</stringProp>
            <stringProp name="query">create view revenue0 (supplier_no, total_revenue) as select l_suppkey, sum(l_extendedprice * (1 - l_discount)) from lineitem where l_tenant_id = 18 and l_shipdate &gt;= date &apos;1993-08-01&apos; and l_shipdate &lt; date &apos;1993-08-01&apos; + interval &apos;3&apos; month group by l_suppkey; select s_suppkey, s_name, s_address, s_phone, total_revenue from supplier, revenue0 where s_tenant_id = 18 and s_suppkey = supplier_no and total_revenue = ( select max(total_revenue) from revenue0 ) order by s_suppkey; drop view revenue0;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T18 - Q16" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select p_brand, p_type, p_size, count(distinct ps_suppkey) as supplier_cnt from partsupp, part where ps_tenant_id = 18 and p_tenant_id = 18 and p_partkey = ps_partkey and p_brand &lt;&gt; &apos;Brand#52&apos; and p_type not like &apos;STANDARD PLATED%&apos; and p_size in (50, 23, 43, 18, 41, 10, 37, 6) and ps_suppkey not in ( select s_suppkey from supplier where s_tenant_id = 18 and s_comment like &apos;%Customer%Complaints%&apos; ) group by p_brand, p_type, p_size order by supplier_cnt desc, p_brand, p_type, p_size;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T18 - Q18" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice, sum(l_quantity) from customer, orders, lineitem where c_tenant_id = 18 and o_tenant_id = 18 and l_tenant_id = 18 and o_orderkey in ( select l_orderkey from lineitem where l_tenant_id = 18 group by l_orderkey having sum(l_quantity) &gt; 312 ) and c_custkey = o_custkey and o_orderkey = l_orderkey group by c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice order by o_totalprice desc, o_orderdate limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T18 - Q19" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select sum(l_extendedprice* (1 - l_discount)) as revenue from lineitem, part where l_tenant_id = 18 and p_tenant_id = 18 and (( p_partkey = l_partkey and p_brand = &apos;Brand#53&apos; and p_container in (&apos;SM CasE&apos;, &apos;SM BOX&apos;, &apos;SM PACK&apos;, &apos;SM PKG&apos;) and l_quantity &gt;= 7 and l_quantity &lt;= 7 + 10 and p_size between 1 and 5 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ) or ( p_partkey = l_partkey and p_brand = &apos;Brand#52&apos; and p_container in (&apos;MED BAG&apos;, &apos;MED BOX&apos;, &apos;MED PKG&apos;, &apos;MED PACK&apos;) and l_quantity &gt;= 10 and l_quantity &lt;= 10 + 10 and p_size between 1 and 10 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ) or ( p_partkey = l_partkey and p_brand = &apos;Brand#41&apos; and p_container in (&apos;LG CasE&apos;, &apos;LG BOX&apos;, &apos;LG PACK&apos;, &apos;LG PKG&apos;) and l_quantity &gt;= 29 and l_quantity &lt;= 29 + 10 and p_size between 1 and 15 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos;));
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T18 - Q21" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select s_name, count(*) as numwait from supplier, lineitem l1, orders, nation where s_tenant_id = 18 and l1.l_tenant_id = 18 and o_tenant_id = 18 and s_suppkey = l1.l_suppkey and o_orderkey = l1.l_orderkey and o_orderstatus = &apos;F&apos; and l1.l_receiptdate &gt; l1.l_commitdate and exists ( select * from lineitem l2 where l2.l_tenant_id = 18 and l2.l_orderkey = l1.l_orderkey and l2.l_suppkey &lt;&gt; l1.l_suppkey ) and not exists ( select * from lineitem l3 where l3.l_tenant_id = 18 and l3.l_orderkey = l1.l_orderkey and l3.l_suppkey &lt;&gt; l1.l_suppkey and l3.l_receiptdate &gt; l3.l_commitdate ) and s_nationkey = n_nationkey and n_name = &apos;SAUDI ARABIA&apos; group by s_name order by numwait desc, s_name limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T18 - Q22" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select cntrycode, count(*) as numcust, sum(c_acctbal) as totacctbal from ( select substring(c_phone from 1 for 2) as cntrycode, c_acctbal from customer where c_tenant_id = 18 and substring(c_phone from 1 for 2) in (&apos;17&apos;, &apos;29&apos;, &apos;14&apos;, &apos;28&apos;, &apos;15&apos;, &apos;32&apos;, &apos;26&apos;) and c_acctbal &gt; ( select avg(c_acctbal) from customer where c_tenant_id = 18 and c_acctbal &gt; 0.00 and substring(c_phone from 1 for 2) in (&apos;17&apos;, &apos;29&apos;, &apos;14&apos;, &apos;28&apos;, &apos;15&apos;, &apos;32&apos;, &apos;26&apos;) ) and not exists ( select * from orders where o_tenant_id = 18 and o_custkey = c_custkey ) ) as custsale group by cntrycode order by cntrycode;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T18 - RF1" enabled="false">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO region (r_regionkey, r_name, r_comment) VALUES (123476241, &apos;AFRICA&apos;, &apos;lar deposits. blithely final packages cajole. regular&apos;);
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T18 - RF2" enabled="false">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">DELETE FROM region WHERE r_regionkey = 123476241;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="T19" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <RandomOrderController guiclass="RandomOrderControllerGui" testclass="RandomOrderController" testname="Random Order Controller" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T19 - Q1" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="query">select l_returnflag, l_linestatus, sum(l_quantity) as sum_qty, sum(l_extendedprice) as sum_base_price, sum(l_extendedprice * (1 - l_discount)) as sum_disc_price, sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge, avg(l_quantity) as avg_qty, avg(l_extendedprice) as avg_price, avg(l_discount) as avg_disc, count(*) as count_order from lineitem where l_tenant_id = 19 and l_shipdate &lt;= date &apos;1998-12-01&apos; - interval &apos;60&apos; day group by l_returnflag, l_linestatus order by l_returnflag, l_linestatus;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T19 - Q2" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select s_acctbal, s_name, n_name, p_partkey, p_mfgr, s_address, s_phone, s_comment from part, supplier, partsupp, nation, region where p_tenant_id = 19 and s_tenant_id = 19 and ps_tenant_id = 19 and p_partkey = ps_partkey and s_suppkey = ps_suppkey and p_size = 31 and p_type like &apos;%COPPER&apos; and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; and ps_supplycost = ( select min(ps_supplycost) from partsupp, supplier, nation, region where ps_tenant_id = 19 and s_tenant_id = 19 and p_partkey = ps_partkey and s_suppkey = ps_suppkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; ) order by s_acctbal desc, n_name, s_name, p_partkey limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T19 - Q3" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select l_orderkey, sum(l_extendedprice * (1 - l_discount)) as revenue, o_orderdate, o_shippriority from customer, orders, lineitem where c_tenant_id = 19 and o_tenant_id = 19 and l_tenant_id = 19 and c_mktsegment = &apos;BUILDING&apos; and c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate &lt; date &apos;1995-03-06&apos; and l_shipdate &gt; date &apos;1995-03-06&apos; group by l_orderkey, o_orderdate, o_shippriority order by revenue desc, o_orderdate limit 10;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T19 - Q4" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select o_orderpriority, count(*) as order_count from orders where o_tenant_id = 19 and o_orderdate &gt;= date &apos;1993-11-01&apos; and o_orderdate &lt; date &apos;1993-11-01&apos; + interval &apos;3&apos; month and exists ( select * from lineitem where l_tenant_id = 19 and l_orderkey = o_orderkey and l_commitdate &lt; l_receiptdate ) group by o_orderpriority order by o_orderpriority;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T19 - Q5" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select n_name, sum(l_extendedprice * (1 - l_discount)) as revenue from customer, orders, lineitem, supplier, nation, region where c_tenant_id = 19 and o_tenant_id = 19 and l_tenant_id = 19 and s_tenant_id = 19 and c_custkey = o_custkey and l_orderkey = o_orderkey and l_suppkey = s_suppkey and c_nationkey = s_nationkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; and o_orderdate &gt;= date &apos;1993-01-01&apos; and o_orderdate &lt; date &apos;1993-01-01&apos; + interval &apos;1&apos; year group by n_name order by revenue desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T19 - Q6" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select sum(l_extendedprice * l_discount) as revenue from lineitem where l_tenant_id = 19 and l_shipdate &gt;= date &apos;1993-01-01&apos; and l_shipdate &lt; date &apos;1993-01-01&apos; + interval &apos;1&apos; year and l_discount between 0.05 - 0.01 and 0.05 + 0.01 and l_quantity &lt; 24;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T19 - Q7" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select supp_nation, cust_nation, l_year, sum(volume) as revenue from ( select n1.n_name as supp_nation, n2.n_name as cust_nation, extract(year from l_shipdate) as l_year, l_extendedprice * (1 - l_discount) as volume from supplier, lineitem, orders, customer, nation n1, nation n2 where s_tenant_id = 19 and l_tenant_id = 19 and o_tenant_id = 19 and c_tenant_id = 19 and s_suppkey = l_suppkey and o_orderkey = l_orderkey and c_custkey = o_custkey and s_nationkey = n1.n_nationkey and c_nationkey = n2.n_nationkey and ( (n1.n_name = &apos;IRAN&apos; and n2.n_name = &apos;GERMANY&apos;) or (n1.n_name = &apos;GERMANY&apos; and n2.n_name = &apos;IRAN&apos;) ) and l_shipdate between date &apos;1995-01-01&apos; and date &apos;1996-12-31&apos; ) as shipping group by supp_nation, cust_nation, l_year order by supp_nation, cust_nation, l_year;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T19 - Q8" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select o_year, sum(case when nation = &apos;GERMANY&apos; then volume else 0 end) / sum(volume) as mkt_share from ( select extract(year from o_orderdate) as o_year, l_extendedprice * (1 - l_discount) as volume, n2.n_name as nation from part, supplier, lineitem, orders, customer, nation n1, nation n2, region where p_tenant_id = 19 and s_tenant_id = 19 and l_tenant_id = 19 and o_tenant_id = 19 and c_tenant_id = 19 and p_partkey = l_partkey and s_suppkey = l_suppkey and l_orderkey = o_orderkey and o_custkey = c_custkey and c_nationkey = n1.n_nationkey and n1.n_regionkey = r_regionkey and r_name = &apos;EUROPE&apos; and s_nationkey = n2.n_nationkey and o_orderdate between date &apos;1995-01-01&apos; and date &apos;1996-12-31&apos; and p_type = &apos;PROMO PLATED STEEL&apos; ) as all_nations group by o_year order by o_year;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T19 - Q9" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select nation, o_year, sum(amount) as sum_profit from ( select n_name as nation, extract(year from o_orderdate) as o_year, l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity as amount from part, supplier, lineitem, partsupp, orders, nation where p_tenant_id = 19 and s_tenant_id = 19 and l_tenant_id = 19 and ps_tenant_id = 19 and o_tenant_id = 19 and s_suppkey = l_suppkey and ps_suppkey = l_suppkey and ps_partkey = l_partkey and p_partkey = l_partkey and o_orderkey = l_orderkey and s_nationkey = n_nationkey and p_name like &apos;%tan%&apos; ) as profit group by nation, o_year order by nation, o_year desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T19 - Q10" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_custkey, c_name, sum(l_extendedprice * (1 - l_discount)) as revenue, c_acctbal, n_name, c_address, c_phone, c_comment from customer, orders, lineitem, nation where c_tenant_id = 19 and o_tenant_id = 19 and l_tenant_id = 19 and c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate &gt;= date &apos;1994-01-01&apos; and o_orderdate &lt; date &apos;1994-01-01&apos; + interval &apos;3&apos; month and l_returnflag = &apos;R&apos; and c_nationkey = n_nationkey group by c_custkey, c_name, c_acctbal, c_phone, n_name, c_address, c_comment order by revenue desc limit 20;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T19 - Q11" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select ps_partkey, sum(ps_supplycost * ps_availqty) as value from partsupp, supplier, nation where ps_tenant_id = 19 and s_tenant_id = 19 and ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = &apos;MOZAMBIQUE&apos; group by ps_partkey having sum(ps_supplycost * ps_availqty) &gt; ( select sum(ps_supplycost * ps_availqty) * 0.0000002331 from partsupp, supplier, nation where ps_tenant_id = 19 and s_tenant_id = 19 and ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = &apos;MOZAMBIQUE&apos; ) order by value desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T19 - Q12" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select l_shipmode, sum(case when o_orderpriority = &apos;1-URGENT&apos; or o_orderpriority = &apos;2-HIGH&apos; then 1 else 0 end) as high_line_count, sum(case when o_orderpriority &lt;&gt; &apos;1-URGENT&apos; and o_orderpriority &lt;&gt; &apos;2-HIGH&apos; then 1 else 0 end) as low_line_count from orders, lineitem where o_tenant_id = 19 and l_tenant_id = 19 and o_orderkey = l_orderkey and l_shipmode in (&apos;SHIP&apos;, &apos;RAIL&apos;) and l_commitdate &lt; l_receiptdate and l_shipdate &lt; l_commitdate and l_receiptdate &gt;= date &apos;1995-01-01&apos; and l_receiptdate &lt; date &apos;1995-01-01&apos; + interval &apos;1&apos; year group by l_shipmode order by l_shipmode;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T19 - Q13" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_count, count(*) as custdist from ( select c_custkey, count(o_orderkey) from customer left outer join orders on c_custkey = o_custkey and o_comment not like &apos;%express%requests%&apos; where c_tenant_id = 19 group by c_custkey ) as c_orders (c_custkey, c_count) group by c_count order by custdist desc, c_count desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T19 - Q14" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select 100.00 * sum(case when p_type like &apos;PROMO%&apos; then l_extendedprice * (1 - l_discount) else 0 end) / sum(l_extendedprice * (1 - l_discount)) as promo_revenue from lineitem, part where l_tenant_id = 19 and p_tenant_id = 19 and l_partkey = p_partkey and l_shipdate &gt;= date &apos;1994-12-01&apos; and l_shipdate &lt; date &apos;1994-12-01&apos; + interval &apos;1&apos; month;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T19 - Q15" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Callable Statement</stringProp>
            <stringProp name="query">create view revenue0 (supplier_no, total_revenue) as select l_suppkey, sum(l_extendedprice * (1 - l_discount)) from lineitem where l_tenant_id = 19 and l_shipdate &gt;= date &apos;1996-03-01&apos; and l_shipdate &lt; date &apos;1996-03-01&apos; + interval &apos;3&apos; month group by l_suppkey; select s_suppkey, s_name, s_address, s_phone, total_revenue from supplier, revenue0 where s_tenant_id = 19 and s_suppkey = supplier_no and total_revenue = ( select max(total_revenue) from revenue0 ) order by s_suppkey; drop view revenue0;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T19 - Q16" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select p_brand, p_type, p_size, count(distinct ps_suppkey) as supplier_cnt from partsupp, part where ps_tenant_id = 19 and p_tenant_id = 19 and p_partkey = ps_partkey and p_brand &lt;&gt; &apos;Brand#53&apos; and p_type not like &apos;MEDIUM BURNISHED%&apos; and p_size in (20, 48, 2, 43, 21, 14, 44, 33) and ps_suppkey not in ( select s_suppkey from supplier where s_tenant_id = 19 and s_comment like &apos;%Customer%Complaints%&apos; ) group by p_brand, p_type, p_size order by supplier_cnt desc, p_brand, p_type, p_size;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T19 - Q18" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice, sum(l_quantity) from customer, orders, lineitem where c_tenant_id = 19 and o_tenant_id = 19 and l_tenant_id = 19 and o_orderkey in ( select l_orderkey from lineitem where l_tenant_id = 19 group by l_orderkey having sum(l_quantity) &gt; 313 ) and c_custkey = o_custkey and o_orderkey = l_orderkey group by c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice order by o_totalprice desc, o_orderdate limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T19 - Q19" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select sum(l_extendedprice* (1 - l_discount)) as revenue from lineitem, part where l_tenant_id = 19 and p_tenant_id = 19 and (( p_partkey = l_partkey and p_brand = &apos;Brand#25&apos; and p_container in (&apos;SM CasE&apos;, &apos;SM BOX&apos;, &apos;SM PACK&apos;, &apos;SM PKG&apos;) and l_quantity &gt;= 9 and l_quantity &lt;= 9 + 10 and p_size between 1 and 5 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ) or ( p_partkey = l_partkey and p_brand = &apos;Brand#55&apos; and p_container in (&apos;MED BAG&apos;, &apos;MED BOX&apos;, &apos;MED PKG&apos;, &apos;MED PACK&apos;) and l_quantity &gt;= 16 and l_quantity &lt;= 16 + 10 and p_size between 1 and 10 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ) or ( p_partkey = l_partkey and p_brand = &apos;Brand#21&apos; and p_container in (&apos;LG CasE&apos;, &apos;LG BOX&apos;, &apos;LG PACK&apos;, &apos;LG PKG&apos;) and l_quantity &gt;= 28 and l_quantity &lt;= 28 + 10 and p_size between 1 and 15 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos;));
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T19 - Q21" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select s_name, count(*) as numwait from supplier, lineitem l1, orders, nation where s_tenant_id = 19 and l1.l_tenant_id = 19 and o_tenant_id = 19 and s_suppkey = l1.l_suppkey and o_orderkey = l1.l_orderkey and o_orderstatus = &apos;F&apos; and l1.l_receiptdate &gt; l1.l_commitdate and exists ( select * from lineitem l2 where l2.l_tenant_id = 19 and l2.l_orderkey = l1.l_orderkey and l2.l_suppkey &lt;&gt; l1.l_suppkey ) and not exists ( select * from lineitem l3 where l3.l_tenant_id = 19 and l3.l_orderkey = l1.l_orderkey and l3.l_suppkey &lt;&gt; l1.l_suppkey and l3.l_receiptdate &gt; l3.l_commitdate ) and s_nationkey = n_nationkey and n_name = &apos;UNITED KINGDOM&apos; group by s_name order by numwait desc, s_name limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T19 - Q22" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select cntrycode, count(*) as numcust, sum(c_acctbal) as totacctbal from ( select substring(c_phone from 1 for 2) as cntrycode, c_acctbal from customer where c_tenant_id = 19 and substring(c_phone from 1 for 2) in (&apos;30&apos;, &apos;19&apos;, &apos;16&apos;, &apos;31&apos;, &apos;26&apos;, &apos;13&apos;, &apos;12&apos;) and c_acctbal &gt; ( select avg(c_acctbal) from customer where c_tenant_id = 19 and c_acctbal &gt; 0.00 and substring(c_phone from 1 for 2) in (&apos;30&apos;, &apos;19&apos;, &apos;16&apos;, &apos;31&apos;, &apos;26&apos;, &apos;13&apos;, &apos;12&apos;) ) and not exists ( select * from orders where o_tenant_id = 19 and o_custkey = c_custkey ) ) as custsale group by cntrycode order by cntrycode;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T19 - RF1" enabled="false">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO region (r_regionkey, r_name, r_comment) VALUES (123476241, &apos;AFRICA&apos;, &apos;lar deposits. blithely final packages cajole. regular&apos;);
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T19 - RF2" enabled="false">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">DELETE FROM region WHERE r_regionkey = 123476241;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="T20" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <RandomOrderController guiclass="RandomOrderControllerGui" testclass="RandomOrderController" testname="Random Order Controller" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T20 - Q1" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="query">select l_returnflag, l_linestatus, sum(l_quantity) as sum_qty, sum(l_extendedprice) as sum_base_price, sum(l_extendedprice * (1 - l_discount)) as sum_disc_price, sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge, avg(l_quantity) as avg_qty, avg(l_extendedprice) as avg_price, avg(l_discount) as avg_disc, count(*) as count_order from lineitem where l_tenant_id = 20 and l_shipdate &lt;= date &apos;1998-12-01&apos; - interval &apos;80&apos; day group by l_returnflag, l_linestatus order by l_returnflag, l_linestatus;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T20 - Q2" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select s_acctbal, s_name, n_name, p_partkey, p_mfgr, s_address, s_phone, s_comment from part, supplier, partsupp, nation, region where p_tenant_id = 20 and s_tenant_id = 20 and ps_tenant_id = 20 and p_partkey = ps_partkey and s_suppkey = ps_suppkey and p_size = 42 and p_type like &apos;%TIN&apos; and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;ASIA&apos; and ps_supplycost = ( select min(ps_supplycost) from partsupp, supplier, nation, region where ps_tenant_id = 20 and s_tenant_id = 20 and p_partkey = ps_partkey and s_suppkey = ps_suppkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;ASIA&apos; ) order by s_acctbal desc, n_name, s_name, p_partkey limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T20 - Q3" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select l_orderkey, sum(l_extendedprice * (1 - l_discount)) as revenue, o_orderdate, o_shippriority from customer, orders, lineitem where c_tenant_id = 20 and o_tenant_id = 20 and l_tenant_id = 20 and c_mktsegment = &apos;MACHINERY&apos; and c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate &lt; date &apos;1995-03-17&apos; and l_shipdate &gt; date &apos;1995-03-17&apos; group by l_orderkey, o_orderdate, o_shippriority order by revenue desc, o_orderdate limit 10;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T20 - Q4" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select o_orderpriority, count(*) as order_count from orders where o_tenant_id = 20 and o_orderdate &gt;= date &apos;1995-07-01&apos; and o_orderdate &lt; date &apos;1995-07-01&apos; + interval &apos;3&apos; month and exists ( select * from lineitem where l_tenant_id = 20 and l_orderkey = o_orderkey and l_commitdate &lt; l_receiptdate ) group by o_orderpriority order by o_orderpriority;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T20 - Q5" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select n_name, sum(l_extendedprice * (1 - l_discount)) as revenue from customer, orders, lineitem, supplier, nation, region where c_tenant_id = 20 and o_tenant_id = 20 and l_tenant_id = 20 and s_tenant_id = 20 and c_custkey = o_custkey and l_orderkey = o_orderkey and l_suppkey = s_suppkey and c_nationkey = s_nationkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; and o_orderdate &gt;= date &apos;1996-01-01&apos; and o_orderdate &lt; date &apos;1996-01-01&apos; + interval &apos;1&apos; year group by n_name order by revenue desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T20 - Q6" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select sum(l_extendedprice * l_discount) as revenue from lineitem where l_tenant_id = 20 and l_shipdate &gt;= date &apos;1996-01-01&apos; and l_shipdate &lt; date &apos;1996-01-01&apos; + interval &apos;1&apos; year and l_discount between 0.02 - 0.01 and 0.02 + 0.01 and l_quantity &lt; 25;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T20 - Q7" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select supp_nation, cust_nation, l_year, sum(volume) as revenue from ( select n1.n_name as supp_nation, n2.n_name as cust_nation, extract(year from l_shipdate) as l_year, l_extendedprice * (1 - l_discount) as volume from supplier, lineitem, orders, customer, nation n1, nation n2 where s_tenant_id = 20 and l_tenant_id = 20 and o_tenant_id = 20 and c_tenant_id = 20 and s_suppkey = l_suppkey and o_orderkey = l_orderkey and c_custkey = o_custkey and s_nationkey = n1.n_nationkey and c_nationkey = n2.n_nationkey and ( (n1.n_name = &apos;ALGERIA&apos; and n2.n_name = &apos;RUSSIA&apos;) or (n1.n_name = &apos;RUSSIA&apos; and n2.n_name = &apos;ALGERIA&apos;) ) and l_shipdate between date &apos;1995-01-01&apos; and date &apos;1996-12-31&apos; ) as shipping group by supp_nation, cust_nation, l_year order by supp_nation, cust_nation, l_year;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T20 - Q8" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select o_year, sum(case when nation = &apos;RUSSIA&apos; then volume else 0 end) / sum(volume) as mkt_share from ( select extract(year from o_orderdate) as o_year, l_extendedprice * (1 - l_discount) as volume, n2.n_name as nation from part, supplier, lineitem, orders, customer, nation n1, nation n2, region where p_tenant_id = 20 and s_tenant_id = 20 and l_tenant_id = 20 and o_tenant_id = 20 and c_tenant_id = 20 and p_partkey = l_partkey and s_suppkey = l_suppkey and l_orderkey = o_orderkey and o_custkey = c_custkey and c_nationkey = n1.n_nationkey and n1.n_regionkey = r_regionkey and r_name = &apos;EUROPE&apos; and s_nationkey = n2.n_nationkey and o_orderdate between date &apos;1995-01-01&apos; and date &apos;1996-12-31&apos; and p_type = &apos;SMALL PLATED BRASS&apos; ) as all_nations group by o_year order by o_year;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T20 - Q9" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select nation, o_year, sum(amount) as sum_profit from ( select n_name as nation, extract(year from o_orderdate) as o_year, l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity as amount from part, supplier, lineitem, partsupp, orders, nation where p_tenant_id = 20 and s_tenant_id = 20 and l_tenant_id = 20 and ps_tenant_id = 20 and o_tenant_id = 20 and s_suppkey = l_suppkey and ps_suppkey = l_suppkey and ps_partkey = l_partkey and p_partkey = l_partkey and o_orderkey = l_orderkey and s_nationkey = n_nationkey and p_name like &apos;%dim%&apos; ) as profit group by nation, o_year order by nation, o_year desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T20 - Q10" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_custkey, c_name, sum(l_extendedprice * (1 - l_discount)) as revenue, c_acctbal, n_name, c_address, c_phone, c_comment from customer, orders, lineitem, nation where c_tenant_id = 20 and o_tenant_id = 20 and l_tenant_id = 20 and c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate &gt;= date &apos;1994-03-01&apos; and o_orderdate &lt; date &apos;1994-03-01&apos; + interval &apos;3&apos; month and l_returnflag = &apos;R&apos; and c_nationkey = n_nationkey group by c_custkey, c_name, c_acctbal, c_phone, n_name, c_address, c_comment order by revenue desc limit 20;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T20 - Q11" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select ps_partkey, sum(ps_supplycost * ps_availqty) as value from partsupp, supplier, nation where ps_tenant_id = 20 and s_tenant_id = 20 and ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = &apos;ARGENTINA&apos; group by ps_partkey having sum(ps_supplycost * ps_availqty) &gt; ( select sum(ps_supplycost * ps_availqty) * 0.0000003636 from partsupp, supplier, nation where ps_tenant_id = 20 and s_tenant_id = 20 and ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = &apos;ARGENTINA&apos; ) order by value desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T20 - Q12" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select l_shipmode, sum(case when o_orderpriority = &apos;1-URGENT&apos; or o_orderpriority = &apos;2-HIGH&apos; then 1 else 0 end) as high_line_count, sum(case when o_orderpriority &lt;&gt; &apos;1-URGENT&apos; and o_orderpriority &lt;&gt; &apos;2-HIGH&apos; then 1 else 0 end) as low_line_count from orders, lineitem where o_tenant_id = 20 and l_tenant_id = 20 and o_orderkey = l_orderkey and l_shipmode in (&apos;SHIP&apos;, &apos;FOB&apos;) and l_commitdate &lt; l_receiptdate and l_shipdate &lt; l_commitdate and l_receiptdate &gt;= date &apos;1993-01-01&apos; and l_receiptdate &lt; date &apos;1993-01-01&apos; + interval &apos;1&apos; year group by l_shipmode order by l_shipmode;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T20 - Q13" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_count, count(*) as custdist from ( select c_custkey, count(o_orderkey) from customer left outer join orders on c_custkey = o_custkey and o_comment not like &apos;%express%packages%&apos; where c_tenant_id = 20 group by c_custkey ) as c_orders (c_custkey, c_count) group by c_count order by custdist desc, c_count desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T20 - Q14" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select 100.00 * sum(case when p_type like &apos;PROMO%&apos; then l_extendedprice * (1 - l_discount) else 0 end) / sum(l_extendedprice * (1 - l_discount)) as promo_revenue from lineitem, part where l_tenant_id = 20 and p_tenant_id = 20 and l_partkey = p_partkey and l_shipdate &gt;= date &apos;1993-05-01&apos; and l_shipdate &lt; date &apos;1993-05-01&apos; + interval &apos;1&apos; month;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T20 - Q15" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Callable Statement</stringProp>
            <stringProp name="query">create view revenue0 (supplier_no, total_revenue) as select l_suppkey, sum(l_extendedprice * (1 - l_discount)) from lineitem where l_tenant_id = 20 and l_shipdate &gt;= date &apos;1993-12-01&apos; and l_shipdate &lt; date &apos;1993-12-01&apos; + interval &apos;3&apos; month group by l_suppkey; select s_suppkey, s_name, s_address, s_phone, total_revenue from supplier, revenue0 where s_tenant_id = 20 and s_suppkey = supplier_no and total_revenue = ( select max(total_revenue) from revenue0 ) order by s_suppkey; drop view revenue0;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T20 - Q16" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select p_brand, p_type, p_size, count(distinct ps_suppkey) as supplier_cnt from partsupp, part where ps_tenant_id = 20 and p_tenant_id = 20 and p_partkey = ps_partkey and p_brand &lt;&gt; &apos;Brand#52&apos; and p_type not like &apos;STANDARD PLATED%&apos; and p_size in (50, 23, 43, 18, 41, 10, 37, 6) and ps_suppkey not in ( select s_suppkey from supplier where s_tenant_id = 20 and s_comment like &apos;%Customer%Complaints%&apos; ) group by p_brand, p_type, p_size order by supplier_cnt desc, p_brand, p_type, p_size;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T20 - Q18" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice, sum(l_quantity) from customer, orders, lineitem where c_tenant_id = 20 and o_tenant_id = 20 and l_tenant_id = 20 and o_orderkey in ( select l_orderkey from lineitem where l_tenant_id = 20 group by l_orderkey having sum(l_quantity) &gt; 312 ) and c_custkey = o_custkey and o_orderkey = l_orderkey group by c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice order by o_totalprice desc, o_orderdate limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T20 - Q19" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select sum(l_extendedprice* (1 - l_discount)) as revenue from lineitem, part where l_tenant_id = 20 and p_tenant_id = 20 and (( p_partkey = l_partkey and p_brand = &apos;Brand#53&apos; and p_container in (&apos;SM CasE&apos;, &apos;SM BOX&apos;, &apos;SM PACK&apos;, &apos;SM PKG&apos;) and l_quantity &gt;= 7 and l_quantity &lt;= 7 + 10 and p_size between 1 and 5 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ) or ( p_partkey = l_partkey and p_brand = &apos;Brand#52&apos; and p_container in (&apos;MED BAG&apos;, &apos;MED BOX&apos;, &apos;MED PKG&apos;, &apos;MED PACK&apos;) and l_quantity &gt;= 10 and l_quantity &lt;= 10 + 10 and p_size between 1 and 10 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ) or ( p_partkey = l_partkey and p_brand = &apos;Brand#41&apos; and p_container in (&apos;LG CasE&apos;, &apos;LG BOX&apos;, &apos;LG PACK&apos;, &apos;LG PKG&apos;) and l_quantity &gt;= 29 and l_quantity &lt;= 29 + 10 and p_size between 1 and 15 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos;));
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T20 - Q21" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select s_name, count(*) as numwait from supplier, lineitem l1, orders, nation where s_tenant_id = 20 and l1.l_tenant_id = 20 and o_tenant_id = 20 and s_suppkey = l1.l_suppkey and o_orderkey = l1.l_orderkey and o_orderstatus = &apos;F&apos; and l1.l_receiptdate &gt; l1.l_commitdate and exists ( select * from lineitem l2 where l2.l_tenant_id = 20 and l2.l_orderkey = l1.l_orderkey and l2.l_suppkey &lt;&gt; l1.l_suppkey ) and not exists ( select * from lineitem l3 where l3.l_tenant_id = 20 and l3.l_orderkey = l1.l_orderkey and l3.l_suppkey &lt;&gt; l1.l_suppkey and l3.l_receiptdate &gt; l3.l_commitdate ) and s_nationkey = n_nationkey and n_name = &apos;SAUDI ARABIA&apos; group by s_name order by numwait desc, s_name limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T20 - Q22" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select cntrycode, count(*) as numcust, sum(c_acctbal) as totacctbal from ( select substring(c_phone from 1 for 2) as cntrycode, c_acctbal from customer where c_tenant_id = 20 and substring(c_phone from 1 for 2) in (&apos;32&apos;, &apos;28&apos;, &apos;33&apos;, &apos;17&apos;, &apos;13&apos;, &apos;25&apos;, &apos;12&apos;) and c_acctbal &gt; ( select avg(c_acctbal) from customer where c_tenant_id = 20 and c_acctbal &gt; 0.00 and substring(c_phone from 1 for 2) in (&apos;32&apos;, &apos;28&apos;, &apos;33&apos;, &apos;17&apos;, &apos;13&apos;, &apos;25&apos;, &apos;12&apos;) ) and not exists ( select * from orders where o_tenant_id = 20 and o_custkey = c_custkey ) ) as custsale group by cntrycode order by cntrycode;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T20 - RF1" enabled="false">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO region (r_regionkey, r_name, r_comment) VALUES (123476241, &apos;AFRICA&apos;, &apos;lar deposits. blithely final packages cajole. regular&apos;);
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T20 - RF2" enabled="false">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">DELETE FROM region WHERE r_regionkey = 123476241;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="T21" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <RandomOrderController guiclass="RandomOrderControllerGui" testclass="RandomOrderController" testname="Random Order Controller" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T21 - Q1" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="query">select l_returnflag, l_linestatus, sum(l_quantity) as sum_qty, sum(l_extendedprice) as sum_base_price, sum(l_extendedprice * (1 - l_discount)) as sum_disc_price, sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge, avg(l_quantity) as avg_qty, avg(l_extendedprice) as avg_price, avg(l_discount) as avg_disc, count(*) as count_order from lineitem where l_tenant_id = 21 and l_shipdate &lt;= date &apos;1998-12-01&apos; - interval &apos;60&apos; day group by l_returnflag, l_linestatus order by l_returnflag, l_linestatus;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T21 - Q2" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select s_acctbal, s_name, n_name, p_partkey, p_mfgr, s_address, s_phone, s_comment from part, supplier, partsupp, nation, region where p_tenant_id = 21 and s_tenant_id = 21 and ps_tenant_id = 21 and p_partkey = ps_partkey and s_suppkey = ps_suppkey and p_size = 31 and p_type like &apos;%COPPER&apos; and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; and ps_supplycost = ( select min(ps_supplycost) from partsupp, supplier, nation, region where ps_tenant_id = 21 and s_tenant_id = 21 and p_partkey = ps_partkey and s_suppkey = ps_suppkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; ) order by s_acctbal desc, n_name, s_name, p_partkey limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T21 - Q3" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select l_orderkey, sum(l_extendedprice * (1 - l_discount)) as revenue, o_orderdate, o_shippriority from customer, orders, lineitem where c_tenant_id = 21 and o_tenant_id = 21 and l_tenant_id = 21 and c_mktsegment = &apos;BUILDING&apos; and c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate &lt; date &apos;1995-03-06&apos; and l_shipdate &gt; date &apos;1995-03-06&apos; group by l_orderkey, o_orderdate, o_shippriority order by revenue desc, o_orderdate limit 10;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T21 - Q4" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select o_orderpriority, count(*) as order_count from orders where o_tenant_id = 21 and o_orderdate &gt;= date &apos;1993-11-01&apos; and o_orderdate &lt; date &apos;1993-11-01&apos; + interval &apos;3&apos; month and exists ( select * from lineitem where l_tenant_id = 21 and l_orderkey = o_orderkey and l_commitdate &lt; l_receiptdate ) group by o_orderpriority order by o_orderpriority;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T21 - Q5" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select n_name, sum(l_extendedprice * (1 - l_discount)) as revenue from customer, orders, lineitem, supplier, nation, region where c_tenant_id = 21 and o_tenant_id = 21 and l_tenant_id = 21 and s_tenant_id = 21 and c_custkey = o_custkey and l_orderkey = o_orderkey and l_suppkey = s_suppkey and c_nationkey = s_nationkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; and o_orderdate &gt;= date &apos;1993-01-01&apos; and o_orderdate &lt; date &apos;1993-01-01&apos; + interval &apos;1&apos; year group by n_name order by revenue desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T21 - Q6" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select sum(l_extendedprice * l_discount) as revenue from lineitem where l_tenant_id = 21 and l_shipdate &gt;= date &apos;1993-01-01&apos; and l_shipdate &lt; date &apos;1993-01-01&apos; + interval &apos;1&apos; year and l_discount between 0.05 - 0.01 and 0.05 + 0.01 and l_quantity &lt; 24;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T21 - Q7" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select supp_nation, cust_nation, l_year, sum(volume) as revenue from ( select n1.n_name as supp_nation, n2.n_name as cust_nation, extract(year from l_shipdate) as l_year, l_extendedprice * (1 - l_discount) as volume from supplier, lineitem, orders, customer, nation n1, nation n2 where s_tenant_id = 21 and l_tenant_id = 21 and o_tenant_id = 21 and c_tenant_id = 21 and s_suppkey = l_suppkey and o_orderkey = l_orderkey and c_custkey = o_custkey and s_nationkey = n1.n_nationkey and c_nationkey = n2.n_nationkey and ( (n1.n_name = &apos;IRAN&apos; and n2.n_name = &apos;GERMANY&apos;) or (n1.n_name = &apos;GERMANY&apos; and n2.n_name = &apos;IRAN&apos;) ) and l_shipdate between date &apos;1995-01-01&apos; and date &apos;1996-12-31&apos; ) as shipping group by supp_nation, cust_nation, l_year order by supp_nation, cust_nation, l_year;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T21 - Q8" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select o_year, sum(case when nation = &apos;GERMANY&apos; then volume else 0 end) / sum(volume) as mkt_share from ( select extract(year from o_orderdate) as o_year, l_extendedprice * (1 - l_discount) as volume, n2.n_name as nation from part, supplier, lineitem, orders, customer, nation n1, nation n2, region where p_tenant_id = 21 and s_tenant_id = 21 and l_tenant_id = 21 and o_tenant_id = 21 and c_tenant_id = 21 and p_partkey = l_partkey and s_suppkey = l_suppkey and l_orderkey = o_orderkey and o_custkey = c_custkey and c_nationkey = n1.n_nationkey and n1.n_regionkey = r_regionkey and r_name = &apos;EUROPE&apos; and s_nationkey = n2.n_nationkey and o_orderdate between date &apos;1995-01-01&apos; and date &apos;1996-12-31&apos; and p_type = &apos;PROMO PLATED STEEL&apos; ) as all_nations group by o_year order by o_year;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T21 - Q9" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select nation, o_year, sum(amount) as sum_profit from ( select n_name as nation, extract(year from o_orderdate) as o_year, l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity as amount from part, supplier, lineitem, partsupp, orders, nation where p_tenant_id = 21 and s_tenant_id = 21 and l_tenant_id = 21 and ps_tenant_id = 21 and o_tenant_id = 21 and s_suppkey = l_suppkey and ps_suppkey = l_suppkey and ps_partkey = l_partkey and p_partkey = l_partkey and o_orderkey = l_orderkey and s_nationkey = n_nationkey and p_name like &apos;%tan%&apos; ) as profit group by nation, o_year order by nation, o_year desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T21 - Q10" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_custkey, c_name, sum(l_extendedprice * (1 - l_discount)) as revenue, c_acctbal, n_name, c_address, c_phone, c_comment from customer, orders, lineitem, nation where c_tenant_id = 21 and o_tenant_id = 21 and l_tenant_id = 21 and c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate &gt;= date &apos;1994-01-01&apos; and o_orderdate &lt; date &apos;1994-01-01&apos; + interval &apos;3&apos; month and l_returnflag = &apos;R&apos; and c_nationkey = n_nationkey group by c_custkey, c_name, c_acctbal, c_phone, n_name, c_address, c_comment order by revenue desc limit 20;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T21 - Q11" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select ps_partkey, sum(ps_supplycost * ps_availqty) as value from partsupp, supplier, nation where ps_tenant_id = 21 and s_tenant_id = 21 and ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = &apos;MOZAMBIQUE&apos; group by ps_partkey having sum(ps_supplycost * ps_availqty) &gt; ( select sum(ps_supplycost * ps_availqty) * 0.0000002331 from partsupp, supplier, nation where ps_tenant_id = 21 and s_tenant_id = 21 and ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = &apos;MOZAMBIQUE&apos; ) order by value desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T21 - Q12" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select l_shipmode, sum(case when o_orderpriority = &apos;1-URGENT&apos; or o_orderpriority = &apos;2-HIGH&apos; then 1 else 0 end) as high_line_count, sum(case when o_orderpriority &lt;&gt; &apos;1-URGENT&apos; and o_orderpriority &lt;&gt; &apos;2-HIGH&apos; then 1 else 0 end) as low_line_count from orders, lineitem where o_tenant_id = 21 and l_tenant_id = 21 and o_orderkey = l_orderkey and l_shipmode in (&apos;SHIP&apos;, &apos;RAIL&apos;) and l_commitdate &lt; l_receiptdate and l_shipdate &lt; l_commitdate and l_receiptdate &gt;= date &apos;1995-01-01&apos; and l_receiptdate &lt; date &apos;1995-01-01&apos; + interval &apos;1&apos; year group by l_shipmode order by l_shipmode;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T21 - Q13" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_count, count(*) as custdist from ( select c_custkey, count(o_orderkey) from customer left outer join orders on c_custkey = o_custkey and o_comment not like &apos;%express%requests%&apos; where c_tenant_id = 21 group by c_custkey ) as c_orders (c_custkey, c_count) group by c_count order by custdist desc, c_count desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T21 - Q14" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select 100.00 * sum(case when p_type like &apos;PROMO%&apos; then l_extendedprice * (1 - l_discount) else 0 end) / sum(l_extendedprice * (1 - l_discount)) as promo_revenue from lineitem, part where l_tenant_id = 21 and p_tenant_id = 21 and l_partkey = p_partkey and l_shipdate &gt;= date &apos;1994-12-01&apos; and l_shipdate &lt; date &apos;1994-12-01&apos; + interval &apos;1&apos; month;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T21 - Q15" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Callable Statement</stringProp>
            <stringProp name="query">create view revenue0 (supplier_no, total_revenue) as select l_suppkey, sum(l_extendedprice * (1 - l_discount)) from lineitem where l_tenant_id = 21 and l_shipdate &gt;= date &apos;1996-07-01&apos; and l_shipdate &lt; date &apos;1996-07-01&apos; + interval &apos;3&apos; month group by l_suppkey; select s_suppkey, s_name, s_address, s_phone, total_revenue from supplier, revenue0 where s_tenant_id = 21 and s_suppkey = supplier_no and total_revenue = ( select max(total_revenue) from revenue0 ) order by s_suppkey; drop view revenue0;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T21 - Q16" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select p_brand, p_type, p_size, count(distinct ps_suppkey) as supplier_cnt from partsupp, part where ps_tenant_id = 21 and p_tenant_id = 21 and p_partkey = ps_partkey and p_brand &lt;&gt; &apos;Brand#53&apos; and p_type not like &apos;MEDIUM BURNISHED%&apos; and p_size in (20, 48, 2, 43, 21, 14, 44, 33) and ps_suppkey not in ( select s_suppkey from supplier where s_tenant_id = 21 and s_comment like &apos;%Customer%Complaints%&apos; ) group by p_brand, p_type, p_size order by supplier_cnt desc, p_brand, p_type, p_size;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T21 - Q18" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice, sum(l_quantity) from customer, orders, lineitem where c_tenant_id = 21 and o_tenant_id = 21 and l_tenant_id = 21 and o_orderkey in ( select l_orderkey from lineitem where l_tenant_id = 21 group by l_orderkey having sum(l_quantity) &gt; 313 ) and c_custkey = o_custkey and o_orderkey = l_orderkey group by c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice order by o_totalprice desc, o_orderdate limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T21 - Q19" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select sum(l_extendedprice* (1 - l_discount)) as revenue from lineitem, part where l_tenant_id = 21 and p_tenant_id = 21 and (( p_partkey = l_partkey and p_brand = &apos;Brand#25&apos; and p_container in (&apos;SM CasE&apos;, &apos;SM BOX&apos;, &apos;SM PACK&apos;, &apos;SM PKG&apos;) and l_quantity &gt;= 9 and l_quantity &lt;= 9 + 10 and p_size between 1 and 5 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ) or ( p_partkey = l_partkey and p_brand = &apos;Brand#55&apos; and p_container in (&apos;MED BAG&apos;, &apos;MED BOX&apos;, &apos;MED PKG&apos;, &apos;MED PACK&apos;) and l_quantity &gt;= 16 and l_quantity &lt;= 16 + 10 and p_size between 1 and 10 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ) or ( p_partkey = l_partkey and p_brand = &apos;Brand#21&apos; and p_container in (&apos;LG CasE&apos;, &apos;LG BOX&apos;, &apos;LG PACK&apos;, &apos;LG PKG&apos;) and l_quantity &gt;= 28 and l_quantity &lt;= 28 + 10 and p_size between 1 and 15 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos;));
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T21 - Q21" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select s_name, count(*) as numwait from supplier, lineitem l1, orders, nation where s_tenant_id = 21 and l1.l_tenant_id = 21 and o_tenant_id = 21 and s_suppkey = l1.l_suppkey and o_orderkey = l1.l_orderkey and o_orderstatus = &apos;F&apos; and l1.l_receiptdate &gt; l1.l_commitdate and exists ( select * from lineitem l2 where l2.l_tenant_id = 21 and l2.l_orderkey = l1.l_orderkey and l2.l_suppkey &lt;&gt; l1.l_suppkey ) and not exists ( select * from lineitem l3 where l3.l_tenant_id = 21 and l3.l_orderkey = l1.l_orderkey and l3.l_suppkey &lt;&gt; l1.l_suppkey and l3.l_receiptdate &gt; l3.l_commitdate ) and s_nationkey = n_nationkey and n_name = &apos;UNITED KINGDOM&apos; group by s_name order by numwait desc, s_name limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T21 - Q22" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select cntrycode, count(*) as numcust, sum(c_acctbal) as totacctbal from ( select substring(c_phone from 1 for 2) as cntrycode, c_acctbal from customer where c_tenant_id = 21 and substring(c_phone from 1 for 2) in (&apos;30&apos;, &apos;19&apos;, &apos;16&apos;, &apos;31&apos;, &apos;26&apos;, &apos;13&apos;, &apos;12&apos;) and c_acctbal &gt; ( select avg(c_acctbal) from customer where c_tenant_id = 21 and c_acctbal &gt; 0.00 and substring(c_phone from 1 for 2) in (&apos;30&apos;, &apos;19&apos;, &apos;16&apos;, &apos;31&apos;, &apos;26&apos;, &apos;13&apos;, &apos;12&apos;) ) and not exists ( select * from orders where o_tenant_id = 21 and o_custkey = c_custkey ) ) as custsale group by cntrycode order by cntrycode;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T21 - RF1" enabled="false">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO region (r_regionkey, r_name, r_comment) VALUES (123476241, &apos;AFRICA&apos;, &apos;lar deposits. blithely final packages cajole. regular&apos;);
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T21 - RF2" enabled="false">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">DELETE FROM region WHERE r_regionkey = 123476241;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="T22" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <RandomOrderController guiclass="RandomOrderControllerGui" testclass="RandomOrderController" testname="Random Order Controller" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T22 - Q1" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="query">select l_returnflag, l_linestatus, sum(l_quantity) as sum_qty, sum(l_extendedprice) as sum_base_price, sum(l_extendedprice * (1 - l_discount)) as sum_disc_price, sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge, avg(l_quantity) as avg_qty, avg(l_extendedprice) as avg_price, avg(l_discount) as avg_disc, count(*) as count_order from lineitem where l_tenant_id = 22 and l_shipdate &lt;= date &apos;1998-12-01&apos; - interval &apos;61&apos; day group by l_returnflag, l_linestatus order by l_returnflag, l_linestatus;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T22 - Q2" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select s_acctbal, s_name, n_name, p_partkey, p_mfgr, s_address, s_phone, s_comment from part, supplier, partsupp, nation, region where p_tenant_id = 22 and s_tenant_id = 22 and ps_tenant_id = 22 and p_partkey = ps_partkey and s_suppkey = ps_suppkey and p_size = 14 and p_type like &apos;%BRASS&apos; and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; and ps_supplycost = ( select min(ps_supplycost) from partsupp, supplier, nation, region where ps_tenant_id = 22 and s_tenant_id = 22 and p_partkey = ps_partkey and s_suppkey = ps_suppkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; ) order by s_acctbal desc, n_name, s_name, p_partkey limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T22 - Q3" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select l_orderkey, sum(l_extendedprice * (1 - l_discount)) as revenue, o_orderdate, o_shippriority from customer, orders, lineitem where c_tenant_id = 22 and o_tenant_id = 22 and l_tenant_id = 22 and c_mktsegment = &apos;BUILDING&apos; and c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate &lt; date &apos;1995-03-06&apos; and l_shipdate &gt; date &apos;1995-03-06&apos; group by l_orderkey, o_orderdate, o_shippriority order by revenue desc, o_orderdate limit 10;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T22 - Q4" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select o_orderpriority, count(*) as order_count from orders where o_tenant_id = 22 and o_orderdate &gt;= date &apos;1993-12-01&apos; and o_orderdate &lt; date &apos;1993-12-01&apos; + interval &apos;3&apos; month and exists ( select * from lineitem where l_tenant_id = 22 and l_orderkey = o_orderkey and l_commitdate &lt; l_receiptdate ) group by o_orderpriority order by o_orderpriority;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T22 - Q5" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select n_name, sum(l_extendedprice * (1 - l_discount)) as revenue from customer, orders, lineitem, supplier, nation, region where c_tenant_id = 22 and o_tenant_id = 22 and l_tenant_id = 22 and s_tenant_id = 22 and c_custkey = o_custkey and l_orderkey = o_orderkey and l_suppkey = s_suppkey and c_nationkey = s_nationkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; and o_orderdate &gt;= date &apos;1994-01-01&apos; and o_orderdate &lt; date &apos;1994-01-01&apos; + interval &apos;1&apos; year group by n_name order by revenue desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T22 - Q6" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select sum(l_extendedprice * l_discount) as revenue from lineitem where l_tenant_id = 22 and l_shipdate &gt;= date &apos;1994-01-01&apos; and l_shipdate &lt; date &apos;1994-01-01&apos; + interval &apos;1&apos; year and l_discount between 0.09 - 0.01 and 0.09 + 0.01 and l_quantity &lt; 25;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T22 - Q7" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select supp_nation, cust_nation, l_year, sum(volume) as revenue from ( select n1.n_name as supp_nation, n2.n_name as cust_nation, extract(year from l_shipdate) as l_year, l_extendedprice * (1 - l_discount) as volume from supplier, lineitem, orders, customer, nation n1, nation n2 where s_tenant_id = 22 and l_tenant_id = 22 and o_tenant_id = 22 and c_tenant_id = 22 and s_suppkey = l_suppkey and o_orderkey = l_orderkey and c_custkey = o_custkey and s_nationkey = n1.n_nationkey and c_nationkey = n2.n_nationkey and ( (n1.n_name = &apos;RUSSIA&apos; and n2.n_name = &apos;ROMANIA&apos;) or (n1.n_name = &apos;ROMANIA&apos; and n2.n_name = &apos;RUSSIA&apos;) ) and l_shipdate between date &apos;1995-01-01&apos; and date &apos;1996-12-31&apos; ) as shipping group by supp_nation, cust_nation, l_year order by supp_nation, cust_nation, l_year;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T22 - Q8" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select o_year, sum(case when nation = &apos;ROMANIA&apos; then volume else 0 end) / sum(volume) as mkt_share from ( select extract(year from o_orderdate) as o_year, l_extendedprice * (1 - l_discount) as volume, n2.n_name as nation from part, supplier, lineitem, orders, customer, nation n1, nation n2, region where p_tenant_id = 22 and s_tenant_id = 22 and l_tenant_id = 22 and o_tenant_id = 22 and c_tenant_id = 22 and p_partkey = l_partkey and s_suppkey = l_suppkey and l_orderkey = o_orderkey and o_custkey = c_custkey and c_nationkey = n1.n_nationkey and n1.n_regionkey = r_regionkey and r_name = &apos;EUROPE&apos; and s_nationkey = n2.n_nationkey and o_orderdate between date &apos;1995-01-01&apos; and date &apos;1996-12-31&apos; and p_type = &apos;PROMO ANODIZED TIN&apos; ) as all_nations group by o_year order by o_year;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T22 - Q9" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select nation, o_year, sum(amount) as sum_profit from ( select n_name as nation, extract(year from o_orderdate) as o_year, l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity as amount from part, supplier, lineitem, partsupp, orders, nation where p_tenant_id = 22 and s_tenant_id = 22 and l_tenant_id = 22 and ps_tenant_id = 22 and o_tenant_id = 22 and s_suppkey = l_suppkey and ps_suppkey = l_suppkey and ps_partkey = l_partkey and p_partkey = l_partkey and o_orderkey = l_orderkey and s_nationkey = n_nationkey and p_name like &apos;%sienna%&apos; ) as profit group by nation, o_year order by nation, o_year desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T22 - Q10" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_custkey, c_name, sum(l_extendedprice * (1 - l_discount)) as revenue, c_acctbal, n_name, c_address, c_phone, c_comment from customer, orders, lineitem, nation where c_tenant_id = 22 and o_tenant_id = 22 and l_tenant_id = 22 and c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate &gt;= date &apos;1993-04-01&apos; and o_orderdate &lt; date &apos;1993-04-01&apos; + interval &apos;3&apos; month and l_returnflag = &apos;R&apos; and c_nationkey = n_nationkey group by c_custkey, c_name, c_acctbal, c_phone, n_name, c_address, c_comment order by revenue desc limit 20;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T22 - Q11" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select ps_partkey, sum(ps_supplycost * ps_availqty) as value from partsupp, supplier, nation where ps_tenant_id = 22 and s_tenant_id = 22 and ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = &apos;INDONESIA&apos; group by ps_partkey having sum(ps_supplycost * ps_availqty) &gt; ( select sum(ps_supplycost * ps_availqty) * 0.0000090909 from partsupp, supplier, nation where ps_tenant_id = 22 and s_tenant_id = 22 and ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = &apos;INDONESIA&apos; ) order by value desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T22 - Q12" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select l_shipmode, sum(case when o_orderpriority = &apos;1-URGENT&apos; or o_orderpriority = &apos;2-HIGH&apos; then 1 else 0 end) as high_line_count, sum(case when o_orderpriority &lt;&gt; &apos;1-URGENT&apos; and o_orderpriority &lt;&gt; &apos;2-HIGH&apos; then 1 else 0 end) as low_line_count from orders, lineitem where o_tenant_id = 22 and l_tenant_id = 22 and o_orderkey = l_orderkey and l_shipmode in (&apos;RAIL&apos;, &apos;TRUCK&apos;) and l_commitdate &lt; l_receiptdate and l_shipdate &lt; l_commitdate and l_receiptdate &gt;= date &apos;1995-01-01&apos; and l_receiptdate &lt; date &apos;1995-01-01&apos; + interval &apos;1&apos; year group by l_shipmode order by l_shipmode;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T22 - Q13" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_count, count(*) as custdist from ( select c_custkey, count(o_orderkey) from customer left outer join orders on c_custkey = o_custkey and o_comment not like &apos;%pending%accounts%&apos; where c_tenant_id = 22 group by c_custkey ) as c_orders (c_custkey, c_count) group by c_count order by custdist desc, c_count desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T22 - Q14" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select 100.00 * sum(case when p_type like &apos;PROMO%&apos; then l_extendedprice * (1 - l_discount) else 0 end) / sum(l_extendedprice * (1 - l_discount)) as promo_revenue from lineitem, part where l_tenant_id = 22 and p_tenant_id = 22 and l_partkey = p_partkey and l_shipdate &gt;= date &apos;1995-12-01&apos; and l_shipdate &lt; date &apos;1995-12-01&apos; + interval &apos;1&apos; month;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T22 - Q15" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Callable Statement</stringProp>
            <stringProp name="query">create view revenue0 (supplier_no, total_revenue) as select l_suppkey, sum(l_extendedprice * (1 - l_discount)) from lineitem where l_tenant_id = 22 and l_shipdate &gt;= date &apos;1994-03-01&apos; and l_shipdate &lt; date &apos;1994-03-01&apos; + interval &apos;3&apos; month group by l_suppkey; select s_suppkey, s_name, s_address, s_phone, total_revenue from supplier, revenue0 where s_tenant_id = 22 and s_suppkey = supplier_no and total_revenue = ( select max(total_revenue) from revenue0 ) order by s_suppkey; drop view revenue0;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T22 - Q16" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select p_brand, p_type, p_size, count(distinct ps_suppkey) as supplier_cnt from partsupp, part where ps_tenant_id = 22 and p_tenant_id = 22 and p_partkey = ps_partkey and p_brand &lt;&gt; &apos;Brand#52&apos; and p_type not like &apos;LARGE BRUSHED%&apos; and p_size in (20, 35, 34, 50, 23, 28, 48, 17) and ps_suppkey not in ( select s_suppkey from supplier where s_tenant_id = 22 and s_comment like &apos;%Customer%Complaints%&apos; ) group by p_brand, p_type, p_size order by supplier_cnt desc, p_brand, p_type, p_size;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T22 - Q18" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice, sum(l_quantity) from customer, orders, lineitem where c_tenant_id = 22 and o_tenant_id = 22 and l_tenant_id = 22 and o_orderkey in ( select l_orderkey from lineitem where l_tenant_id = 22 group by l_orderkey having sum(l_quantity) &gt; 314 ) and c_custkey = o_custkey and o_orderkey = l_orderkey group by c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice order by o_totalprice desc, o_orderdate limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T22 - Q19" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select sum(l_extendedprice* (1 - l_discount)) as revenue from lineitem, part where l_tenant_id = 22 and p_tenant_id = 22 and (( p_partkey = l_partkey and p_brand = &apos;Brand#24&apos; and p_container in (&apos;SM CasE&apos;, &apos;SM BOX&apos;, &apos;SM PACK&apos;, &apos;SM PKG&apos;) and l_quantity &gt;= 10 and l_quantity &lt;= 10 + 10 and p_size between 1 and 5 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ) or ( p_partkey = l_partkey and p_brand = &apos;Brand#45&apos; and p_container in (&apos;MED BAG&apos;, &apos;MED BOX&apos;, &apos;MED PKG&apos;, &apos;MED PACK&apos;) and l_quantity &gt;= 12 and l_quantity &lt;= 12 + 10 and p_size between 1 and 10 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ) or ( p_partkey = l_partkey and p_brand = &apos;Brand#33&apos; and p_container in (&apos;LG CasE&apos;, &apos;LG BOX&apos;, &apos;LG PACK&apos;, &apos;LG PKG&apos;) and l_quantity &gt;= 30 and l_quantity &lt;= 30 + 10 and p_size between 1 and 15 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos;));
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T22 - Q21" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select s_name, count(*) as numwait from supplier, lineitem l1, orders, nation where s_tenant_id = 22 and l1.l_tenant_id = 22 and o_tenant_id = 22 and s_suppkey = l1.l_suppkey and o_orderkey = l1.l_orderkey and o_orderstatus = &apos;F&apos; and l1.l_receiptdate &gt; l1.l_commitdate and exists ( select * from lineitem l2 where l2.l_tenant_id = 22 and l2.l_orderkey = l1.l_orderkey and l2.l_suppkey &lt;&gt; l1.l_suppkey ) and not exists ( select * from lineitem l3 where l3.l_tenant_id = 22 and l3.l_orderkey = l1.l_orderkey and l3.l_suppkey &lt;&gt; l1.l_suppkey and l3.l_receiptdate &gt; l3.l_commitdate ) and s_nationkey = n_nationkey and n_name = &apos;MOZAMBIQUE&apos; group by s_name order by numwait desc, s_name limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T22 - Q22" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select cntrycode, count(*) as numcust, sum(c_acctbal) as totacctbal from ( select substring(c_phone from 1 for 2) as cntrycode, c_acctbal from customer where c_tenant_id = 22 and substring(c_phone from 1 for 2) in (&apos;34&apos;, &apos;20&apos;, &apos;23&apos;, &apos;33&apos;, &apos;18&apos;, &apos;10&apos;, &apos;30&apos;) and c_acctbal &gt; ( select avg(c_acctbal) from customer where c_tenant_id = 22 and c_acctbal &gt; 0.00 and substring(c_phone from 1 for 2) in (&apos;34&apos;, &apos;20&apos;, &apos;23&apos;, &apos;33&apos;, &apos;18&apos;, &apos;10&apos;, &apos;30&apos;) ) and not exists ( select * from orders where o_tenant_id = 22 and o_custkey = c_custkey ) ) as custsale group by cntrycode order by cntrycode;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T22 - RF1" enabled="false">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO region (r_regionkey, r_name, r_comment) VALUES (123476241, &apos;AFRICA&apos;, &apos;lar deposits. blithely final packages cajole. regular&apos;);
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T22 - RF2" enabled="false">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">DELETE FROM region WHERE r_regionkey = 123476241;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="T23" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <RandomOrderController guiclass="RandomOrderControllerGui" testclass="RandomOrderController" testname="Random Order Controller" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T23 - Q1" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="query">select l_returnflag, l_linestatus, sum(l_quantity) as sum_qty, sum(l_extendedprice) as sum_base_price, sum(l_extendedprice * (1 - l_discount)) as sum_disc_price, sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge, avg(l_quantity) as avg_qty, avg(l_extendedprice) as avg_price, avg(l_discount) as avg_disc, count(*) as count_order from lineitem where l_tenant_id = 23 and l_shipdate &lt;= date &apos;1998-12-01&apos; - interval &apos;61&apos; day group by l_returnflag, l_linestatus order by l_returnflag, l_linestatus;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T23 - Q2" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select s_acctbal, s_name, n_name, p_partkey, p_mfgr, s_address, s_phone, s_comment from part, supplier, partsupp, nation, region where p_tenant_id = 23 and s_tenant_id = 23 and ps_tenant_id = 23 and p_partkey = ps_partkey and s_suppkey = ps_suppkey and p_size = 14 and p_type like &apos;%BRASS&apos; and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; and ps_supplycost = ( select min(ps_supplycost) from partsupp, supplier, nation, region where ps_tenant_id = 23 and s_tenant_id = 23 and p_partkey = ps_partkey and s_suppkey = ps_suppkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; ) order by s_acctbal desc, n_name, s_name, p_partkey limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T23 - Q3" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select l_orderkey, sum(l_extendedprice * (1 - l_discount)) as revenue, o_orderdate, o_shippriority from customer, orders, lineitem where c_tenant_id = 23 and o_tenant_id = 23 and l_tenant_id = 23 and c_mktsegment = &apos;BUILDING&apos; and c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate &lt; date &apos;1995-03-06&apos; and l_shipdate &gt; date &apos;1995-03-06&apos; group by l_orderkey, o_orderdate, o_shippriority order by revenue desc, o_orderdate limit 10;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T23 - Q4" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select o_orderpriority, count(*) as order_count from orders where o_tenant_id = 23 and o_orderdate &gt;= date &apos;1993-12-01&apos; and o_orderdate &lt; date &apos;1993-12-01&apos; + interval &apos;3&apos; month and exists ( select * from lineitem where l_tenant_id = 23 and l_orderkey = o_orderkey and l_commitdate &lt; l_receiptdate ) group by o_orderpriority order by o_orderpriority;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T23 - Q5" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select n_name, sum(l_extendedprice * (1 - l_discount)) as revenue from customer, orders, lineitem, supplier, nation, region where c_tenant_id = 23 and o_tenant_id = 23 and l_tenant_id = 23 and s_tenant_id = 23 and c_custkey = o_custkey and l_orderkey = o_orderkey and l_suppkey = s_suppkey and c_nationkey = s_nationkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; and o_orderdate &gt;= date &apos;1994-01-01&apos; and o_orderdate &lt; date &apos;1994-01-01&apos; + interval &apos;1&apos; year group by n_name order by revenue desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T23 - Q6" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select sum(l_extendedprice * l_discount) as revenue from lineitem where l_tenant_id = 23 and l_shipdate &gt;= date &apos;1994-01-01&apos; and l_shipdate &lt; date &apos;1994-01-01&apos; + interval &apos;1&apos; year and l_discount between 0.09 - 0.01 and 0.09 + 0.01 and l_quantity &lt; 25;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T23 - Q7" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select supp_nation, cust_nation, l_year, sum(volume) as revenue from ( select n1.n_name as supp_nation, n2.n_name as cust_nation, extract(year from l_shipdate) as l_year, l_extendedprice * (1 - l_discount) as volume from supplier, lineitem, orders, customer, nation n1, nation n2 where s_tenant_id = 23 and l_tenant_id = 23 and o_tenant_id = 23 and c_tenant_id = 23 and s_suppkey = l_suppkey and o_orderkey = l_orderkey and c_custkey = o_custkey and s_nationkey = n1.n_nationkey and c_nationkey = n2.n_nationkey and ( (n1.n_name = &apos;RUSSIA&apos; and n2.n_name = &apos;ROMANIA&apos;) or (n1.n_name = &apos;ROMANIA&apos; and n2.n_name = &apos;RUSSIA&apos;) ) and l_shipdate between date &apos;1995-01-01&apos; and date &apos;1996-12-31&apos; ) as shipping group by supp_nation, cust_nation, l_year order by supp_nation, cust_nation, l_year;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T23 - Q8" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select o_year, sum(case when nation = &apos;ROMANIA&apos; then volume else 0 end) / sum(volume) as mkt_share from ( select extract(year from o_orderdate) as o_year, l_extendedprice * (1 - l_discount) as volume, n2.n_name as nation from part, supplier, lineitem, orders, customer, nation n1, nation n2, region where p_tenant_id = 23 and s_tenant_id = 23 and l_tenant_id = 23 and o_tenant_id = 23 and c_tenant_id = 23 and p_partkey = l_partkey and s_suppkey = l_suppkey and l_orderkey = o_orderkey and o_custkey = c_custkey and c_nationkey = n1.n_nationkey and n1.n_regionkey = r_regionkey and r_name = &apos;EUROPE&apos; and s_nationkey = n2.n_nationkey and o_orderdate between date &apos;1995-01-01&apos; and date &apos;1996-12-31&apos; and p_type = &apos;PROMO ANODIZED TIN&apos; ) as all_nations group by o_year order by o_year;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T23 - Q9" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select nation, o_year, sum(amount) as sum_profit from ( select n_name as nation, extract(year from o_orderdate) as o_year, l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity as amount from part, supplier, lineitem, partsupp, orders, nation where p_tenant_id = 23 and s_tenant_id = 23 and l_tenant_id = 23 and ps_tenant_id = 23 and o_tenant_id = 23 and s_suppkey = l_suppkey and ps_suppkey = l_suppkey and ps_partkey = l_partkey and p_partkey = l_partkey and o_orderkey = l_orderkey and s_nationkey = n_nationkey and p_name like &apos;%sienna%&apos; ) as profit group by nation, o_year order by nation, o_year desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T23 - Q10" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_custkey, c_name, sum(l_extendedprice * (1 - l_discount)) as revenue, c_acctbal, n_name, c_address, c_phone, c_comment from customer, orders, lineitem, nation where c_tenant_id = 23 and o_tenant_id = 23 and l_tenant_id = 23 and c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate &gt;= date &apos;1993-04-01&apos; and o_orderdate &lt; date &apos;1993-04-01&apos; + interval &apos;3&apos; month and l_returnflag = &apos;R&apos; and c_nationkey = n_nationkey group by c_custkey, c_name, c_acctbal, c_phone, n_name, c_address, c_comment order by revenue desc limit 20;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T23 - Q11" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select ps_partkey, sum(ps_supplycost * ps_availqty) as value from partsupp, supplier, nation where ps_tenant_id = 23 and s_tenant_id = 23 and ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = &apos;INDONESIA&apos; group by ps_partkey having sum(ps_supplycost * ps_availqty) &gt; ( select sum(ps_supplycost * ps_availqty) * 0.0000090909 from partsupp, supplier, nation where ps_tenant_id = 23 and s_tenant_id = 23 and ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = &apos;INDONESIA&apos; ) order by value desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T23 - Q12" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select l_shipmode, sum(case when o_orderpriority = &apos;1-URGENT&apos; or o_orderpriority = &apos;2-HIGH&apos; then 1 else 0 end) as high_line_count, sum(case when o_orderpriority &lt;&gt; &apos;1-URGENT&apos; and o_orderpriority &lt;&gt; &apos;2-HIGH&apos; then 1 else 0 end) as low_line_count from orders, lineitem where o_tenant_id = 23 and l_tenant_id = 23 and o_orderkey = l_orderkey and l_shipmode in (&apos;RAIL&apos;, &apos;TRUCK&apos;) and l_commitdate &lt; l_receiptdate and l_shipdate &lt; l_commitdate and l_receiptdate &gt;= date &apos;1995-01-01&apos; and l_receiptdate &lt; date &apos;1995-01-01&apos; + interval &apos;1&apos; year group by l_shipmode order by l_shipmode;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T23 - Q13" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_count, count(*) as custdist from ( select c_custkey, count(o_orderkey) from customer left outer join orders on c_custkey = o_custkey and o_comment not like &apos;%pending%accounts%&apos; where c_tenant_id = 23 group by c_custkey ) as c_orders (c_custkey, c_count) group by c_count order by custdist desc, c_count desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T23 - Q14" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select 100.00 * sum(case when p_type like &apos;PROMO%&apos; then l_extendedprice * (1 - l_discount) else 0 end) / sum(l_extendedprice * (1 - l_discount)) as promo_revenue from lineitem, part where l_tenant_id = 23 and p_tenant_id = 23 and l_partkey = p_partkey and l_shipdate &gt;= date &apos;1995-12-01&apos; and l_shipdate &lt; date &apos;1995-12-01&apos; + interval &apos;1&apos; month;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T23 - Q15" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Callable Statement</stringProp>
            <stringProp name="query">create view revenue0 (supplier_no, total_revenue) as select l_suppkey, sum(l_extendedprice * (1 - l_discount)) from lineitem where l_tenant_id = 23 and l_shipdate &gt;= date &apos;1996-10-01&apos; and l_shipdate &lt; date &apos;1996-10-01&apos; + interval &apos;3&apos; month group by l_suppkey; select s_suppkey, s_name, s_address, s_phone, total_revenue from supplier, revenue0 where s_tenant_id = 23 and s_suppkey = supplier_no and total_revenue = ( select max(total_revenue) from revenue0 ) order by s_suppkey; drop view revenue0;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T23 - Q16" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select p_brand, p_type, p_size, count(distinct ps_suppkey) as supplier_cnt from partsupp, part where ps_tenant_id = 23 and p_tenant_id = 23 and p_partkey = ps_partkey and p_brand &lt;&gt; &apos;Brand#52&apos; and p_type not like &apos;LARGE BRUSHED%&apos; and p_size in (20, 35, 34, 50, 23, 28, 48, 17) and ps_suppkey not in ( select s_suppkey from supplier where s_tenant_id = 23 and s_comment like &apos;%Customer%Complaints%&apos; ) group by p_brand, p_type, p_size order by supplier_cnt desc, p_brand, p_type, p_size;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T23 - Q18" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice, sum(l_quantity) from customer, orders, lineitem where c_tenant_id = 23 and o_tenant_id = 23 and l_tenant_id = 23 and o_orderkey in ( select l_orderkey from lineitem where l_tenant_id = 23 group by l_orderkey having sum(l_quantity) &gt; 314 ) and c_custkey = o_custkey and o_orderkey = l_orderkey group by c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice order by o_totalprice desc, o_orderdate limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T23 - Q19" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select sum(l_extendedprice* (1 - l_discount)) as revenue from lineitem, part where l_tenant_id = 23 and p_tenant_id = 23 and (( p_partkey = l_partkey and p_brand = &apos;Brand#24&apos; and p_container in (&apos;SM CasE&apos;, &apos;SM BOX&apos;, &apos;SM PACK&apos;, &apos;SM PKG&apos;) and l_quantity &gt;= 10 and l_quantity &lt;= 10 + 10 and p_size between 1 and 5 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ) or ( p_partkey = l_partkey and p_brand = &apos;Brand#45&apos; and p_container in (&apos;MED BAG&apos;, &apos;MED BOX&apos;, &apos;MED PKG&apos;, &apos;MED PACK&apos;) and l_quantity &gt;= 12 and l_quantity &lt;= 12 + 10 and p_size between 1 and 10 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ) or ( p_partkey = l_partkey and p_brand = &apos;Brand#33&apos; and p_container in (&apos;LG CasE&apos;, &apos;LG BOX&apos;, &apos;LG PACK&apos;, &apos;LG PKG&apos;) and l_quantity &gt;= 30 and l_quantity &lt;= 30 + 10 and p_size between 1 and 15 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos;));
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T23 - Q21" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select s_name, count(*) as numwait from supplier, lineitem l1, orders, nation where s_tenant_id = 23 and l1.l_tenant_id = 23 and o_tenant_id = 23 and s_suppkey = l1.l_suppkey and o_orderkey = l1.l_orderkey and o_orderstatus = &apos;F&apos; and l1.l_receiptdate &gt; l1.l_commitdate and exists ( select * from lineitem l2 where l2.l_tenant_id = 23 and l2.l_orderkey = l1.l_orderkey and l2.l_suppkey &lt;&gt; l1.l_suppkey ) and not exists ( select * from lineitem l3 where l3.l_tenant_id = 23 and l3.l_orderkey = l1.l_orderkey and l3.l_suppkey &lt;&gt; l1.l_suppkey and l3.l_receiptdate &gt; l3.l_commitdate ) and s_nationkey = n_nationkey and n_name = &apos;MOZAMBIQUE&apos; group by s_name order by numwait desc, s_name limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T23 - Q22" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select cntrycode, count(*) as numcust, sum(c_acctbal) as totacctbal from ( select substring(c_phone from 1 for 2) as cntrycode, c_acctbal from customer where c_tenant_id = 23 and substring(c_phone from 1 for 2) in (&apos;34&apos;, &apos;20&apos;, &apos;23&apos;, &apos;33&apos;, &apos;18&apos;, &apos;10&apos;, &apos;30&apos;) and c_acctbal &gt; ( select avg(c_acctbal) from customer where c_tenant_id = 23 and c_acctbal &gt; 0.00 and substring(c_phone from 1 for 2) in (&apos;34&apos;, &apos;20&apos;, &apos;23&apos;, &apos;33&apos;, &apos;18&apos;, &apos;10&apos;, &apos;30&apos;) ) and not exists ( select * from orders where o_tenant_id = 23 and o_custkey = c_custkey ) ) as custsale group by cntrycode order by cntrycode;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T23 - RF1" enabled="false">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO region (r_regionkey, r_name, r_comment) VALUES (123476241, &apos;AFRICA&apos;, &apos;lar deposits. blithely final packages cajole. regular&apos;);
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T23 - RF2" enabled="false">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">DELETE FROM region WHERE r_regionkey = 123476241;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="T24" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <RandomOrderController guiclass="RandomOrderControllerGui" testclass="RandomOrderController" testname="Random Order Controller" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T24 - Q1" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="query">select l_returnflag, l_linestatus, sum(l_quantity) as sum_qty, sum(l_extendedprice) as sum_base_price, sum(l_extendedprice * (1 - l_discount)) as sum_disc_price, sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge, avg(l_quantity) as avg_qty, avg(l_extendedprice) as avg_price, avg(l_discount) as avg_disc, count(*) as count_order from lineitem where l_tenant_id = 24 and l_shipdate &lt;= date &apos;1998-12-01&apos; - interval &apos;61&apos; day group by l_returnflag, l_linestatus order by l_returnflag, l_linestatus;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T24 - Q2" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select s_acctbal, s_name, n_name, p_partkey, p_mfgr, s_address, s_phone, s_comment from part, supplier, partsupp, nation, region where p_tenant_id = 24 and s_tenant_id = 24 and ps_tenant_id = 24 and p_partkey = ps_partkey and s_suppkey = ps_suppkey and p_size = 14 and p_type like &apos;%BRASS&apos; and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; and ps_supplycost = ( select min(ps_supplycost) from partsupp, supplier, nation, region where ps_tenant_id = 24 and s_tenant_id = 24 and p_partkey = ps_partkey and s_suppkey = ps_suppkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; ) order by s_acctbal desc, n_name, s_name, p_partkey limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T24 - Q3" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select l_orderkey, sum(l_extendedprice * (1 - l_discount)) as revenue, o_orderdate, o_shippriority from customer, orders, lineitem where c_tenant_id = 24 and o_tenant_id = 24 and l_tenant_id = 24 and c_mktsegment = &apos;BUILDING&apos; and c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate &lt; date &apos;1995-03-06&apos; and l_shipdate &gt; date &apos;1995-03-06&apos; group by l_orderkey, o_orderdate, o_shippriority order by revenue desc, o_orderdate limit 10;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T24 - Q4" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select o_orderpriority, count(*) as order_count from orders where o_tenant_id = 24 and o_orderdate &gt;= date &apos;1993-12-01&apos; and o_orderdate &lt; date &apos;1993-12-01&apos; + interval &apos;3&apos; month and exists ( select * from lineitem where l_tenant_id = 24 and l_orderkey = o_orderkey and l_commitdate &lt; l_receiptdate ) group by o_orderpriority order by o_orderpriority;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T24 - Q5" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select n_name, sum(l_extendedprice * (1 - l_discount)) as revenue from customer, orders, lineitem, supplier, nation, region where c_tenant_id = 24 and o_tenant_id = 24 and l_tenant_id = 24 and s_tenant_id = 24 and c_custkey = o_custkey and l_orderkey = o_orderkey and l_suppkey = s_suppkey and c_nationkey = s_nationkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; and o_orderdate &gt;= date &apos;1994-01-01&apos; and o_orderdate &lt; date &apos;1994-01-01&apos; + interval &apos;1&apos; year group by n_name order by revenue desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T24 - Q6" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select sum(l_extendedprice * l_discount) as revenue from lineitem where l_tenant_id = 24 and l_shipdate &gt;= date &apos;1994-01-01&apos; and l_shipdate &lt; date &apos;1994-01-01&apos; + interval &apos;1&apos; year and l_discount between 0.09 - 0.01 and 0.09 + 0.01 and l_quantity &lt; 25;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T24 - Q7" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select supp_nation, cust_nation, l_year, sum(volume) as revenue from ( select n1.n_name as supp_nation, n2.n_name as cust_nation, extract(year from l_shipdate) as l_year, l_extendedprice * (1 - l_discount) as volume from supplier, lineitem, orders, customer, nation n1, nation n2 where s_tenant_id = 24 and l_tenant_id = 24 and o_tenant_id = 24 and c_tenant_id = 24 and s_suppkey = l_suppkey and o_orderkey = l_orderkey and c_custkey = o_custkey and s_nationkey = n1.n_nationkey and c_nationkey = n2.n_nationkey and ( (n1.n_name = &apos;RUSSIA&apos; and n2.n_name = &apos;ROMANIA&apos;) or (n1.n_name = &apos;ROMANIA&apos; and n2.n_name = &apos;RUSSIA&apos;) ) and l_shipdate between date &apos;1995-01-01&apos; and date &apos;1996-12-31&apos; ) as shipping group by supp_nation, cust_nation, l_year order by supp_nation, cust_nation, l_year;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T24 - Q8" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select o_year, sum(case when nation = &apos;ROMANIA&apos; then volume else 0 end) / sum(volume) as mkt_share from ( select extract(year from o_orderdate) as o_year, l_extendedprice * (1 - l_discount) as volume, n2.n_name as nation from part, supplier, lineitem, orders, customer, nation n1, nation n2, region where p_tenant_id = 24 and s_tenant_id = 24 and l_tenant_id = 24 and o_tenant_id = 24 and c_tenant_id = 24 and p_partkey = l_partkey and s_suppkey = l_suppkey and l_orderkey = o_orderkey and o_custkey = c_custkey and c_nationkey = n1.n_nationkey and n1.n_regionkey = r_regionkey and r_name = &apos;EUROPE&apos; and s_nationkey = n2.n_nationkey and o_orderdate between date &apos;1995-01-01&apos; and date &apos;1996-12-31&apos; and p_type = &apos;PROMO ANODIZED TIN&apos; ) as all_nations group by o_year order by o_year;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T24 - Q9" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select nation, o_year, sum(amount) as sum_profit from ( select n_name as nation, extract(year from o_orderdate) as o_year, l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity as amount from part, supplier, lineitem, partsupp, orders, nation where p_tenant_id = 24 and s_tenant_id = 24 and l_tenant_id = 24 and ps_tenant_id = 24 and o_tenant_id = 24 and s_suppkey = l_suppkey and ps_suppkey = l_suppkey and ps_partkey = l_partkey and p_partkey = l_partkey and o_orderkey = l_orderkey and s_nationkey = n_nationkey and p_name like &apos;%sienna%&apos; ) as profit group by nation, o_year order by nation, o_year desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T24 - Q10" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_custkey, c_name, sum(l_extendedprice * (1 - l_discount)) as revenue, c_acctbal, n_name, c_address, c_phone, c_comment from customer, orders, lineitem, nation where c_tenant_id = 24 and o_tenant_id = 24 and l_tenant_id = 24 and c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate &gt;= date &apos;1993-04-01&apos; and o_orderdate &lt; date &apos;1993-04-01&apos; + interval &apos;3&apos; month and l_returnflag = &apos;R&apos; and c_nationkey = n_nationkey group by c_custkey, c_name, c_acctbal, c_phone, n_name, c_address, c_comment order by revenue desc limit 20;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T24 - Q11" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select ps_partkey, sum(ps_supplycost * ps_availqty) as value from partsupp, supplier, nation where ps_tenant_id = 24 and s_tenant_id = 24 and ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = &apos;INDONESIA&apos; group by ps_partkey having sum(ps_supplycost * ps_availqty) &gt; ( select sum(ps_supplycost * ps_availqty) * 0.0000090909 from partsupp, supplier, nation where ps_tenant_id = 24 and s_tenant_id = 24 and ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = &apos;INDONESIA&apos; ) order by value desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T24 - Q12" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select l_shipmode, sum(case when o_orderpriority = &apos;1-URGENT&apos; or o_orderpriority = &apos;2-HIGH&apos; then 1 else 0 end) as high_line_count, sum(case when o_orderpriority &lt;&gt; &apos;1-URGENT&apos; and o_orderpriority &lt;&gt; &apos;2-HIGH&apos; then 1 else 0 end) as low_line_count from orders, lineitem where o_tenant_id = 24 and l_tenant_id = 24 and o_orderkey = l_orderkey and l_shipmode in (&apos;RAIL&apos;, &apos;TRUCK&apos;) and l_commitdate &lt; l_receiptdate and l_shipdate &lt; l_commitdate and l_receiptdate &gt;= date &apos;1995-01-01&apos; and l_receiptdate &lt; date &apos;1995-01-01&apos; + interval &apos;1&apos; year group by l_shipmode order by l_shipmode;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T24 - Q13" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_count, count(*) as custdist from ( select c_custkey, count(o_orderkey) from customer left outer join orders on c_custkey = o_custkey and o_comment not like &apos;%pending%accounts%&apos; where c_tenant_id = 24 group by c_custkey ) as c_orders (c_custkey, c_count) group by c_count order by custdist desc, c_count desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T24 - Q14" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select 100.00 * sum(case when p_type like &apos;PROMO%&apos; then l_extendedprice * (1 - l_discount) else 0 end) / sum(l_extendedprice * (1 - l_discount)) as promo_revenue from lineitem, part where l_tenant_id = 24 and p_tenant_id = 24 and l_partkey = p_partkey and l_shipdate &gt;= date &apos;1995-12-01&apos; and l_shipdate &lt; date &apos;1995-12-01&apos; + interval &apos;1&apos; month;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T24 - Q15" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Callable Statement</stringProp>
            <stringProp name="query">create view revenue0 (supplier_no, total_revenue) as select l_suppkey, sum(l_extendedprice * (1 - l_discount)) from lineitem where l_tenant_id = 24 and l_shipdate &gt;= date &apos;1994-07-01&apos; and l_shipdate &lt; date &apos;1994-07-01&apos; + interval &apos;3&apos; month group by l_suppkey; select s_suppkey, s_name, s_address, s_phone, total_revenue from supplier, revenue0 where s_tenant_id = 24 and s_suppkey = supplier_no and total_revenue = ( select max(total_revenue) from revenue0 ) order by s_suppkey; drop view revenue0;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T24 - Q16" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select p_brand, p_type, p_size, count(distinct ps_suppkey) as supplier_cnt from partsupp, part where ps_tenant_id = 24 and p_tenant_id = 24 and p_partkey = ps_partkey and p_brand &lt;&gt; &apos;Brand#52&apos; and p_type not like &apos;LARGE BRUSHED%&apos; and p_size in (20, 35, 34, 50, 23, 28, 48, 17) and ps_suppkey not in ( select s_suppkey from supplier where s_tenant_id = 24 and s_comment like &apos;%Customer%Complaints%&apos; ) group by p_brand, p_type, p_size order by supplier_cnt desc, p_brand, p_type, p_size;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T24 - Q18" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice, sum(l_quantity) from customer, orders, lineitem where c_tenant_id = 24 and o_tenant_id = 24 and l_tenant_id = 24 and o_orderkey in ( select l_orderkey from lineitem where l_tenant_id = 24 group by l_orderkey having sum(l_quantity) &gt; 314 ) and c_custkey = o_custkey and o_orderkey = l_orderkey group by c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice order by o_totalprice desc, o_orderdate limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T24 - Q19" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select sum(l_extendedprice* (1 - l_discount)) as revenue from lineitem, part where l_tenant_id = 24 and p_tenant_id = 24 and (( p_partkey = l_partkey and p_brand = &apos;Brand#24&apos; and p_container in (&apos;SM CasE&apos;, &apos;SM BOX&apos;, &apos;SM PACK&apos;, &apos;SM PKG&apos;) and l_quantity &gt;= 10 and l_quantity &lt;= 10 + 10 and p_size between 1 and 5 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ) or ( p_partkey = l_partkey and p_brand = &apos;Brand#45&apos; and p_container in (&apos;MED BAG&apos;, &apos;MED BOX&apos;, &apos;MED PKG&apos;, &apos;MED PACK&apos;) and l_quantity &gt;= 12 and l_quantity &lt;= 12 + 10 and p_size between 1 and 10 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ) or ( p_partkey = l_partkey and p_brand = &apos;Brand#33&apos; and p_container in (&apos;LG CasE&apos;, &apos;LG BOX&apos;, &apos;LG PACK&apos;, &apos;LG PKG&apos;) and l_quantity &gt;= 30 and l_quantity &lt;= 30 + 10 and p_size between 1 and 15 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos;));
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T24 - Q21" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select s_name, count(*) as numwait from supplier, lineitem l1, orders, nation where s_tenant_id = 24 and l1.l_tenant_id = 24 and o_tenant_id = 24 and s_suppkey = l1.l_suppkey and o_orderkey = l1.l_orderkey and o_orderstatus = &apos;F&apos; and l1.l_receiptdate &gt; l1.l_commitdate and exists ( select * from lineitem l2 where l2.l_tenant_id = 24 and l2.l_orderkey = l1.l_orderkey and l2.l_suppkey &lt;&gt; l1.l_suppkey ) and not exists ( select * from lineitem l3 where l3.l_tenant_id = 24 and l3.l_orderkey = l1.l_orderkey and l3.l_suppkey &lt;&gt; l1.l_suppkey and l3.l_receiptdate &gt; l3.l_commitdate ) and s_nationkey = n_nationkey and n_name = &apos;MOZAMBIQUE&apos; group by s_name order by numwait desc, s_name limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T24 - Q22" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select cntrycode, count(*) as numcust, sum(c_acctbal) as totacctbal from ( select substring(c_phone from 1 for 2) as cntrycode, c_acctbal from customer where c_tenant_id = 24 and substring(c_phone from 1 for 2) in (&apos;34&apos;, &apos;20&apos;, &apos;23&apos;, &apos;33&apos;, &apos;18&apos;, &apos;10&apos;, &apos;30&apos;) and c_acctbal &gt; ( select avg(c_acctbal) from customer where c_tenant_id = 24 and c_acctbal &gt; 0.00 and substring(c_phone from 1 for 2) in (&apos;34&apos;, &apos;20&apos;, &apos;23&apos;, &apos;33&apos;, &apos;18&apos;, &apos;10&apos;, &apos;30&apos;) ) and not exists ( select * from orders where o_tenant_id = 24 and o_custkey = c_custkey ) ) as custsale group by cntrycode order by cntrycode;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T24 - RF1" enabled="false">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO region (r_regionkey, r_name, r_comment) VALUES (123476241, &apos;AFRICA&apos;, &apos;lar deposits. blithely final packages cajole. regular&apos;);
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T24 - RF2" enabled="false">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">DELETE FROM region WHERE r_regionkey = 123476241;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="T25" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <RandomOrderController guiclass="RandomOrderControllerGui" testclass="RandomOrderController" testname="Random Order Controller" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T25 - Q1" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="query">select l_returnflag, l_linestatus, sum(l_quantity) as sum_qty, sum(l_extendedprice) as sum_base_price, sum(l_extendedprice * (1 - l_discount)) as sum_disc_price, sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge, avg(l_quantity) as avg_qty, avg(l_extendedprice) as avg_price, avg(l_discount) as avg_disc, count(*) as count_order from lineitem where l_tenant_id = 25 and l_shipdate &lt;= date &apos;1998-12-01&apos; - interval &apos;60&apos; day group by l_returnflag, l_linestatus order by l_returnflag, l_linestatus;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T25 - Q2" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select s_acctbal, s_name, n_name, p_partkey, p_mfgr, s_address, s_phone, s_comment from part, supplier, partsupp, nation, region where p_tenant_id = 25 and s_tenant_id = 25 and ps_tenant_id = 25 and p_partkey = ps_partkey and s_suppkey = ps_suppkey and p_size = 31 and p_type like &apos;%COPPER&apos; and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; and ps_supplycost = ( select min(ps_supplycost) from partsupp, supplier, nation, region where ps_tenant_id = 25 and s_tenant_id = 25 and p_partkey = ps_partkey and s_suppkey = ps_suppkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; ) order by s_acctbal desc, n_name, s_name, p_partkey limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T25 - Q3" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select l_orderkey, sum(l_extendedprice * (1 - l_discount)) as revenue, o_orderdate, o_shippriority from customer, orders, lineitem where c_tenant_id = 25 and o_tenant_id = 25 and l_tenant_id = 25 and c_mktsegment = &apos;BUILDING&apos; and c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate &lt; date &apos;1995-03-06&apos; and l_shipdate &gt; date &apos;1995-03-06&apos; group by l_orderkey, o_orderdate, o_shippriority order by revenue desc, o_orderdate limit 10;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T25 - Q4" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select o_orderpriority, count(*) as order_count from orders where o_tenant_id = 25 and o_orderdate &gt;= date &apos;1993-11-01&apos; and o_orderdate &lt; date &apos;1993-11-01&apos; + interval &apos;3&apos; month and exists ( select * from lineitem where l_tenant_id = 25 and l_orderkey = o_orderkey and l_commitdate &lt; l_receiptdate ) group by o_orderpriority order by o_orderpriority;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T25 - Q5" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select n_name, sum(l_extendedprice * (1 - l_discount)) as revenue from customer, orders, lineitem, supplier, nation, region where c_tenant_id = 25 and o_tenant_id = 25 and l_tenant_id = 25 and s_tenant_id = 25 and c_custkey = o_custkey and l_orderkey = o_orderkey and l_suppkey = s_suppkey and c_nationkey = s_nationkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; and o_orderdate &gt;= date &apos;1993-01-01&apos; and o_orderdate &lt; date &apos;1993-01-01&apos; + interval &apos;1&apos; year group by n_name order by revenue desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T25 - Q6" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select sum(l_extendedprice * l_discount) as revenue from lineitem where l_tenant_id = 25 and l_shipdate &gt;= date &apos;1993-01-01&apos; and l_shipdate &lt; date &apos;1993-01-01&apos; + interval &apos;1&apos; year and l_discount between 0.05 - 0.01 and 0.05 + 0.01 and l_quantity &lt; 24;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T25 - Q7" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select supp_nation, cust_nation, l_year, sum(volume) as revenue from ( select n1.n_name as supp_nation, n2.n_name as cust_nation, extract(year from l_shipdate) as l_year, l_extendedprice * (1 - l_discount) as volume from supplier, lineitem, orders, customer, nation n1, nation n2 where s_tenant_id = 25 and l_tenant_id = 25 and o_tenant_id = 25 and c_tenant_id = 25 and s_suppkey = l_suppkey and o_orderkey = l_orderkey and c_custkey = o_custkey and s_nationkey = n1.n_nationkey and c_nationkey = n2.n_nationkey and ( (n1.n_name = &apos;IRAN&apos; and n2.n_name = &apos;GERMANY&apos;) or (n1.n_name = &apos;GERMANY&apos; and n2.n_name = &apos;IRAN&apos;) ) and l_shipdate between date &apos;1995-01-01&apos; and date &apos;1996-12-31&apos; ) as shipping group by supp_nation, cust_nation, l_year order by supp_nation, cust_nation, l_year;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T25 - Q8" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select o_year, sum(case when nation = &apos;GERMANY&apos; then volume else 0 end) / sum(volume) as mkt_share from ( select extract(year from o_orderdate) as o_year, l_extendedprice * (1 - l_discount) as volume, n2.n_name as nation from part, supplier, lineitem, orders, customer, nation n1, nation n2, region where p_tenant_id = 25 and s_tenant_id = 25 and l_tenant_id = 25 and o_tenant_id = 25 and c_tenant_id = 25 and p_partkey = l_partkey and s_suppkey = l_suppkey and l_orderkey = o_orderkey and o_custkey = c_custkey and c_nationkey = n1.n_nationkey and n1.n_regionkey = r_regionkey and r_name = &apos;EUROPE&apos; and s_nationkey = n2.n_nationkey and o_orderdate between date &apos;1995-01-01&apos; and date &apos;1996-12-31&apos; and p_type = &apos;PROMO PLATED STEEL&apos; ) as all_nations group by o_year order by o_year;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T25 - Q9" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select nation, o_year, sum(amount) as sum_profit from ( select n_name as nation, extract(year from o_orderdate) as o_year, l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity as amount from part, supplier, lineitem, partsupp, orders, nation where p_tenant_id = 25 and s_tenant_id = 25 and l_tenant_id = 25 and ps_tenant_id = 25 and o_tenant_id = 25 and s_suppkey = l_suppkey and ps_suppkey = l_suppkey and ps_partkey = l_partkey and p_partkey = l_partkey and o_orderkey = l_orderkey and s_nationkey = n_nationkey and p_name like &apos;%tan%&apos; ) as profit group by nation, o_year order by nation, o_year desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T25 - Q10" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_custkey, c_name, sum(l_extendedprice * (1 - l_discount)) as revenue, c_acctbal, n_name, c_address, c_phone, c_comment from customer, orders, lineitem, nation where c_tenant_id = 25 and o_tenant_id = 25 and l_tenant_id = 25 and c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate &gt;= date &apos;1994-01-01&apos; and o_orderdate &lt; date &apos;1994-01-01&apos; + interval &apos;3&apos; month and l_returnflag = &apos;R&apos; and c_nationkey = n_nationkey group by c_custkey, c_name, c_acctbal, c_phone, n_name, c_address, c_comment order by revenue desc limit 20;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T25 - Q11" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select ps_partkey, sum(ps_supplycost * ps_availqty) as value from partsupp, supplier, nation where ps_tenant_id = 25 and s_tenant_id = 25 and ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = &apos;MOZAMBIQUE&apos; group by ps_partkey having sum(ps_supplycost * ps_availqty) &gt; ( select sum(ps_supplycost * ps_availqty) * 0.0000002331 from partsupp, supplier, nation where ps_tenant_id = 25 and s_tenant_id = 25 and ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = &apos;MOZAMBIQUE&apos; ) order by value desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T25 - Q12" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select l_shipmode, sum(case when o_orderpriority = &apos;1-URGENT&apos; or o_orderpriority = &apos;2-HIGH&apos; then 1 else 0 end) as high_line_count, sum(case when o_orderpriority &lt;&gt; &apos;1-URGENT&apos; and o_orderpriority &lt;&gt; &apos;2-HIGH&apos; then 1 else 0 end) as low_line_count from orders, lineitem where o_tenant_id = 25 and l_tenant_id = 25 and o_orderkey = l_orderkey and l_shipmode in (&apos;SHIP&apos;, &apos;RAIL&apos;) and l_commitdate &lt; l_receiptdate and l_shipdate &lt; l_commitdate and l_receiptdate &gt;= date &apos;1995-01-01&apos; and l_receiptdate &lt; date &apos;1995-01-01&apos; + interval &apos;1&apos; year group by l_shipmode order by l_shipmode;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T25 - Q13" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_count, count(*) as custdist from ( select c_custkey, count(o_orderkey) from customer left outer join orders on c_custkey = o_custkey and o_comment not like &apos;%express%requests%&apos; where c_tenant_id = 25 group by c_custkey ) as c_orders (c_custkey, c_count) group by c_count order by custdist desc, c_count desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T25 - Q14" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select 100.00 * sum(case when p_type like &apos;PROMO%&apos; then l_extendedprice * (1 - l_discount) else 0 end) / sum(l_extendedprice * (1 - l_discount)) as promo_revenue from lineitem, part where l_tenant_id = 25 and p_tenant_id = 25 and l_partkey = p_partkey and l_shipdate &gt;= date &apos;1994-12-01&apos; and l_shipdate &lt; date &apos;1994-12-01&apos; + interval &apos;1&apos; month;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T25 - Q15" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Callable Statement</stringProp>
            <stringProp name="query">create view revenue0 (supplier_no, total_revenue) as select l_suppkey, sum(l_extendedprice * (1 - l_discount)) from lineitem where l_tenant_id = 25 and l_shipdate &gt;= date &apos;1997-02-01&apos; and l_shipdate &lt; date &apos;1997-02-01&apos; + interval &apos;3&apos; month group by l_suppkey; select s_suppkey, s_name, s_address, s_phone, total_revenue from supplier, revenue0 where s_tenant_id = 25 and s_suppkey = supplier_no and total_revenue = ( select max(total_revenue) from revenue0 ) order by s_suppkey; drop view revenue0;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T25 - Q16" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select p_brand, p_type, p_size, count(distinct ps_suppkey) as supplier_cnt from partsupp, part where ps_tenant_id = 25 and p_tenant_id = 25 and p_partkey = ps_partkey and p_brand &lt;&gt; &apos;Brand#53&apos; and p_type not like &apos;MEDIUM BURNISHED%&apos; and p_size in (20, 48, 2, 43, 21, 14, 44, 33) and ps_suppkey not in ( select s_suppkey from supplier where s_tenant_id = 25 and s_comment like &apos;%Customer%Complaints%&apos; ) group by p_brand, p_type, p_size order by supplier_cnt desc, p_brand, p_type, p_size;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T25 - Q18" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice, sum(l_quantity) from customer, orders, lineitem where c_tenant_id = 25 and o_tenant_id = 25 and l_tenant_id = 25 and o_orderkey in ( select l_orderkey from lineitem where l_tenant_id = 25 group by l_orderkey having sum(l_quantity) &gt; 313 ) and c_custkey = o_custkey and o_orderkey = l_orderkey group by c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice order by o_totalprice desc, o_orderdate limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T25 - Q19" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select sum(l_extendedprice* (1 - l_discount)) as revenue from lineitem, part where l_tenant_id = 25 and p_tenant_id = 25 and (( p_partkey = l_partkey and p_brand = &apos;Brand#25&apos; and p_container in (&apos;SM CasE&apos;, &apos;SM BOX&apos;, &apos;SM PACK&apos;, &apos;SM PKG&apos;) and l_quantity &gt;= 9 and l_quantity &lt;= 9 + 10 and p_size between 1 and 5 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ) or ( p_partkey = l_partkey and p_brand = &apos;Brand#55&apos; and p_container in (&apos;MED BAG&apos;, &apos;MED BOX&apos;, &apos;MED PKG&apos;, &apos;MED PACK&apos;) and l_quantity &gt;= 16 and l_quantity &lt;= 16 + 10 and p_size between 1 and 10 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ) or ( p_partkey = l_partkey and p_brand = &apos;Brand#21&apos; and p_container in (&apos;LG CasE&apos;, &apos;LG BOX&apos;, &apos;LG PACK&apos;, &apos;LG PKG&apos;) and l_quantity &gt;= 28 and l_quantity &lt;= 28 + 10 and p_size between 1 and 15 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos;));
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T25 - Q21" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select s_name, count(*) as numwait from supplier, lineitem l1, orders, nation where s_tenant_id = 25 and l1.l_tenant_id = 25 and o_tenant_id = 25 and s_suppkey = l1.l_suppkey and o_orderkey = l1.l_orderkey and o_orderstatus = &apos;F&apos; and l1.l_receiptdate &gt; l1.l_commitdate and exists ( select * from lineitem l2 where l2.l_tenant_id = 25 and l2.l_orderkey = l1.l_orderkey and l2.l_suppkey &lt;&gt; l1.l_suppkey ) and not exists ( select * from lineitem l3 where l3.l_tenant_id = 25 and l3.l_orderkey = l1.l_orderkey and l3.l_suppkey &lt;&gt; l1.l_suppkey and l3.l_receiptdate &gt; l3.l_commitdate ) and s_nationkey = n_nationkey and n_name = &apos;UNITED KINGDOM&apos; group by s_name order by numwait desc, s_name limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T25 - Q22" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select cntrycode, count(*) as numcust, sum(c_acctbal) as totacctbal from ( select substring(c_phone from 1 for 2) as cntrycode, c_acctbal from customer where c_tenant_id = 25 and substring(c_phone from 1 for 2) in (&apos;30&apos;, &apos;19&apos;, &apos;16&apos;, &apos;31&apos;, &apos;26&apos;, &apos;13&apos;, &apos;12&apos;) and c_acctbal &gt; ( select avg(c_acctbal) from customer where c_tenant_id = 25 and c_acctbal &gt; 0.00 and substring(c_phone from 1 for 2) in (&apos;30&apos;, &apos;19&apos;, &apos;16&apos;, &apos;31&apos;, &apos;26&apos;, &apos;13&apos;, &apos;12&apos;) ) and not exists ( select * from orders where o_tenant_id = 25 and o_custkey = c_custkey ) ) as custsale group by cntrycode order by cntrycode;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T25 - RF1" enabled="false">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO region (r_regionkey, r_name, r_comment) VALUES (123476241, &apos;AFRICA&apos;, &apos;lar deposits. blithely final packages cajole. regular&apos;);
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="T25 - RF2" enabled="false">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">DELETE FROM region WHERE r_regionkey = 123476241;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="G1" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <RandomOrderController guiclass="RandomOrderControllerGui" testclass="RandomOrderController" testname="Random Order Controller" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G1 - Q1" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="query">select l_returnflag, l_linestatus, sum(l_quantity) as sum_qty, sum(l_extendedprice) as sum_base_price, sum(l_extendedprice * (1 - l_discount)) as sum_disc_price, sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge, avg(l_quantity) as avg_qty, avg(l_extendedprice) as avg_price, avg(l_discount) as avg_disc, count(*) as count_order from lineitem where l_tenant_id = 1000 and l_shipdate &lt;= date &apos;1998-12-01&apos; - interval &apos;61&apos; day group by l_returnflag, l_linestatus order by l_returnflag, l_linestatus;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G1 - Q2" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select s_acctbal, s_name, n_name, p_partkey, p_mfgr, s_address, s_phone, s_comment from part, supplier, partsupp, nation, region where p_tenant_id = 1000 and s_tenant_id = 1000 and ps_tenant_id = 1000 and p_partkey = ps_partkey and s_suppkey = ps_suppkey and p_size = 14 and p_type like &apos;%BRASS&apos; and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; and ps_supplycost = ( select min(ps_supplycost) from partsupp, supplier, nation, region where ps_tenant_id = 1000 and s_tenant_id = 1000 and p_partkey = ps_partkey and s_suppkey = ps_suppkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; ) order by s_acctbal desc, n_name, s_name, p_partkey limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G1 - Q3" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select l_orderkey, sum(l_extendedprice * (1 - l_discount)) as revenue, o_orderdate, o_shippriority from customer, orders, lineitem where c_tenant_id = 1000 and o_tenant_id = 1000 and l_tenant_id = 1000 and c_mktsegment = &apos;BUILDING&apos; and c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate &lt; date &apos;1995-03-06&apos; and l_shipdate &gt; date &apos;1995-03-06&apos; group by l_orderkey, o_orderdate, o_shippriority order by revenue desc, o_orderdate limit 10;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G1 - Q4" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select o_orderpriority, count(*) as order_count from orders where o_tenant_id = 1000 and o_orderdate &gt;= date &apos;1993-12-01&apos; and o_orderdate &lt; date &apos;1993-12-01&apos; + interval &apos;3&apos; month and exists ( select * from lineitem where l_tenant_id = 1000 and l_orderkey = o_orderkey and l_commitdate &lt; l_receiptdate ) group by o_orderpriority order by o_orderpriority;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G1 - Q5" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select n_name, sum(l_extendedprice * (1 - l_discount)) as revenue from customer, orders, lineitem, supplier, nation, region where c_tenant_id = 1000 and o_tenant_id = 1000 and l_tenant_id = 1000 and s_tenant_id = 1000 and c_custkey = o_custkey and l_orderkey = o_orderkey and l_suppkey = s_suppkey and c_nationkey = s_nationkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; and o_orderdate &gt;= date &apos;1994-01-01&apos; and o_orderdate &lt; date &apos;1994-01-01&apos; + interval &apos;1&apos; year group by n_name order by revenue desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G1 - Q6" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select sum(l_extendedprice * l_discount) as revenue from lineitem where l_tenant_id = 1000 and l_shipdate &gt;= date &apos;1994-01-01&apos; and l_shipdate &lt; date &apos;1994-01-01&apos; + interval &apos;1&apos; year and l_discount between 0.09 - 0.01 and 0.09 + 0.01 and l_quantity &lt; 25;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G1 - Q7" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select supp_nation, cust_nation, l_year, sum(volume) as revenue from ( select n1.n_name as supp_nation, n2.n_name as cust_nation, extract(year from l_shipdate) as l_year, l_extendedprice * (1 - l_discount) as volume from supplier, lineitem, orders, customer, nation n1, nation n2 where s_tenant_id = 1000 and l_tenant_id = 1000 and o_tenant_id = 1000 and c_tenant_id = 1000 and s_suppkey = l_suppkey and o_orderkey = l_orderkey and c_custkey = o_custkey and s_nationkey = n1.n_nationkey and c_nationkey = n2.n_nationkey and ( (n1.n_name = &apos;RUSSIA&apos; and n2.n_name = &apos;ROMANIA&apos;) or (n1.n_name = &apos;ROMANIA&apos; and n2.n_name = &apos;RUSSIA&apos;) ) and l_shipdate between date &apos;1995-01-01&apos; and date &apos;1996-12-31&apos; ) as shipping group by supp_nation, cust_nation, l_year order by supp_nation, cust_nation, l_year;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G1 - Q8" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select o_year, sum(case when nation = &apos;ROMANIA&apos; then volume else 0 end) / sum(volume) as mkt_share from ( select extract(year from o_orderdate) as o_year, l_extendedprice * (1 - l_discount) as volume, n2.n_name as nation from part, supplier, lineitem, orders, customer, nation n1, nation n2, region where p_tenant_id = 1000 and s_tenant_id = 1000 and l_tenant_id = 1000 and o_tenant_id = 1000 and c_tenant_id = 1000 and p_partkey = l_partkey and s_suppkey = l_suppkey and l_orderkey = o_orderkey and o_custkey = c_custkey and c_nationkey = n1.n_nationkey and n1.n_regionkey = r_regionkey and r_name = &apos;EUROPE&apos; and s_nationkey = n2.n_nationkey and o_orderdate between date &apos;1995-01-01&apos; and date &apos;1996-12-31&apos; and p_type = &apos;PROMO ANODIZED TIN&apos; ) as all_nations group by o_year order by o_year;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G1 - Q9" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select nation, o_year, sum(amount) as sum_profit from ( select n_name as nation, extract(year from o_orderdate) as o_year, l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity as amount from part, supplier, lineitem, partsupp, orders, nation where p_tenant_id = 1000 and s_tenant_id = 1000 and l_tenant_id = 1000 and ps_tenant_id = 1000 and o_tenant_id = 1000 and s_suppkey = l_suppkey and ps_suppkey = l_suppkey and ps_partkey = l_partkey and p_partkey = l_partkey and o_orderkey = l_orderkey and s_nationkey = n_nationkey and p_name like &apos;%sienna%&apos; ) as profit group by nation, o_year order by nation, o_year desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G1 - Q10" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_custkey, c_name, sum(l_extendedprice * (1 - l_discount)) as revenue, c_acctbal, n_name, c_address, c_phone, c_comment from customer, orders, lineitem, nation where c_tenant_id = 1000 and o_tenant_id = 1000 and l_tenant_id = 1000 and c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate &gt;= date &apos;1993-04-01&apos; and o_orderdate &lt; date &apos;1993-04-01&apos; + interval &apos;3&apos; month and l_returnflag = &apos;R&apos; and c_nationkey = n_nationkey group by c_custkey, c_name, c_acctbal, c_phone, n_name, c_address, c_comment order by revenue desc limit 20;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G1 - Q11" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select ps_partkey, sum(ps_supplycost * ps_availqty) as value from partsupp, supplier, nation where ps_tenant_id = 1000 and s_tenant_id = 1000 and ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = &apos;INDONESIA&apos; group by ps_partkey having sum(ps_supplycost * ps_availqty) &gt; ( select sum(ps_supplycost * ps_availqty) * 0.0000090909 from partsupp, supplier, nation where ps_tenant_id = 1000 and s_tenant_id = 1000 and ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = &apos;INDONESIA&apos; ) order by value desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G1 - Q12" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select l_shipmode, sum(case when o_orderpriority = &apos;1-URGENT&apos; or o_orderpriority = &apos;2-HIGH&apos; then 1 else 0 end) as high_line_count, sum(case when o_orderpriority &lt;&gt; &apos;1-URGENT&apos; and o_orderpriority &lt;&gt; &apos;2-HIGH&apos; then 1 else 0 end) as low_line_count from orders, lineitem where o_tenant_id = 1000 and l_tenant_id = 1000 and o_orderkey = l_orderkey and l_shipmode in (&apos;RAIL&apos;, &apos;TRUCK&apos;) and l_commitdate &lt; l_receiptdate and l_shipdate &lt; l_commitdate and l_receiptdate &gt;= date &apos;1995-01-01&apos; and l_receiptdate &lt; date &apos;1995-01-01&apos; + interval &apos;1&apos; year group by l_shipmode order by l_shipmode;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G1 - Q13" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_count, count(*) as custdist from ( select c_custkey, count(o_orderkey) from customer left outer join orders on c_custkey = o_custkey and o_comment not like &apos;%pending%accounts%&apos; where c_tenant_id = 1000 group by c_custkey ) as c_orders (c_custkey, c_count) group by c_count order by custdist desc, c_count desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G1 - Q14" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select 100.00 * sum(case when p_type like &apos;PROMO%&apos; then l_extendedprice * (1 - l_discount) else 0 end) / sum(l_extendedprice * (1 - l_discount)) as promo_revenue from lineitem, part where l_tenant_id = 1000 and p_tenant_id = 1000 and l_partkey = p_partkey and l_shipdate &gt;= date &apos;1995-12-01&apos; and l_shipdate &lt; date &apos;1995-12-01&apos; + interval &apos;1&apos; month;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G1 - Q15" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Callable Statement</stringProp>
            <stringProp name="query">create view revenue0 (supplier_no, total_revenue) as select l_suppkey, sum(l_extendedprice * (1 - l_discount)) from lineitem where l_tenant_id = 1000 and l_shipdate &gt;= date &apos;1995-12-01&apos; and l_shipdate &lt; date &apos;1995-12-01&apos; + interval &apos;3&apos; month group by l_suppkey; select s_suppkey, s_name, s_address, s_phone, total_revenue from supplier, revenue0 where s_tenant_id = 1000 and s_suppkey = supplier_no and total_revenue = ( select max(total_revenue) from revenue0 ) order by s_suppkey; drop view revenue0;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G1 - Q16" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select p_brand, p_type, p_size, count(distinct ps_suppkey) as supplier_cnt from partsupp, part where ps_tenant_id = 1000 and p_tenant_id = 1000 and p_partkey = ps_partkey and p_brand &lt;&gt; &apos;Brand#52&apos; and p_type not like &apos;LARGE BRUSHED%&apos; and p_size in (20, 35, 34, 50, 23, 28, 48, 17) and ps_suppkey not in ( select s_suppkey from supplier where s_tenant_id = 1000 and s_comment like &apos;%Customer%Complaints%&apos; ) group by p_brand, p_type, p_size order by supplier_cnt desc, p_brand, p_type, p_size;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G1 - Q18" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice, sum(l_quantity) from customer, orders, lineitem where c_tenant_id = 1000 and o_tenant_id = 1000 and l_tenant_id = 1000 and o_orderkey in ( select l_orderkey from lineitem where l_tenant_id = 1000 group by l_orderkey having sum(l_quantity) &gt; 314 ) and c_custkey = o_custkey and o_orderkey = l_orderkey group by c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice order by o_totalprice desc, o_orderdate limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G1 - Q19" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select sum(l_extendedprice* (1 - l_discount)) as revenue from lineitem, part where l_tenant_id = 1000 and p_tenant_id = 1000 and (( p_partkey = l_partkey and p_brand = &apos;Brand#24&apos; and p_container in (&apos;SM CasE&apos;, &apos;SM BOX&apos;, &apos;SM PACK&apos;, &apos;SM PKG&apos;) and l_quantity &gt;= 10 and l_quantity &lt;= 10 + 10 and p_size between 1 and 5 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ) or ( p_partkey = l_partkey and p_brand = &apos;Brand#45&apos; and p_container in (&apos;MED BAG&apos;, &apos;MED BOX&apos;, &apos;MED PKG&apos;, &apos;MED PACK&apos;) and l_quantity &gt;= 12 and l_quantity &lt;= 12 + 10 and p_size between 1 and 10 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ) or ( p_partkey = l_partkey and p_brand = &apos;Brand#33&apos; and p_container in (&apos;LG CasE&apos;, &apos;LG BOX&apos;, &apos;LG PACK&apos;, &apos;LG PKG&apos;) and l_quantity &gt;= 30 and l_quantity &lt;= 30 + 10 and p_size between 1 and 15 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ));
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G1 - Q21" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select s_name, count(*) as numwait from supplier, lineitem l1, orders, nation where s_tenant_id = 1000 and l1.l_tenant_id = 1000 and o_tenant_id = 1000 and s_suppkey = l1.l_suppkey and o_orderkey = l1.l_orderkey and o_orderstatus = &apos;F&apos; and l1.l_receiptdate &gt; l1.l_commitdate and exists ( select * from lineitem l2 where l2.l_tenant_id = 1000 and l2.l_orderkey = l1.l_orderkey and l2.l_suppkey &lt;&gt; l1.l_suppkey ) and not exists ( select * from lineitem l3 where l3.l_tenant_id = 1000 and l3.l_orderkey = l1.l_orderkey and l3.l_suppkey &lt;&gt; l1.l_suppkey and l3.l_receiptdate &gt; l3.l_commitdate ) and s_nationkey = n_nationkey and n_name = &apos;MOZAMBIQUE&apos; group by s_name order by numwait desc, s_name limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G1 - Q22" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select cntrycode, count(*) as numcust, sum(c_acctbal) as totacctbal from ( select substring(c_phone from 1 for 2) as cntrycode, c_acctbal from customer where c_tenant_id = 1000 and substring(c_phone from 1 for 2) in (&apos;34&apos;, &apos;20&apos;, &apos;23&apos;, &apos;33&apos;, &apos;18&apos;, &apos;10&apos;, &apos;30&apos;) and c_acctbal &gt; ( select avg(c_acctbal) from customer where c_tenant_id = 1000 and c_acctbal &gt; 0.00 and substring(c_phone from 1 for 2) in (&apos;34&apos;, &apos;20&apos;, &apos;23&apos;, &apos;33&apos;, &apos;18&apos;, &apos;10&apos;, &apos;30&apos;) ) and not exists ( select * from orders where o_tenant_id = 1000 and o_custkey = c_custkey ) ) as custsale group by cntrycode order by cntrycode;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G1 - RF1" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO region (r_regionkey, r_name, r_comment) VALUES (123476241, &apos;AFRICA&apos;, &apos;lar deposits. blithely final packages cajole. regular&apos;);
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G1 - RF2" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">DELETE FROM region WHERE r_regionkey = 123476241;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="G2" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <RandomOrderController guiclass="RandomOrderControllerGui" testclass="RandomOrderController" testname="Random Order Controller" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G2 - Q1" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="query">select l_returnflag, l_linestatus, sum(l_quantity) as sum_qty, sum(l_extendedprice) as sum_base_price, sum(l_extendedprice * (1 - l_discount)) as sum_disc_price, sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge, avg(l_quantity) as avg_qty, avg(l_extendedprice) as avg_price, avg(l_discount) as avg_disc, count(*) as count_order from lineitem where l_tenant_id = 1001 and l_shipdate &lt;= date &apos;1998-12-01&apos; - interval &apos;61&apos; day group by l_returnflag, l_linestatus order by l_returnflag, l_linestatus;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G2 - Q2" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select s_acctbal, s_name, n_name, p_partkey, p_mfgr, s_address, s_phone, s_comment from part, supplier, partsupp, nation, region where p_tenant_id = 1001 and s_tenant_id = 1001 and ps_tenant_id = 1001 and p_partkey = ps_partkey and s_suppkey = ps_suppkey and p_size = 14 and p_type like &apos;%BRASS&apos; and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; and ps_supplycost = ( select min(ps_supplycost) from partsupp, supplier, nation, region where ps_tenant_id = 1001 and s_tenant_id = 1001 and p_partkey = ps_partkey and s_suppkey = ps_suppkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; ) order by s_acctbal desc, n_name, s_name, p_partkey limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G2 - Q3" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select l_orderkey, sum(l_extendedprice * (1 - l_discount)) as revenue, o_orderdate, o_shippriority from customer, orders, lineitem where c_tenant_id = 1001 and o_tenant_id = 1001 and l_tenant_id = 1001 and c_mktsegment = &apos;BUILDING&apos; and c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate &lt; date &apos;1995-03-06&apos; and l_shipdate &gt; date &apos;1995-03-06&apos; group by l_orderkey, o_orderdate, o_shippriority order by revenue desc, o_orderdate limit 10;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G2 - Q4" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select o_orderpriority, count(*) as order_count from orders where o_tenant_id = 1001 and o_orderdate &gt;= date &apos;1993-12-01&apos; and o_orderdate &lt; date &apos;1993-12-01&apos; + interval &apos;3&apos; month and exists ( select * from lineitem where l_tenant_id = 1001 and l_orderkey = o_orderkey and l_commitdate &lt; l_receiptdate ) group by o_orderpriority order by o_orderpriority;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G2 - Q5" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select n_name, sum(l_extendedprice * (1 - l_discount)) as revenue from customer, orders, lineitem, supplier, nation, region where c_tenant_id = 1001 and o_tenant_id = 1001 and l_tenant_id = 1001 and s_tenant_id = 1001 and c_custkey = o_custkey and l_orderkey = o_orderkey and l_suppkey = s_suppkey and c_nationkey = s_nationkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; and o_orderdate &gt;= date &apos;1994-01-01&apos; and o_orderdate &lt; date &apos;1994-01-01&apos; + interval &apos;1&apos; year group by n_name order by revenue desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G2 - Q6" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select sum(l_extendedprice * l_discount) as revenue from lineitem where l_tenant_id = 1001 and l_shipdate &gt;= date &apos;1994-01-01&apos; and l_shipdate &lt; date &apos;1994-01-01&apos; + interval &apos;1&apos; year and l_discount between 0.09 - 0.01 and 0.09 + 0.01 and l_quantity &lt; 25;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G2 - Q7" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select supp_nation, cust_nation, l_year, sum(volume) as revenue from ( select n1.n_name as supp_nation, n2.n_name as cust_nation, extract(year from l_shipdate) as l_year, l_extendedprice * (1 - l_discount) as volume from supplier, lineitem, orders, customer, nation n1, nation n2 where s_tenant_id = 1001 and l_tenant_id = 1001 and o_tenant_id = 1001 and c_tenant_id = 1001 and s_suppkey = l_suppkey and o_orderkey = l_orderkey and c_custkey = o_custkey and s_nationkey = n1.n_nationkey and c_nationkey = n2.n_nationkey and ( (n1.n_name = &apos;RUSSIA&apos; and n2.n_name = &apos;ROMANIA&apos;) or (n1.n_name = &apos;ROMANIA&apos; and n2.n_name = &apos;RUSSIA&apos;) ) and l_shipdate between date &apos;1995-01-01&apos; and date &apos;1996-12-31&apos; ) as shipping group by supp_nation, cust_nation, l_year order by supp_nation, cust_nation, l_year;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G2 - Q8" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select o_year, sum(case when nation = &apos;ROMANIA&apos; then volume else 0 end) / sum(volume) as mkt_share from ( select extract(year from o_orderdate) as o_year, l_extendedprice * (1 - l_discount) as volume, n2.n_name as nation from part, supplier, lineitem, orders, customer, nation n1, nation n2, region where p_tenant_id = 1001 and s_tenant_id = 1001 and l_tenant_id = 1001 and o_tenant_id = 1001 and c_tenant_id = 1001 and p_partkey = l_partkey and s_suppkey = l_suppkey and l_orderkey = o_orderkey and o_custkey = c_custkey and c_nationkey = n1.n_nationkey and n1.n_regionkey = r_regionkey and r_name = &apos;EUROPE&apos; and s_nationkey = n2.n_nationkey and o_orderdate between date &apos;1995-01-01&apos; and date &apos;1996-12-31&apos; and p_type = &apos;PROMO ANODIZED TIN&apos; ) as all_nations group by o_year order by o_year;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G2 - Q9" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select nation, o_year, sum(amount) as sum_profit from ( select n_name as nation, extract(year from o_orderdate) as o_year, l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity as amount from part, supplier, lineitem, partsupp, orders, nation where p_tenant_id = 1001 and s_tenant_id = 1001 and l_tenant_id = 1001 and ps_tenant_id = 1001 and o_tenant_id = 1001 and s_suppkey = l_suppkey and ps_suppkey = l_suppkey and ps_partkey = l_partkey and p_partkey = l_partkey and o_orderkey = l_orderkey and s_nationkey = n_nationkey and p_name like &apos;%sienna%&apos; ) as profit group by nation, o_year order by nation, o_year desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G2 - Q10" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_custkey, c_name, sum(l_extendedprice * (1 - l_discount)) as revenue, c_acctbal, n_name, c_address, c_phone, c_comment from customer, orders, lineitem, nation where c_tenant_id = 1001 and o_tenant_id = 1001 and l_tenant_id = 1001 and c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate &gt;= date &apos;1993-04-01&apos; and o_orderdate &lt; date &apos;1993-04-01&apos; + interval &apos;3&apos; month and l_returnflag = &apos;R&apos; and c_nationkey = n_nationkey group by c_custkey, c_name, c_acctbal, c_phone, n_name, c_address, c_comment order by revenue desc limit 20;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G2 - Q11" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select ps_partkey, sum(ps_supplycost * ps_availqty) as value from partsupp, supplier, nation where ps_tenant_id = 1001 and s_tenant_id = 1001 and ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = &apos;INDONESIA&apos; group by ps_partkey having sum(ps_supplycost * ps_availqty) &gt; ( select sum(ps_supplycost * ps_availqty) * 0.0000090909 from partsupp, supplier, nation where ps_tenant_id = 1001 and s_tenant_id = 1001 and ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = &apos;INDONESIA&apos; ) order by value desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G2 - Q12" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select l_shipmode, sum(case when o_orderpriority = &apos;1-URGENT&apos; or o_orderpriority = &apos;2-HIGH&apos; then 1 else 0 end) as high_line_count, sum(case when o_orderpriority &lt;&gt; &apos;1-URGENT&apos; and o_orderpriority &lt;&gt; &apos;2-HIGH&apos; then 1 else 0 end) as low_line_count from orders, lineitem where o_tenant_id = 1001 and l_tenant_id = 1001 and o_orderkey = l_orderkey and l_shipmode in (&apos;RAIL&apos;, &apos;TRUCK&apos;) and l_commitdate &lt; l_receiptdate and l_shipdate &lt; l_commitdate and l_receiptdate &gt;= date &apos;1995-01-01&apos; and l_receiptdate &lt; date &apos;1995-01-01&apos; + interval &apos;1&apos; year group by l_shipmode order by l_shipmode;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G2 - Q13" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_count, count(*) as custdist from ( select c_custkey, count(o_orderkey) from customer left outer join orders on c_custkey = o_custkey and o_comment not like &apos;%pending%accounts%&apos; where c_tenant_id = 1001 group by c_custkey ) as c_orders (c_custkey, c_count) group by c_count order by custdist desc, c_count desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G2 - Q14" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select 100.00 * sum(case when p_type like &apos;PROMO%&apos; then l_extendedprice * (1 - l_discount) else 0 end) / sum(l_extendedprice * (1 - l_discount)) as promo_revenue from lineitem, part where l_tenant_id = 1001 and p_tenant_id = 1001 and l_partkey = p_partkey and l_shipdate &gt;= date &apos;1995-12-01&apos; and l_shipdate &lt; date &apos;1995-12-01&apos; + interval &apos;1&apos; month;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G2 - Q15" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Callable Statement</stringProp>
            <stringProp name="query">create view revenue0 (supplier_no, total_revenue) as select l_suppkey, sum(l_extendedprice * (1 - l_discount)) from lineitem where l_tenant_id = 1001 and l_shipdate &gt;= date &apos;1993-08-01&apos; and l_shipdate &lt; date &apos;1993-08-01&apos; + interval &apos;3&apos; month group by l_suppkey; select s_suppkey, s_name, s_address, s_phone, total_revenue from supplier, revenue0 where s_tenant_id = 1001 and s_suppkey = supplier_no and total_revenue = ( select max(total_revenue) from revenue0 ) order by s_suppkey; drop view revenue0;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G2 - Q16" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select p_brand, p_type, p_size, count(distinct ps_suppkey) as supplier_cnt from partsupp, part where ps_tenant_id = 1001 and p_tenant_id = 1001 and p_partkey = ps_partkey and p_brand &lt;&gt; &apos;Brand#52&apos; and p_type not like &apos;LARGE BRUSHED%&apos; and p_size in (20, 35, 34, 50, 23, 28, 48, 17) and ps_suppkey not in ( select s_suppkey from supplier where s_tenant_id = 1001 and s_comment like &apos;%Customer%Complaints%&apos; ) group by p_brand, p_type, p_size order by supplier_cnt desc, p_brand, p_type, p_size;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G2 - Q18" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice, sum(l_quantity) from customer, orders, lineitem where c_tenant_id = 1001 and o_tenant_id = 1001 and l_tenant_id = 1001 and o_orderkey in ( select l_orderkey from lineitem where l_tenant_id = 1001 group by l_orderkey having sum(l_quantity) &gt; 314 ) and c_custkey = o_custkey and o_orderkey = l_orderkey group by c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice order by o_totalprice desc, o_orderdate limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G2 - Q19" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select sum(l_extendedprice* (1 - l_discount)) as revenue from lineitem, part where l_tenant_id = 1001 and p_tenant_id = 1001 and (( p_partkey = l_partkey and p_brand = &apos;Brand#24&apos; and p_container in (&apos;SM CasE&apos;, &apos;SM BOX&apos;, &apos;SM PACK&apos;, &apos;SM PKG&apos;) and l_quantity &gt;= 10 and l_quantity &lt;= 10 + 10 and p_size between 1 and 5 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ) or ( p_partkey = l_partkey and p_brand = &apos;Brand#45&apos; and p_container in (&apos;MED BAG&apos;, &apos;MED BOX&apos;, &apos;MED PKG&apos;, &apos;MED PACK&apos;) and l_quantity &gt;= 12 and l_quantity &lt;= 12 + 10 and p_size between 1 and 10 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ) or ( p_partkey = l_partkey and p_brand = &apos;Brand#33&apos; and p_container in (&apos;LG CasE&apos;, &apos;LG BOX&apos;, &apos;LG PACK&apos;, &apos;LG PKG&apos;) and l_quantity &gt;= 30 and l_quantity &lt;= 30 + 10 and p_size between 1 and 15 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ));
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G2 - Q21" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select s_name, count(*) as numwait from supplier, lineitem l1, orders, nation where s_tenant_id = 1001 and l1.l_tenant_id = 1001 and o_tenant_id = 1001 and s_suppkey = l1.l_suppkey and o_orderkey = l1.l_orderkey and o_orderstatus = &apos;F&apos; and l1.l_receiptdate &gt; l1.l_commitdate and exists ( select * from lineitem l2 where l2.l_tenant_id = 1001 and l2.l_orderkey = l1.l_orderkey and l2.l_suppkey &lt;&gt; l1.l_suppkey ) and not exists ( select * from lineitem l3 where l3.l_tenant_id = 1001 and l3.l_orderkey = l1.l_orderkey and l3.l_suppkey &lt;&gt; l1.l_suppkey and l3.l_receiptdate &gt; l3.l_commitdate ) and s_nationkey = n_nationkey and n_name = &apos;MOZAMBIQUE&apos; group by s_name order by numwait desc, s_name limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G2 - Q22" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select cntrycode, count(*) as numcust, sum(c_acctbal) as totacctbal from ( select substring(c_phone from 1 for 2) as cntrycode, c_acctbal from customer where c_tenant_id = 1001 and substring(c_phone from 1 for 2) in (&apos;34&apos;, &apos;20&apos;, &apos;23&apos;, &apos;33&apos;, &apos;18&apos;, &apos;10&apos;, &apos;30&apos;) and c_acctbal &gt; ( select avg(c_acctbal) from customer where c_tenant_id = 1001 and c_acctbal &gt; 0.00 and substring(c_phone from 1 for 2) in (&apos;34&apos;, &apos;20&apos;, &apos;23&apos;, &apos;33&apos;, &apos;18&apos;, &apos;10&apos;, &apos;30&apos;) ) and not exists ( select * from orders where o_tenant_id = 1001 and o_custkey = c_custkey ) ) as custsale group by cntrycode order by cntrycode;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G2 - RF1" enabled="false">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO region (r_regionkey, r_name, r_comment) VALUES (123476241, &apos;AFRICA&apos;, &apos;lar deposits. blithely final packages cajole. regular&apos;);
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G2 - RF2" enabled="false">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">DELETE FROM region WHERE r_regionkey = 123476241;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="G3" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <RandomOrderController guiclass="RandomOrderControllerGui" testclass="RandomOrderController" testname="Random Order Controller" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G3 - Q1" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="query">select l_returnflag, l_linestatus, sum(l_quantity) as sum_qty, sum(l_extendedprice) as sum_base_price, sum(l_extendedprice * (1 - l_discount)) as sum_disc_price, sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge, avg(l_quantity) as avg_qty, avg(l_extendedprice) as avg_price, avg(l_discount) as avg_disc, count(*) as count_order from lineitem where l_tenant_id = 1002 and l_shipdate &lt;= date &apos;1998-12-01&apos; - interval &apos;61&apos; day group by l_returnflag, l_linestatus order by l_returnflag, l_linestatus;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G3 - Q2" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select s_acctbal, s_name, n_name, p_partkey, p_mfgr, s_address, s_phone, s_comment from part, supplier, partsupp, nation, region where p_tenant_id = 1002 and s_tenant_id = 1002 and ps_tenant_id = 1002 and p_partkey = ps_partkey and s_suppkey = ps_suppkey and p_size = 14 and p_type like &apos;%BRASS&apos; and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; and ps_supplycost = ( select min(ps_supplycost) from partsupp, supplier, nation, region where ps_tenant_id = 1002 and s_tenant_id = 1002 and p_partkey = ps_partkey and s_suppkey = ps_suppkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; ) order by s_acctbal desc, n_name, s_name, p_partkey limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G3 - Q3" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select l_orderkey, sum(l_extendedprice * (1 - l_discount)) as revenue, o_orderdate, o_shippriority from customer, orders, lineitem where c_tenant_id = 1002 and o_tenant_id = 1002 and l_tenant_id = 1002 and c_mktsegment = &apos;BUILDING&apos; and c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate &lt; date &apos;1995-03-06&apos; and l_shipdate &gt; date &apos;1995-03-06&apos; group by l_orderkey, o_orderdate, o_shippriority order by revenue desc, o_orderdate limit 10;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G3 - Q4" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select o_orderpriority, count(*) as order_count from orders where o_tenant_id = 1002 and o_orderdate &gt;= date &apos;1993-12-01&apos; and o_orderdate &lt; date &apos;1993-12-01&apos; + interval &apos;3&apos; month and exists ( select * from lineitem where l_tenant_id = 1002 and l_orderkey = o_orderkey and l_commitdate &lt; l_receiptdate ) group by o_orderpriority order by o_orderpriority;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G3 - Q5" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select n_name, sum(l_extendedprice * (1 - l_discount)) as revenue from customer, orders, lineitem, supplier, nation, region where c_tenant_id = 1002 and o_tenant_id = 1002 and l_tenant_id = 1002 and s_tenant_id = 1002 and c_custkey = o_custkey and l_orderkey = o_orderkey and l_suppkey = s_suppkey and c_nationkey = s_nationkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; and o_orderdate &gt;= date &apos;1994-01-01&apos; and o_orderdate &lt; date &apos;1994-01-01&apos; + interval &apos;1&apos; year group by n_name order by revenue desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G3 - Q6" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select sum(l_extendedprice * l_discount) as revenue from lineitem where l_tenant_id = 1002 and l_shipdate &gt;= date &apos;1994-01-01&apos; and l_shipdate &lt; date &apos;1994-01-01&apos; + interval &apos;1&apos; year and l_discount between 0.09 - 0.01 and 0.09 + 0.01 and l_quantity &lt; 25;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G3 - Q7" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select supp_nation, cust_nation, l_year, sum(volume) as revenue from ( select n1.n_name as supp_nation, n2.n_name as cust_nation, extract(year from l_shipdate) as l_year, l_extendedprice * (1 - l_discount) as volume from supplier, lineitem, orders, customer, nation n1, nation n2 where s_tenant_id = 1002 and l_tenant_id = 1002 and o_tenant_id = 1002 and c_tenant_id = 1002 and s_suppkey = l_suppkey and o_orderkey = l_orderkey and c_custkey = o_custkey and s_nationkey = n1.n_nationkey and c_nationkey = n2.n_nationkey and ( (n1.n_name = &apos;RUSSIA&apos; and n2.n_name = &apos;ROMANIA&apos;) or (n1.n_name = &apos;ROMANIA&apos; and n2.n_name = &apos;RUSSIA&apos;) ) and l_shipdate between date &apos;1995-01-01&apos; and date &apos;1996-12-31&apos; ) as shipping group by supp_nation, cust_nation, l_year order by supp_nation, cust_nation, l_year;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G3 - Q8" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select o_year, sum(case when nation = &apos;ROMANIA&apos; then volume else 0 end) / sum(volume) as mkt_share from ( select extract(year from o_orderdate) as o_year, l_extendedprice * (1 - l_discount) as volume, n2.n_name as nation from part, supplier, lineitem, orders, customer, nation n1, nation n2, region where p_tenant_id = 1002 and s_tenant_id = 1002 and l_tenant_id = 1002 and o_tenant_id = 1002 and c_tenant_id = 1002 and p_partkey = l_partkey and s_suppkey = l_suppkey and l_orderkey = o_orderkey and o_custkey = c_custkey and c_nationkey = n1.n_nationkey and n1.n_regionkey = r_regionkey and r_name = &apos;EUROPE&apos; and s_nationkey = n2.n_nationkey and o_orderdate between date &apos;1995-01-01&apos; and date &apos;1996-12-31&apos; and p_type = &apos;PROMO ANODIZED TIN&apos; ) as all_nations group by o_year order by o_year;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G3 - Q9" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select nation, o_year, sum(amount) as sum_profit from ( select n_name as nation, extract(year from o_orderdate) as o_year, l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity as amount from part, supplier, lineitem, partsupp, orders, nation where p_tenant_id = 1002 and s_tenant_id = 1002 and l_tenant_id = 1002 and ps_tenant_id = 1002 and o_tenant_id = 1002 and s_suppkey = l_suppkey and ps_suppkey = l_suppkey and ps_partkey = l_partkey and p_partkey = l_partkey and o_orderkey = l_orderkey and s_nationkey = n_nationkey and p_name like &apos;%sienna%&apos; ) as profit group by nation, o_year order by nation, o_year desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G3 - Q10" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_custkey, c_name, sum(l_extendedprice * (1 - l_discount)) as revenue, c_acctbal, n_name, c_address, c_phone, c_comment from customer, orders, lineitem, nation where c_tenant_id = 1002 and o_tenant_id = 1002 and l_tenant_id = 1002 and c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate &gt;= date &apos;1993-04-01&apos; and o_orderdate &lt; date &apos;1993-04-01&apos; + interval &apos;3&apos; month and l_returnflag = &apos;R&apos; and c_nationkey = n_nationkey group by c_custkey, c_name, c_acctbal, c_phone, n_name, c_address, c_comment order by revenue desc limit 20;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G3 - Q11" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select ps_partkey, sum(ps_supplycost * ps_availqty) as value from partsupp, supplier, nation where ps_tenant_id = 1002 and s_tenant_id = 1002 and ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = &apos;INDONESIA&apos; group by ps_partkey having sum(ps_supplycost * ps_availqty) &gt; ( select sum(ps_supplycost * ps_availqty) * 0.0000090909 from partsupp, supplier, nation where ps_tenant_id = 1002 and s_tenant_id = 1002 and ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = &apos;INDONESIA&apos; ) order by value desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G3 - Q12" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select l_shipmode, sum(case when o_orderpriority = &apos;1-URGENT&apos; or o_orderpriority = &apos;2-HIGH&apos; then 1 else 0 end) as high_line_count, sum(case when o_orderpriority &lt;&gt; &apos;1-URGENT&apos; and o_orderpriority &lt;&gt; &apos;2-HIGH&apos; then 1 else 0 end) as low_line_count from orders, lineitem where o_tenant_id = 1002 and l_tenant_id = 1002 and o_orderkey = l_orderkey and l_shipmode in (&apos;RAIL&apos;, &apos;TRUCK&apos;) and l_commitdate &lt; l_receiptdate and l_shipdate &lt; l_commitdate and l_receiptdate &gt;= date &apos;1995-01-01&apos; and l_receiptdate &lt; date &apos;1995-01-01&apos; + interval &apos;1&apos; year group by l_shipmode order by l_shipmode;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G3 - Q13" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_count, count(*) as custdist from ( select c_custkey, count(o_orderkey) from customer left outer join orders on c_custkey = o_custkey and o_comment not like &apos;%pending%accounts%&apos; where c_tenant_id = 1002 group by c_custkey ) as c_orders (c_custkey, c_count) group by c_count order by custdist desc, c_count desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G3 - Q14" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select 100.00 * sum(case when p_type like &apos;PROMO%&apos; then l_extendedprice * (1 - l_discount) else 0 end) / sum(l_extendedprice * (1 - l_discount)) as promo_revenue from lineitem, part where l_tenant_id = 1002 and p_tenant_id = 1002 and l_partkey = p_partkey and l_shipdate &gt;= date &apos;1995-12-01&apos; and l_shipdate &lt; date &apos;1995-12-01&apos; + interval &apos;1&apos; month;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G3 - Q15" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Callable Statement</stringProp>
            <stringProp name="query">create view revenue0 (supplier_no, total_revenue) as select l_suppkey, sum(l_extendedprice * (1 - l_discount)) from lineitem where l_tenant_id = 1002 and l_shipdate &gt;= date &apos;1996-03-01&apos; and l_shipdate &lt; date &apos;1996-03-01&apos; + interval &apos;3&apos; month group by l_suppkey; select s_suppkey, s_name, s_address, s_phone, total_revenue from supplier, revenue0 where s_tenant_id = 1002 and s_suppkey = supplier_no and total_revenue = ( select max(total_revenue) from revenue0 ) order by s_suppkey; drop view revenue0;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G3 - Q16" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select p_brand, p_type, p_size, count(distinct ps_suppkey) as supplier_cnt from partsupp, part where ps_tenant_id = 1002 and p_tenant_id = 1002 and p_partkey = ps_partkey and p_brand &lt;&gt; &apos;Brand#52&apos; and p_type not like &apos;LARGE BRUSHED%&apos; and p_size in (20, 35, 34, 50, 23, 28, 48, 17) and ps_suppkey not in ( select s_suppkey from supplier where s_tenant_id = 1002 and s_comment like &apos;%Customer%Complaints%&apos; ) group by p_brand, p_type, p_size order by supplier_cnt desc, p_brand, p_type, p_size;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G3 - Q18" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice, sum(l_quantity) from customer, orders, lineitem where c_tenant_id = 1002 and o_tenant_id = 1002 and l_tenant_id = 1002 and o_orderkey in ( select l_orderkey from lineitem where l_tenant_id = 1002 group by l_orderkey having sum(l_quantity) &gt; 314 ) and c_custkey = o_custkey and o_orderkey = l_orderkey group by c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice order by o_totalprice desc, o_orderdate limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G3 - Q19" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select sum(l_extendedprice* (1 - l_discount)) as revenue from lineitem, part where l_tenant_id = 1002 and p_tenant_id = 1002 and (( p_partkey = l_partkey and p_brand = &apos;Brand#24&apos; and p_container in (&apos;SM CasE&apos;, &apos;SM BOX&apos;, &apos;SM PACK&apos;, &apos;SM PKG&apos;) and l_quantity &gt;= 10 and l_quantity &lt;= 10 + 10 and p_size between 1 and 5 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ) or ( p_partkey = l_partkey and p_brand = &apos;Brand#45&apos; and p_container in (&apos;MED BAG&apos;, &apos;MED BOX&apos;, &apos;MED PKG&apos;, &apos;MED PACK&apos;) and l_quantity &gt;= 12 and l_quantity &lt;= 12 + 10 and p_size between 1 and 10 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ) or ( p_partkey = l_partkey and p_brand = &apos;Brand#33&apos; and p_container in (&apos;LG CasE&apos;, &apos;LG BOX&apos;, &apos;LG PACK&apos;, &apos;LG PKG&apos;) and l_quantity &gt;= 30 and l_quantity &lt;= 30 + 10 and p_size between 1 and 15 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ));
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G3 - Q21" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select s_name, count(*) as numwait from supplier, lineitem l1, orders, nation where s_tenant_id = 1002 and l1.l_tenant_id = 1002 and o_tenant_id = 1002 and s_suppkey = l1.l_suppkey and o_orderkey = l1.l_orderkey and o_orderstatus = &apos;F&apos; and l1.l_receiptdate &gt; l1.l_commitdate and exists ( select * from lineitem l2 where l2.l_tenant_id = 1002 and l2.l_orderkey = l1.l_orderkey and l2.l_suppkey &lt;&gt; l1.l_suppkey ) and not exists ( select * from lineitem l3 where l3.l_tenant_id = 1002 and l3.l_orderkey = l1.l_orderkey and l3.l_suppkey &lt;&gt; l1.l_suppkey and l3.l_receiptdate &gt; l3.l_commitdate ) and s_nationkey = n_nationkey and n_name = &apos;MOZAMBIQUE&apos; group by s_name order by numwait desc, s_name limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G3 - Q22" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select cntrycode, count(*) as numcust, sum(c_acctbal) as totacctbal from ( select substring(c_phone from 1 for 2) as cntrycode, c_acctbal from customer where c_tenant_id = 1002 and substring(c_phone from 1 for 2) in (&apos;34&apos;, &apos;20&apos;, &apos;23&apos;, &apos;33&apos;, &apos;18&apos;, &apos;10&apos;, &apos;30&apos;) and c_acctbal &gt; ( select avg(c_acctbal) from customer where c_tenant_id = 1002 and c_acctbal &gt; 0.00 and substring(c_phone from 1 for 2) in (&apos;34&apos;, &apos;20&apos;, &apos;23&apos;, &apos;33&apos;, &apos;18&apos;, &apos;10&apos;, &apos;30&apos;) ) and not exists ( select * from orders where o_tenant_id = 1002 and o_custkey = c_custkey ) ) as custsale group by cntrycode order by cntrycode;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G3 - RF1" enabled="false">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO region (r_regionkey, r_name, r_comment) VALUES (123476241, &apos;AFRICA&apos;, &apos;lar deposits. blithely final packages cajole. regular&apos;);
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G3 - RF2" enabled="false">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">DELETE FROM region WHERE r_regionkey = 123476241;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="G4" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <RandomOrderController guiclass="RandomOrderControllerGui" testclass="RandomOrderController" testname="Random Order Controller" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G4 - Q1" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="query">select l_returnflag, l_linestatus, sum(l_quantity) as sum_qty, sum(l_extendedprice) as sum_base_price, sum(l_extendedprice * (1 - l_discount)) as sum_disc_price, sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge, avg(l_quantity) as avg_qty, avg(l_extendedprice) as avg_price, avg(l_discount) as avg_disc, count(*) as count_order from lineitem where l_tenant_id = 1003 and l_shipdate &lt;= date &apos;1998-12-01&apos; - interval &apos;61&apos; day group by l_returnflag, l_linestatus order by l_returnflag, l_linestatus;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G4 - Q2" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select s_acctbal, s_name, n_name, p_partkey, p_mfgr, s_address, s_phone, s_comment from part, supplier, partsupp, nation, region where p_tenant_id = 1003 and s_tenant_id = 1003 and ps_tenant_id = 1003 and p_partkey = ps_partkey and s_suppkey = ps_suppkey and p_size = 14 and p_type like &apos;%BRASS&apos; and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; and ps_supplycost = ( select min(ps_supplycost) from partsupp, supplier, nation, region where ps_tenant_id = 1003 and s_tenant_id = 1003 and p_partkey = ps_partkey and s_suppkey = ps_suppkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; ) order by s_acctbal desc, n_name, s_name, p_partkey limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G4 - Q3" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select l_orderkey, sum(l_extendedprice * (1 - l_discount)) as revenue, o_orderdate, o_shippriority from customer, orders, lineitem where c_tenant_id = 1003 and o_tenant_id = 1003 and l_tenant_id = 1003 and c_mktsegment = &apos;BUILDING&apos; and c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate &lt; date &apos;1995-03-06&apos; and l_shipdate &gt; date &apos;1995-03-06&apos; group by l_orderkey, o_orderdate, o_shippriority order by revenue desc, o_orderdate limit 10;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G4 - Q4" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select o_orderpriority, count(*) as order_count from orders where o_tenant_id = 1003 and o_orderdate &gt;= date &apos;1993-12-01&apos; and o_orderdate &lt; date &apos;1993-12-01&apos; + interval &apos;3&apos; month and exists ( select * from lineitem where l_tenant_id = 1003 and l_orderkey = o_orderkey and l_commitdate &lt; l_receiptdate ) group by o_orderpriority order by o_orderpriority;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G4 - Q5" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select n_name, sum(l_extendedprice * (1 - l_discount)) as revenue from customer, orders, lineitem, supplier, nation, region where c_tenant_id = 1003 and o_tenant_id = 1003 and l_tenant_id = 1003 and s_tenant_id = 1003 and c_custkey = o_custkey and l_orderkey = o_orderkey and l_suppkey = s_suppkey and c_nationkey = s_nationkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; and o_orderdate &gt;= date &apos;1994-01-01&apos; and o_orderdate &lt; date &apos;1994-01-01&apos; + interval &apos;1&apos; year group by n_name order by revenue desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G4 - Q6" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select sum(l_extendedprice * l_discount) as revenue from lineitem where l_tenant_id = 1003 and l_shipdate &gt;= date &apos;1994-01-01&apos; and l_shipdate &lt; date &apos;1994-01-01&apos; + interval &apos;1&apos; year and l_discount between 0.09 - 0.01 and 0.09 + 0.01 and l_quantity &lt; 25;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G4 - Q7" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select supp_nation, cust_nation, l_year, sum(volume) as revenue from ( select n1.n_name as supp_nation, n2.n_name as cust_nation, extract(year from l_shipdate) as l_year, l_extendedprice * (1 - l_discount) as volume from supplier, lineitem, orders, customer, nation n1, nation n2 where s_tenant_id = 1003 and l_tenant_id = 1003 and o_tenant_id = 1003 and c_tenant_id = 1003 and s_suppkey = l_suppkey and o_orderkey = l_orderkey and c_custkey = o_custkey and s_nationkey = n1.n_nationkey and c_nationkey = n2.n_nationkey and ( (n1.n_name = &apos;RUSSIA&apos; and n2.n_name = &apos;ROMANIA&apos;) or (n1.n_name = &apos;ROMANIA&apos; and n2.n_name = &apos;RUSSIA&apos;) ) and l_shipdate between date &apos;1995-01-01&apos; and date &apos;1996-12-31&apos; ) as shipping group by supp_nation, cust_nation, l_year order by supp_nation, cust_nation, l_year;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G4 - Q8" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select o_year, sum(case when nation = &apos;ROMANIA&apos; then volume else 0 end) / sum(volume) as mkt_share from ( select extract(year from o_orderdate) as o_year, l_extendedprice * (1 - l_discount) as volume, n2.n_name as nation from part, supplier, lineitem, orders, customer, nation n1, nation n2, region where p_tenant_id = 1003 and s_tenant_id = 1003 and l_tenant_id = 1003 and o_tenant_id = 1003 and c_tenant_id = 1003 and p_partkey = l_partkey and s_suppkey = l_suppkey and l_orderkey = o_orderkey and o_custkey = c_custkey and c_nationkey = n1.n_nationkey and n1.n_regionkey = r_regionkey and r_name = &apos;EUROPE&apos; and s_nationkey = n2.n_nationkey and o_orderdate between date &apos;1995-01-01&apos; and date &apos;1996-12-31&apos; and p_type = &apos;PROMO ANODIZED TIN&apos; ) as all_nations group by o_year order by o_year;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G4 - Q9" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select nation, o_year, sum(amount) as sum_profit from ( select n_name as nation, extract(year from o_orderdate) as o_year, l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity as amount from part, supplier, lineitem, partsupp, orders, nation where p_tenant_id = 1003 and s_tenant_id = 1003 and l_tenant_id = 1003 and ps_tenant_id = 1003 and o_tenant_id = 1003 and s_suppkey = l_suppkey and ps_suppkey = l_suppkey and ps_partkey = l_partkey and p_partkey = l_partkey and o_orderkey = l_orderkey and s_nationkey = n_nationkey and p_name like &apos;%sienna%&apos; ) as profit group by nation, o_year order by nation, o_year desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G4 - Q10" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_custkey, c_name, sum(l_extendedprice * (1 - l_discount)) as revenue, c_acctbal, n_name, c_address, c_phone, c_comment from customer, orders, lineitem, nation where c_tenant_id = 1003 and o_tenant_id = 1003 and l_tenant_id = 1003 and c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate &gt;= date &apos;1993-04-01&apos; and o_orderdate &lt; date &apos;1993-04-01&apos; + interval &apos;3&apos; month and l_returnflag = &apos;R&apos; and c_nationkey = n_nationkey group by c_custkey, c_name, c_acctbal, c_phone, n_name, c_address, c_comment order by revenue desc limit 20;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G4 - Q11" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select ps_partkey, sum(ps_supplycost * ps_availqty) as value from partsupp, supplier, nation where ps_tenant_id = 1003 and s_tenant_id = 1003 and ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = &apos;INDONESIA&apos; group by ps_partkey having sum(ps_supplycost * ps_availqty) &gt; ( select sum(ps_supplycost * ps_availqty) * 0.0000090909 from partsupp, supplier, nation where ps_tenant_id = 1003 and s_tenant_id = 1003 and ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = &apos;INDONESIA&apos; ) order by value desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G4 - Q12" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select l_shipmode, sum(case when o_orderpriority = &apos;1-URGENT&apos; or o_orderpriority = &apos;2-HIGH&apos; then 1 else 0 end) as high_line_count, sum(case when o_orderpriority &lt;&gt; &apos;1-URGENT&apos; and o_orderpriority &lt;&gt; &apos;2-HIGH&apos; then 1 else 0 end) as low_line_count from orders, lineitem where o_tenant_id = 1003 and l_tenant_id = 1003 and o_orderkey = l_orderkey and l_shipmode in (&apos;RAIL&apos;, &apos;TRUCK&apos;) and l_commitdate &lt; l_receiptdate and l_shipdate &lt; l_commitdate and l_receiptdate &gt;= date &apos;1995-01-01&apos; and l_receiptdate &lt; date &apos;1995-01-01&apos; + interval &apos;1&apos; year group by l_shipmode order by l_shipmode;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G4 - Q13" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_count, count(*) as custdist from ( select c_custkey, count(o_orderkey) from customer left outer join orders on c_custkey = o_custkey and o_comment not like &apos;%pending%accounts%&apos; where c_tenant_id = 1003 group by c_custkey ) as c_orders (c_custkey, c_count) group by c_count order by custdist desc, c_count desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G4 - Q14" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select 100.00 * sum(case when p_type like &apos;PROMO%&apos; then l_extendedprice * (1 - l_discount) else 0 end) / sum(l_extendedprice * (1 - l_discount)) as promo_revenue from lineitem, part where l_tenant_id = 1003 and p_tenant_id = 1003 and l_partkey = p_partkey and l_shipdate &gt;= date &apos;1995-12-01&apos; and l_shipdate &lt; date &apos;1995-12-01&apos; + interval &apos;1&apos; month;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G4 - Q15" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Callable Statement</stringProp>
            <stringProp name="query">create view revenue0 (supplier_no, total_revenue) as select l_suppkey, sum(l_extendedprice * (1 - l_discount)) from lineitem where l_tenant_id = 1003 and l_shipdate &gt;= date &apos;1993-12-01&apos; and l_shipdate &lt; date &apos;1993-12-01&apos; + interval &apos;3&apos; month group by l_suppkey; select s_suppkey, s_name, s_address, s_phone, total_revenue from supplier, revenue0 where s_tenant_id = 1003 and s_suppkey = supplier_no and total_revenue = ( select max(total_revenue) from revenue0 ) order by s_suppkey; drop view revenue0;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G4 - Q16" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select p_brand, p_type, p_size, count(distinct ps_suppkey) as supplier_cnt from partsupp, part where ps_tenant_id = 1003 and p_tenant_id = 1003 and p_partkey = ps_partkey and p_brand &lt;&gt; &apos;Brand#52&apos; and p_type not like &apos;LARGE BRUSHED%&apos; and p_size in (20, 35, 34, 50, 23, 28, 48, 17) and ps_suppkey not in ( select s_suppkey from supplier where s_tenant_id = 1003 and s_comment like &apos;%Customer%Complaints%&apos; ) group by p_brand, p_type, p_size order by supplier_cnt desc, p_brand, p_type, p_size;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G4 - Q18" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice, sum(l_quantity) from customer, orders, lineitem where c_tenant_id = 1003 and o_tenant_id = 1003 and l_tenant_id = 1003 and o_orderkey in ( select l_orderkey from lineitem where l_tenant_id = 1003 group by l_orderkey having sum(l_quantity) &gt; 314 ) and c_custkey = o_custkey and o_orderkey = l_orderkey group by c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice order by o_totalprice desc, o_orderdate limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G4 - Q19" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select sum(l_extendedprice* (1 - l_discount)) as revenue from lineitem, part where l_tenant_id = 1003 and p_tenant_id = 1003 and (( p_partkey = l_partkey and p_brand = &apos;Brand#24&apos; and p_container in (&apos;SM CasE&apos;, &apos;SM BOX&apos;, &apos;SM PACK&apos;, &apos;SM PKG&apos;) and l_quantity &gt;= 10 and l_quantity &lt;= 10 + 10 and p_size between 1 and 5 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ) or ( p_partkey = l_partkey and p_brand = &apos;Brand#45&apos; and p_container in (&apos;MED BAG&apos;, &apos;MED BOX&apos;, &apos;MED PKG&apos;, &apos;MED PACK&apos;) and l_quantity &gt;= 12 and l_quantity &lt;= 12 + 10 and p_size between 1 and 10 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ) or ( p_partkey = l_partkey and p_brand = &apos;Brand#33&apos; and p_container in (&apos;LG CasE&apos;, &apos;LG BOX&apos;, &apos;LG PACK&apos;, &apos;LG PKG&apos;) and l_quantity &gt;= 30 and l_quantity &lt;= 30 + 10 and p_size between 1 and 15 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ));
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G4 - Q21" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select s_name, count(*) as numwait from supplier, lineitem l1, orders, nation where s_tenant_id = 1003 and l1.l_tenant_id = 1003 and o_tenant_id = 1003 and s_suppkey = l1.l_suppkey and o_orderkey = l1.l_orderkey and o_orderstatus = &apos;F&apos; and l1.l_receiptdate &gt; l1.l_commitdate and exists ( select * from lineitem l2 where l2.l_tenant_id = 1003 and l2.l_orderkey = l1.l_orderkey and l2.l_suppkey &lt;&gt; l1.l_suppkey ) and not exists ( select * from lineitem l3 where l3.l_tenant_id = 1003 and l3.l_orderkey = l1.l_orderkey and l3.l_suppkey &lt;&gt; l1.l_suppkey and l3.l_receiptdate &gt; l3.l_commitdate ) and s_nationkey = n_nationkey and n_name = &apos;MOZAMBIQUE&apos; group by s_name order by numwait desc, s_name limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G4 - Q22" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select cntrycode, count(*) as numcust, sum(c_acctbal) as totacctbal from ( select substring(c_phone from 1 for 2) as cntrycode, c_acctbal from customer where c_tenant_id = 1003 and substring(c_phone from 1 for 2) in (&apos;34&apos;, &apos;20&apos;, &apos;23&apos;, &apos;33&apos;, &apos;18&apos;, &apos;10&apos;, &apos;30&apos;) and c_acctbal &gt; ( select avg(c_acctbal) from customer where c_tenant_id = 1003 and c_acctbal &gt; 0.00 and substring(c_phone from 1 for 2) in (&apos;34&apos;, &apos;20&apos;, &apos;23&apos;, &apos;33&apos;, &apos;18&apos;, &apos;10&apos;, &apos;30&apos;) ) and not exists ( select * from orders where o_tenant_id = 1003 and o_custkey = c_custkey ) ) as custsale group by cntrycode order by cntrycode;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G4 - RF1" enabled="false">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO region (r_regionkey, r_name, r_comment) VALUES (123476241, &apos;AFRICA&apos;, &apos;lar deposits. blithely final packages cajole. regular&apos;);
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G4 - RF2" enabled="false">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">DELETE FROM region WHERE r_regionkey = 123476241;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="G5" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <RandomOrderController guiclass="RandomOrderControllerGui" testclass="RandomOrderController" testname="Random Order Controller" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G5 - Q1" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="query">select l_returnflag, l_linestatus, sum(l_quantity) as sum_qty, sum(l_extendedprice) as sum_base_price, sum(l_extendedprice * (1 - l_discount)) as sum_disc_price, sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge, avg(l_quantity) as avg_qty, avg(l_extendedprice) as avg_price, avg(l_discount) as avg_disc, count(*) as count_order from lineitem where l_tenant_id = 1004 and l_shipdate &lt;= date &apos;1998-12-01&apos; - interval &apos;61&apos; day group by l_returnflag, l_linestatus order by l_returnflag, l_linestatus;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G5 - Q2" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select s_acctbal, s_name, n_name, p_partkey, p_mfgr, s_address, s_phone, s_comment from part, supplier, partsupp, nation, region where p_tenant_id = 1004 and s_tenant_id = 1004 and ps_tenant_id = 1004 and p_partkey = ps_partkey and s_suppkey = ps_suppkey and p_size = 14 and p_type like &apos;%BRASS&apos; and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; and ps_supplycost = ( select min(ps_supplycost) from partsupp, supplier, nation, region where ps_tenant_id = 1004 and s_tenant_id = 1004 and p_partkey = ps_partkey and s_suppkey = ps_suppkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; ) order by s_acctbal desc, n_name, s_name, p_partkey limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G5 - Q3" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select l_orderkey, sum(l_extendedprice * (1 - l_discount)) as revenue, o_orderdate, o_shippriority from customer, orders, lineitem where c_tenant_id = 1004 and o_tenant_id = 1004 and l_tenant_id = 1004 and c_mktsegment = &apos;BUILDING&apos; and c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate &lt; date &apos;1995-03-06&apos; and l_shipdate &gt; date &apos;1995-03-06&apos; group by l_orderkey, o_orderdate, o_shippriority order by revenue desc, o_orderdate limit 10;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G5 - Q4" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select o_orderpriority, count(*) as order_count from orders where o_tenant_id = 1004 and o_orderdate &gt;= date &apos;1993-12-01&apos; and o_orderdate &lt; date &apos;1993-12-01&apos; + interval &apos;3&apos; month and exists ( select * from lineitem where l_tenant_id = 1004 and l_orderkey = o_orderkey and l_commitdate &lt; l_receiptdate ) group by o_orderpriority order by o_orderpriority;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G5 - Q5" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select n_name, sum(l_extendedprice * (1 - l_discount)) as revenue from customer, orders, lineitem, supplier, nation, region where c_tenant_id = 1004 and o_tenant_id = 1004 and l_tenant_id = 1004 and s_tenant_id = 1004 and c_custkey = o_custkey and l_orderkey = o_orderkey and l_suppkey = s_suppkey and c_nationkey = s_nationkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; and o_orderdate &gt;= date &apos;1994-01-01&apos; and o_orderdate &lt; date &apos;1994-01-01&apos; + interval &apos;1&apos; year group by n_name order by revenue desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G5 - Q6" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select sum(l_extendedprice * l_discount) as revenue from lineitem where l_tenant_id = 1004 and l_shipdate &gt;= date &apos;1994-01-01&apos; and l_shipdate &lt; date &apos;1994-01-01&apos; + interval &apos;1&apos; year and l_discount between 0.09 - 0.01 and 0.09 + 0.01 and l_quantity &lt; 25;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G5 - Q7" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select supp_nation, cust_nation, l_year, sum(volume) as revenue from ( select n1.n_name as supp_nation, n2.n_name as cust_nation, extract(year from l_shipdate) as l_year, l_extendedprice * (1 - l_discount) as volume from supplier, lineitem, orders, customer, nation n1, nation n2 where s_tenant_id = 1004 and l_tenant_id = 1004 and o_tenant_id = 1004 and c_tenant_id = 1004 and s_suppkey = l_suppkey and o_orderkey = l_orderkey and c_custkey = o_custkey and s_nationkey = n1.n_nationkey and c_nationkey = n2.n_nationkey and ( (n1.n_name = &apos;RUSSIA&apos; and n2.n_name = &apos;ROMANIA&apos;) or (n1.n_name = &apos;ROMANIA&apos; and n2.n_name = &apos;RUSSIA&apos;) ) and l_shipdate between date &apos;1995-01-01&apos; and date &apos;1996-12-31&apos; ) as shipping group by supp_nation, cust_nation, l_year order by supp_nation, cust_nation, l_year;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G5 - Q8" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select o_year, sum(case when nation = &apos;ROMANIA&apos; then volume else 0 end) / sum(volume) as mkt_share from ( select extract(year from o_orderdate) as o_year, l_extendedprice * (1 - l_discount) as volume, n2.n_name as nation from part, supplier, lineitem, orders, customer, nation n1, nation n2, region where p_tenant_id = 1004 and s_tenant_id = 1004 and l_tenant_id = 1004 and o_tenant_id = 1004 and c_tenant_id = 1004 and p_partkey = l_partkey and s_suppkey = l_suppkey and l_orderkey = o_orderkey and o_custkey = c_custkey and c_nationkey = n1.n_nationkey and n1.n_regionkey = r_regionkey and r_name = &apos;EUROPE&apos; and s_nationkey = n2.n_nationkey and o_orderdate between date &apos;1995-01-01&apos; and date &apos;1996-12-31&apos; and p_type = &apos;PROMO ANODIZED TIN&apos; ) as all_nations group by o_year order by o_year;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G5 - Q9" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select nation, o_year, sum(amount) as sum_profit from ( select n_name as nation, extract(year from o_orderdate) as o_year, l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity as amount from part, supplier, lineitem, partsupp, orders, nation where p_tenant_id = 1004 and s_tenant_id = 1004 and l_tenant_id = 1004 and ps_tenant_id = 1004 and o_tenant_id = 1004 and s_suppkey = l_suppkey and ps_suppkey = l_suppkey and ps_partkey = l_partkey and p_partkey = l_partkey and o_orderkey = l_orderkey and s_nationkey = n_nationkey and p_name like &apos;%sienna%&apos; ) as profit group by nation, o_year order by nation, o_year desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G5 - Q10" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_custkey, c_name, sum(l_extendedprice * (1 - l_discount)) as revenue, c_acctbal, n_name, c_address, c_phone, c_comment from customer, orders, lineitem, nation where c_tenant_id = 1004 and o_tenant_id = 1004 and l_tenant_id = 1004 and c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate &gt;= date &apos;1993-04-01&apos; and o_orderdate &lt; date &apos;1993-04-01&apos; + interval &apos;3&apos; month and l_returnflag = &apos;R&apos; and c_nationkey = n_nationkey group by c_custkey, c_name, c_acctbal, c_phone, n_name, c_address, c_comment order by revenue desc limit 20;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G5 - Q11" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select ps_partkey, sum(ps_supplycost * ps_availqty) as value from partsupp, supplier, nation where ps_tenant_id = 1004 and s_tenant_id = 1004 and ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = &apos;INDONESIA&apos; group by ps_partkey having sum(ps_supplycost * ps_availqty) &gt; ( select sum(ps_supplycost * ps_availqty) * 0.0000090909 from partsupp, supplier, nation where ps_tenant_id = 1004 and s_tenant_id = 1004 and ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = &apos;INDONESIA&apos; ) order by value desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G5 - Q12" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select l_shipmode, sum(case when o_orderpriority = &apos;1-URGENT&apos; or o_orderpriority = &apos;2-HIGH&apos; then 1 else 0 end) as high_line_count, sum(case when o_orderpriority &lt;&gt; &apos;1-URGENT&apos; and o_orderpriority &lt;&gt; &apos;2-HIGH&apos; then 1 else 0 end) as low_line_count from orders, lineitem where o_tenant_id = 1004 and l_tenant_id = 1004 and o_orderkey = l_orderkey and l_shipmode in (&apos;RAIL&apos;, &apos;TRUCK&apos;) and l_commitdate &lt; l_receiptdate and l_shipdate &lt; l_commitdate and l_receiptdate &gt;= date &apos;1995-01-01&apos; and l_receiptdate &lt; date &apos;1995-01-01&apos; + interval &apos;1&apos; year group by l_shipmode order by l_shipmode;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G5 - Q13" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_count, count(*) as custdist from ( select c_custkey, count(o_orderkey) from customer left outer join orders on c_custkey = o_custkey and o_comment not like &apos;%pending%accounts%&apos; where c_tenant_id = 1004 group by c_custkey ) as c_orders (c_custkey, c_count) group by c_count order by custdist desc, c_count desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G5 - Q14" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select 100.00 * sum(case when p_type like &apos;PROMO%&apos; then l_extendedprice * (1 - l_discount) else 0 end) / sum(l_extendedprice * (1 - l_discount)) as promo_revenue from lineitem, part where l_tenant_id = 1004 and p_tenant_id = 1004 and l_partkey = p_partkey and l_shipdate &gt;= date &apos;1995-12-01&apos; and l_shipdate &lt; date &apos;1995-12-01&apos; + interval &apos;1&apos; month;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G5 - Q15" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Callable Statement</stringProp>
            <stringProp name="query">create view revenue0 (supplier_no, total_revenue) as select l_suppkey, sum(l_extendedprice * (1 - l_discount)) from lineitem where l_tenant_id = 1004 and l_shipdate &gt;= date &apos;1996-07-01&apos; and l_shipdate &lt; date &apos;1996-07-01&apos; + interval &apos;3&apos; month group by l_suppkey; select s_suppkey, s_name, s_address, s_phone, total_revenue from supplier, revenue0 where s_tenant_id = 1004 and s_suppkey = supplier_no and total_revenue = ( select max(total_revenue) from revenue0 ) order by s_suppkey; drop view revenue0;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G5 - Q16" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select p_brand, p_type, p_size, count(distinct ps_suppkey) as supplier_cnt from partsupp, part where ps_tenant_id = 1004 and p_tenant_id = 1004 and p_partkey = ps_partkey and p_brand &lt;&gt; &apos;Brand#52&apos; and p_type not like &apos;LARGE BRUSHED%&apos; and p_size in (20, 35, 34, 50, 23, 28, 48, 17) and ps_suppkey not in ( select s_suppkey from supplier where s_tenant_id = 1004 and s_comment like &apos;%Customer%Complaints%&apos; ) group by p_brand, p_type, p_size order by supplier_cnt desc, p_brand, p_type, p_size;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G5 - Q18" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice, sum(l_quantity) from customer, orders, lineitem where c_tenant_id = 1004 and o_tenant_id = 1004 and l_tenant_id = 1004 and o_orderkey in ( select l_orderkey from lineitem where l_tenant_id = 1004 group by l_orderkey having sum(l_quantity) &gt; 314 ) and c_custkey = o_custkey and o_orderkey = l_orderkey group by c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice order by o_totalprice desc, o_orderdate limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G5 - Q19" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select sum(l_extendedprice* (1 - l_discount)) as revenue from lineitem, part where l_tenant_id = 1004 and p_tenant_id = 1004 and (( p_partkey = l_partkey and p_brand = &apos;Brand#24&apos; and p_container in (&apos;SM CasE&apos;, &apos;SM BOX&apos;, &apos;SM PACK&apos;, &apos;SM PKG&apos;) and l_quantity &gt;= 10 and l_quantity &lt;= 10 + 10 and p_size between 1 and 5 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ) or ( p_partkey = l_partkey and p_brand = &apos;Brand#45&apos; and p_container in (&apos;MED BAG&apos;, &apos;MED BOX&apos;, &apos;MED PKG&apos;, &apos;MED PACK&apos;) and l_quantity &gt;= 12 and l_quantity &lt;= 12 + 10 and p_size between 1 and 10 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ) or ( p_partkey = l_partkey and p_brand = &apos;Brand#33&apos; and p_container in (&apos;LG CasE&apos;, &apos;LG BOX&apos;, &apos;LG PACK&apos;, &apos;LG PKG&apos;) and l_quantity &gt;= 30 and l_quantity &lt;= 30 + 10 and p_size between 1 and 15 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ));
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G5 - Q21" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select s_name, count(*) as numwait from supplier, lineitem l1, orders, nation where s_tenant_id = 1004 and l1.l_tenant_id = 1004 and o_tenant_id = 1004 and s_suppkey = l1.l_suppkey and o_orderkey = l1.l_orderkey and o_orderstatus = &apos;F&apos; and l1.l_receiptdate &gt; l1.l_commitdate and exists ( select * from lineitem l2 where l2.l_tenant_id = 1004 and l2.l_orderkey = l1.l_orderkey and l2.l_suppkey &lt;&gt; l1.l_suppkey ) and not exists ( select * from lineitem l3 where l3.l_tenant_id = 1004 and l3.l_orderkey = l1.l_orderkey and l3.l_suppkey &lt;&gt; l1.l_suppkey and l3.l_receiptdate &gt; l3.l_commitdate ) and s_nationkey = n_nationkey and n_name = &apos;MOZAMBIQUE&apos; group by s_name order by numwait desc, s_name limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G5 - Q22" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select cntrycode, count(*) as numcust, sum(c_acctbal) as totacctbal from ( select substring(c_phone from 1 for 2) as cntrycode, c_acctbal from customer where c_tenant_id = 1004 and substring(c_phone from 1 for 2) in (&apos;34&apos;, &apos;20&apos;, &apos;23&apos;, &apos;33&apos;, &apos;18&apos;, &apos;10&apos;, &apos;30&apos;) and c_acctbal &gt; ( select avg(c_acctbal) from customer where c_tenant_id = 1004 and c_acctbal &gt; 0.00 and substring(c_phone from 1 for 2) in (&apos;34&apos;, &apos;20&apos;, &apos;23&apos;, &apos;33&apos;, &apos;18&apos;, &apos;10&apos;, &apos;30&apos;) ) and not exists ( select * from orders where o_tenant_id = 1004 and o_custkey = c_custkey ) ) as custsale group by cntrycode order by cntrycode;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G5 - RF1" enabled="false">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO region (r_regionkey, r_name, r_comment) VALUES (123476241, &apos;AFRICA&apos;, &apos;lar deposits. blithely final packages cajole. regular&apos;);
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G5 - RF2" enabled="false">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">DELETE FROM region WHERE r_regionkey = 123476241;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="G6" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <RandomOrderController guiclass="RandomOrderControllerGui" testclass="RandomOrderController" testname="Random Order Controller" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G6 - Q1" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="query">select l_returnflag, l_linestatus, sum(l_quantity) as sum_qty, sum(l_extendedprice) as sum_base_price, sum(l_extendedprice * (1 - l_discount)) as sum_disc_price, sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge, avg(l_quantity) as avg_qty, avg(l_extendedprice) as avg_price, avg(l_discount) as avg_disc, count(*) as count_order from lineitem where l_tenant_id = 1005 and l_shipdate &lt;= date &apos;1998-12-01&apos; - interval &apos;61&apos; day group by l_returnflag, l_linestatus order by l_returnflag, l_linestatus;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G6 - Q2" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select s_acctbal, s_name, n_name, p_partkey, p_mfgr, s_address, s_phone, s_comment from part, supplier, partsupp, nation, region where p_tenant_id = 1005 and s_tenant_id = 1005 and ps_tenant_id = 1005 and p_partkey = ps_partkey and s_suppkey = ps_suppkey and p_size = 14 and p_type like &apos;%BRASS&apos; and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; and ps_supplycost = ( select min(ps_supplycost) from partsupp, supplier, nation, region where ps_tenant_id = 1005 and s_tenant_id = 1005 and p_partkey = ps_partkey and s_suppkey = ps_suppkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; ) order by s_acctbal desc, n_name, s_name, p_partkey limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G6 - Q3" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select l_orderkey, sum(l_extendedprice * (1 - l_discount)) as revenue, o_orderdate, o_shippriority from customer, orders, lineitem where c_tenant_id = 1005 and o_tenant_id = 1005 and l_tenant_id = 1005 and c_mktsegment = &apos;BUILDING&apos; and c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate &lt; date &apos;1995-03-06&apos; and l_shipdate &gt; date &apos;1995-03-06&apos; group by l_orderkey, o_orderdate, o_shippriority order by revenue desc, o_orderdate limit 10;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G6 - Q4" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select o_orderpriority, count(*) as order_count from orders where o_tenant_id = 1005 and o_orderdate &gt;= date &apos;1993-12-01&apos; and o_orderdate &lt; date &apos;1993-12-01&apos; + interval &apos;3&apos; month and exists ( select * from lineitem where l_tenant_id = 1005 and l_orderkey = o_orderkey and l_commitdate &lt; l_receiptdate ) group by o_orderpriority order by o_orderpriority;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G6 - Q5" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select n_name, sum(l_extendedprice * (1 - l_discount)) as revenue from customer, orders, lineitem, supplier, nation, region where c_tenant_id = 1005 and o_tenant_id = 1005 and l_tenant_id = 1005 and s_tenant_id = 1005 and c_custkey = o_custkey and l_orderkey = o_orderkey and l_suppkey = s_suppkey and c_nationkey = s_nationkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; and o_orderdate &gt;= date &apos;1994-01-01&apos; and o_orderdate &lt; date &apos;1994-01-01&apos; + interval &apos;1&apos; year group by n_name order by revenue desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G6 - Q6" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select sum(l_extendedprice * l_discount) as revenue from lineitem where l_tenant_id = 1005 and l_shipdate &gt;= date &apos;1994-01-01&apos; and l_shipdate &lt; date &apos;1994-01-01&apos; + interval &apos;1&apos; year and l_discount between 0.09 - 0.01 and 0.09 + 0.01 and l_quantity &lt; 25;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G6 - Q7" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select supp_nation, cust_nation, l_year, sum(volume) as revenue from ( select n1.n_name as supp_nation, n2.n_name as cust_nation, extract(year from l_shipdate) as l_year, l_extendedprice * (1 - l_discount) as volume from supplier, lineitem, orders, customer, nation n1, nation n2 where s_tenant_id = 1005 and l_tenant_id = 1005 and o_tenant_id = 1005 and c_tenant_id = 1005 and s_suppkey = l_suppkey and o_orderkey = l_orderkey and c_custkey = o_custkey and s_nationkey = n1.n_nationkey and c_nationkey = n2.n_nationkey and ( (n1.n_name = &apos;RUSSIA&apos; and n2.n_name = &apos;ROMANIA&apos;) or (n1.n_name = &apos;ROMANIA&apos; and n2.n_name = &apos;RUSSIA&apos;) ) and l_shipdate between date &apos;1995-01-01&apos; and date &apos;1996-12-31&apos; ) as shipping group by supp_nation, cust_nation, l_year order by supp_nation, cust_nation, l_year;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G6 - Q8" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select o_year, sum(case when nation = &apos;ROMANIA&apos; then volume else 0 end) / sum(volume) as mkt_share from ( select extract(year from o_orderdate) as o_year, l_extendedprice * (1 - l_discount) as volume, n2.n_name as nation from part, supplier, lineitem, orders, customer, nation n1, nation n2, region where p_tenant_id = 1005 and s_tenant_id = 1005 and l_tenant_id = 1005 and o_tenant_id = 1005 and c_tenant_id = 1005 and p_partkey = l_partkey and s_suppkey = l_suppkey and l_orderkey = o_orderkey and o_custkey = c_custkey and c_nationkey = n1.n_nationkey and n1.n_regionkey = r_regionkey and r_name = &apos;EUROPE&apos; and s_nationkey = n2.n_nationkey and o_orderdate between date &apos;1995-01-01&apos; and date &apos;1996-12-31&apos; and p_type = &apos;PROMO ANODIZED TIN&apos; ) as all_nations group by o_year order by o_year;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G6 - Q9" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select nation, o_year, sum(amount) as sum_profit from ( select n_name as nation, extract(year from o_orderdate) as o_year, l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity as amount from part, supplier, lineitem, partsupp, orders, nation where p_tenant_id = 1005 and s_tenant_id = 1005 and l_tenant_id = 1005 and ps_tenant_id = 1005 and o_tenant_id = 1005 and s_suppkey = l_suppkey and ps_suppkey = l_suppkey and ps_partkey = l_partkey and p_partkey = l_partkey and o_orderkey = l_orderkey and s_nationkey = n_nationkey and p_name like &apos;%sienna%&apos; ) as profit group by nation, o_year order by nation, o_year desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G6 - Q10" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_custkey, c_name, sum(l_extendedprice * (1 - l_discount)) as revenue, c_acctbal, n_name, c_address, c_phone, c_comment from customer, orders, lineitem, nation where c_tenant_id = 1005 and o_tenant_id = 1005 and l_tenant_id = 1005 and c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate &gt;= date &apos;1993-04-01&apos; and o_orderdate &lt; date &apos;1993-04-01&apos; + interval &apos;3&apos; month and l_returnflag = &apos;R&apos; and c_nationkey = n_nationkey group by c_custkey, c_name, c_acctbal, c_phone, n_name, c_address, c_comment order by revenue desc limit 20;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G6 - Q11" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select ps_partkey, sum(ps_supplycost * ps_availqty) as value from partsupp, supplier, nation where ps_tenant_id = 1005 and s_tenant_id = 1005 and ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = &apos;INDONESIA&apos; group by ps_partkey having sum(ps_supplycost * ps_availqty) &gt; ( select sum(ps_supplycost * ps_availqty) * 0.0000090909 from partsupp, supplier, nation where ps_tenant_id = 1005 and s_tenant_id = 1005 and ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = &apos;INDONESIA&apos; ) order by value desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G6 - Q12" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select l_shipmode, sum(case when o_orderpriority = &apos;1-URGENT&apos; or o_orderpriority = &apos;2-HIGH&apos; then 1 else 0 end) as high_line_count, sum(case when o_orderpriority &lt;&gt; &apos;1-URGENT&apos; and o_orderpriority &lt;&gt; &apos;2-HIGH&apos; then 1 else 0 end) as low_line_count from orders, lineitem where o_tenant_id = 1005 and l_tenant_id = 1005 and o_orderkey = l_orderkey and l_shipmode in (&apos;RAIL&apos;, &apos;TRUCK&apos;) and l_commitdate &lt; l_receiptdate and l_shipdate &lt; l_commitdate and l_receiptdate &gt;= date &apos;1995-01-01&apos; and l_receiptdate &lt; date &apos;1995-01-01&apos; + interval &apos;1&apos; year group by l_shipmode order by l_shipmode;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G6 - Q13" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_count, count(*) as custdist from ( select c_custkey, count(o_orderkey) from customer left outer join orders on c_custkey = o_custkey and o_comment not like &apos;%pending%accounts%&apos; where c_tenant_id = 1005 group by c_custkey ) as c_orders (c_custkey, c_count) group by c_count order by custdist desc, c_count desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G6 - Q14" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select 100.00 * sum(case when p_type like &apos;PROMO%&apos; then l_extendedprice * (1 - l_discount) else 0 end) / sum(l_extendedprice * (1 - l_discount)) as promo_revenue from lineitem, part where l_tenant_id = 1005 and p_tenant_id = 1005 and l_partkey = p_partkey and l_shipdate &gt;= date &apos;1995-12-01&apos; and l_shipdate &lt; date &apos;1995-12-01&apos; + interval &apos;1&apos; month;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G6 - Q15" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Callable Statement</stringProp>
            <stringProp name="query">create view revenue0 (supplier_no, total_revenue) as select l_suppkey, sum(l_extendedprice * (1 - l_discount)) from lineitem where l_tenant_id = 1005 and l_shipdate &gt;= date &apos;1994-03-01&apos; and l_shipdate &lt; date &apos;1994-03-01&apos; + interval &apos;3&apos; month group by l_suppkey; select s_suppkey, s_name, s_address, s_phone, total_revenue from supplier, revenue0 where s_tenant_id = 1005 and s_suppkey = supplier_no and total_revenue = ( select max(total_revenue) from revenue0 ) order by s_suppkey; drop view revenue0;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G6 - Q16" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select p_brand, p_type, p_size, count(distinct ps_suppkey) as supplier_cnt from partsupp, part where ps_tenant_id = 1005 and p_tenant_id = 1005 and p_partkey = ps_partkey and p_brand &lt;&gt; &apos;Brand#52&apos; and p_type not like &apos;LARGE BRUSHED%&apos; and p_size in (20, 35, 34, 50, 23, 28, 48, 17) and ps_suppkey not in ( select s_suppkey from supplier where s_tenant_id = 1005 and s_comment like &apos;%Customer%Complaints%&apos; ) group by p_brand, p_type, p_size order by supplier_cnt desc, p_brand, p_type, p_size;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G6 - Q18" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice, sum(l_quantity) from customer, orders, lineitem where c_tenant_id = 1005 and o_tenant_id = 1005 and l_tenant_id = 1005 and o_orderkey in ( select l_orderkey from lineitem where l_tenant_id = 1005 group by l_orderkey having sum(l_quantity) &gt; 314 ) and c_custkey = o_custkey and o_orderkey = l_orderkey group by c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice order by o_totalprice desc, o_orderdate limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G6 - Q19" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select sum(l_extendedprice* (1 - l_discount)) as revenue from lineitem, part where l_tenant_id = 1005 and p_tenant_id = 1005 and (( p_partkey = l_partkey and p_brand = &apos;Brand#24&apos; and p_container in (&apos;SM CasE&apos;, &apos;SM BOX&apos;, &apos;SM PACK&apos;, &apos;SM PKG&apos;) and l_quantity &gt;= 10 and l_quantity &lt;= 10 + 10 and p_size between 1 and 5 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ) or ( p_partkey = l_partkey and p_brand = &apos;Brand#45&apos; and p_container in (&apos;MED BAG&apos;, &apos;MED BOX&apos;, &apos;MED PKG&apos;, &apos;MED PACK&apos;) and l_quantity &gt;= 12 and l_quantity &lt;= 12 + 10 and p_size between 1 and 10 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ) or ( p_partkey = l_partkey and p_brand = &apos;Brand#33&apos; and p_container in (&apos;LG CasE&apos;, &apos;LG BOX&apos;, &apos;LG PACK&apos;, &apos;LG PKG&apos;) and l_quantity &gt;= 30 and l_quantity &lt;= 30 + 10 and p_size between 1 and 15 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ));
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G6 - Q21" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select s_name, count(*) as numwait from supplier, lineitem l1, orders, nation where s_tenant_id = 1005 and l1.l_tenant_id = 1005 and o_tenant_id = 1005 and s_suppkey = l1.l_suppkey and o_orderkey = l1.l_orderkey and o_orderstatus = &apos;F&apos; and l1.l_receiptdate &gt; l1.l_commitdate and exists ( select * from lineitem l2 where l2.l_tenant_id = 1005 and l2.l_orderkey = l1.l_orderkey and l2.l_suppkey &lt;&gt; l1.l_suppkey ) and not exists ( select * from lineitem l3 where l3.l_tenant_id = 1005 and l3.l_orderkey = l1.l_orderkey and l3.l_suppkey &lt;&gt; l1.l_suppkey and l3.l_receiptdate &gt; l3.l_commitdate ) and s_nationkey = n_nationkey and n_name = &apos;MOZAMBIQUE&apos; group by s_name order by numwait desc, s_name limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G6 - Q22" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select cntrycode, count(*) as numcust, sum(c_acctbal) as totacctbal from ( select substring(c_phone from 1 for 2) as cntrycode, c_acctbal from customer where c_tenant_id = 1005 and substring(c_phone from 1 for 2) in (&apos;34&apos;, &apos;20&apos;, &apos;23&apos;, &apos;33&apos;, &apos;18&apos;, &apos;10&apos;, &apos;30&apos;) and c_acctbal &gt; ( select avg(c_acctbal) from customer where c_tenant_id = 1005 and c_acctbal &gt; 0.00 and substring(c_phone from 1 for 2) in (&apos;34&apos;, &apos;20&apos;, &apos;23&apos;, &apos;33&apos;, &apos;18&apos;, &apos;10&apos;, &apos;30&apos;) ) and not exists ( select * from orders where o_tenant_id = 1005 and o_custkey = c_custkey ) ) as custsale group by cntrycode order by cntrycode;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G6 - RF1" enabled="false">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO region (r_regionkey, r_name, r_comment) VALUES (123476241, &apos;AFRICA&apos;, &apos;lar deposits. blithely final packages cajole. regular&apos;);
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G6 - RF2" enabled="false">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">DELETE FROM region WHERE r_regionkey = 123476241;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="G7" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <RandomOrderController guiclass="RandomOrderControllerGui" testclass="RandomOrderController" testname="Random Order Controller" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G7 - Q1" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="query">select l_returnflag, l_linestatus, sum(l_quantity) as sum_qty, sum(l_extendedprice) as sum_base_price, sum(l_extendedprice * (1 - l_discount)) as sum_disc_price, sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge, avg(l_quantity) as avg_qty, avg(l_extendedprice) as avg_price, avg(l_discount) as avg_disc, count(*) as count_order from lineitem where l_tenant_id = 1006 and l_shipdate &lt;= date &apos;1998-12-01&apos; - interval &apos;61&apos; day group by l_returnflag, l_linestatus order by l_returnflag, l_linestatus;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G7 - Q2" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select s_acctbal, s_name, n_name, p_partkey, p_mfgr, s_address, s_phone, s_comment from part, supplier, partsupp, nation, region where p_tenant_id = 1006 and s_tenant_id = 1006 and ps_tenant_id = 1006 and p_partkey = ps_partkey and s_suppkey = ps_suppkey and p_size = 14 and p_type like &apos;%BRASS&apos; and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; and ps_supplycost = ( select min(ps_supplycost) from partsupp, supplier, nation, region where ps_tenant_id = 1006 and s_tenant_id = 1006 and p_partkey = ps_partkey and s_suppkey = ps_suppkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; ) order by s_acctbal desc, n_name, s_name, p_partkey limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G7 - Q3" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select l_orderkey, sum(l_extendedprice * (1 - l_discount)) as revenue, o_orderdate, o_shippriority from customer, orders, lineitem where c_tenant_id = 1006 and o_tenant_id = 1006 and l_tenant_id = 1006 and c_mktsegment = &apos;BUILDING&apos; and c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate &lt; date &apos;1995-03-06&apos; and l_shipdate &gt; date &apos;1995-03-06&apos; group by l_orderkey, o_orderdate, o_shippriority order by revenue desc, o_orderdate limit 10;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G7 - Q4" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select o_orderpriority, count(*) as order_count from orders where o_tenant_id = 1006 and o_orderdate &gt;= date &apos;1993-12-01&apos; and o_orderdate &lt; date &apos;1993-12-01&apos; + interval &apos;3&apos; month and exists ( select * from lineitem where l_tenant_id = 1006 and l_orderkey = o_orderkey and l_commitdate &lt; l_receiptdate ) group by o_orderpriority order by o_orderpriority;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G7 - Q5" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select n_name, sum(l_extendedprice * (1 - l_discount)) as revenue from customer, orders, lineitem, supplier, nation, region where c_tenant_id = 1006 and o_tenant_id = 1006 and l_tenant_id = 1006 and s_tenant_id = 1006 and c_custkey = o_custkey and l_orderkey = o_orderkey and l_suppkey = s_suppkey and c_nationkey = s_nationkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; and o_orderdate &gt;= date &apos;1994-01-01&apos; and o_orderdate &lt; date &apos;1994-01-01&apos; + interval &apos;1&apos; year group by n_name order by revenue desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G7 - Q6" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select sum(l_extendedprice * l_discount) as revenue from lineitem where l_tenant_id = 1006 and l_shipdate &gt;= date &apos;1994-01-01&apos; and l_shipdate &lt; date &apos;1994-01-01&apos; + interval &apos;1&apos; year and l_discount between 0.09 - 0.01 and 0.09 + 0.01 and l_quantity &lt; 25;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G7 - Q7" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select supp_nation, cust_nation, l_year, sum(volume) as revenue from ( select n1.n_name as supp_nation, n2.n_name as cust_nation, extract(year from l_shipdate) as l_year, l_extendedprice * (1 - l_discount) as volume from supplier, lineitem, orders, customer, nation n1, nation n2 where s_tenant_id = 1006 and l_tenant_id = 1006 and o_tenant_id = 1006 and c_tenant_id = 1006 and s_suppkey = l_suppkey and o_orderkey = l_orderkey and c_custkey = o_custkey and s_nationkey = n1.n_nationkey and c_nationkey = n2.n_nationkey and ( (n1.n_name = &apos;RUSSIA&apos; and n2.n_name = &apos;ROMANIA&apos;) or (n1.n_name = &apos;ROMANIA&apos; and n2.n_name = &apos;RUSSIA&apos;) ) and l_shipdate between date &apos;1995-01-01&apos; and date &apos;1996-12-31&apos; ) as shipping group by supp_nation, cust_nation, l_year order by supp_nation, cust_nation, l_year;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G7 - Q8" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select o_year, sum(case when nation = &apos;ROMANIA&apos; then volume else 0 end) / sum(volume) as mkt_share from ( select extract(year from o_orderdate) as o_year, l_extendedprice * (1 - l_discount) as volume, n2.n_name as nation from part, supplier, lineitem, orders, customer, nation n1, nation n2, region where p_tenant_id = 1006 and s_tenant_id = 1006 and l_tenant_id = 1006 and o_tenant_id = 1006 and c_tenant_id = 1006 and p_partkey = l_partkey and s_suppkey = l_suppkey and l_orderkey = o_orderkey and o_custkey = c_custkey and c_nationkey = n1.n_nationkey and n1.n_regionkey = r_regionkey and r_name = &apos;EUROPE&apos; and s_nationkey = n2.n_nationkey and o_orderdate between date &apos;1995-01-01&apos; and date &apos;1996-12-31&apos; and p_type = &apos;PROMO ANODIZED TIN&apos; ) as all_nations group by o_year order by o_year;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G7 - Q9" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select nation, o_year, sum(amount) as sum_profit from ( select n_name as nation, extract(year from o_orderdate) as o_year, l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity as amount from part, supplier, lineitem, partsupp, orders, nation where p_tenant_id = 1006 and s_tenant_id = 1006 and l_tenant_id = 1006 and ps_tenant_id = 1006 and o_tenant_id = 1006 and s_suppkey = l_suppkey and ps_suppkey = l_suppkey and ps_partkey = l_partkey and p_partkey = l_partkey and o_orderkey = l_orderkey and s_nationkey = n_nationkey and p_name like &apos;%sienna%&apos; ) as profit group by nation, o_year order by nation, o_year desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G7 - Q10" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_custkey, c_name, sum(l_extendedprice * (1 - l_discount)) as revenue, c_acctbal, n_name, c_address, c_phone, c_comment from customer, orders, lineitem, nation where c_tenant_id = 1006 and o_tenant_id = 1006 and l_tenant_id = 1006 and c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate &gt;= date &apos;1993-04-01&apos; and o_orderdate &lt; date &apos;1993-04-01&apos; + interval &apos;3&apos; month and l_returnflag = &apos;R&apos; and c_nationkey = n_nationkey group by c_custkey, c_name, c_acctbal, c_phone, n_name, c_address, c_comment order by revenue desc limit 20;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G7 - Q11" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select ps_partkey, sum(ps_supplycost * ps_availqty) as value from partsupp, supplier, nation where ps_tenant_id = 1006 and s_tenant_id = 1006 and ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = &apos;INDONESIA&apos; group by ps_partkey having sum(ps_supplycost * ps_availqty) &gt; ( select sum(ps_supplycost * ps_availqty) * 0.0000090909 from partsupp, supplier, nation where ps_tenant_id = 1006 and s_tenant_id = 1006 and ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = &apos;INDONESIA&apos; ) order by value desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G7 - Q12" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select l_shipmode, sum(case when o_orderpriority = &apos;1-URGENT&apos; or o_orderpriority = &apos;2-HIGH&apos; then 1 else 0 end) as high_line_count, sum(case when o_orderpriority &lt;&gt; &apos;1-URGENT&apos; and o_orderpriority &lt;&gt; &apos;2-HIGH&apos; then 1 else 0 end) as low_line_count from orders, lineitem where o_tenant_id = 1006 and l_tenant_id = 1006 and o_orderkey = l_orderkey and l_shipmode in (&apos;RAIL&apos;, &apos;TRUCK&apos;) and l_commitdate &lt; l_receiptdate and l_shipdate &lt; l_commitdate and l_receiptdate &gt;= date &apos;1995-01-01&apos; and l_receiptdate &lt; date &apos;1995-01-01&apos; + interval &apos;1&apos; year group by l_shipmode order by l_shipmode;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G7 - Q13" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_count, count(*) as custdist from ( select c_custkey, count(o_orderkey) from customer left outer join orders on c_custkey = o_custkey and o_comment not like &apos;%pending%accounts%&apos; where c_tenant_id = 1006 group by c_custkey ) as c_orders (c_custkey, c_count) group by c_count order by custdist desc, c_count desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G7 - Q14" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select 100.00 * sum(case when p_type like &apos;PROMO%&apos; then l_extendedprice * (1 - l_discount) else 0 end) / sum(l_extendedprice * (1 - l_discount)) as promo_revenue from lineitem, part where l_tenant_id = 1006 and p_tenant_id = 1006 and l_partkey = p_partkey and l_shipdate &gt;= date &apos;1995-12-01&apos; and l_shipdate &lt; date &apos;1995-12-01&apos; + interval &apos;1&apos; month;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G7 - Q15" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Callable Statement</stringProp>
            <stringProp name="query">create view revenue0 (supplier_no, total_revenue) as select l_suppkey, sum(l_extendedprice * (1 - l_discount)) from lineitem where l_tenant_id = 1006 and l_shipdate &gt;= date &apos;1996-10-01&apos; and l_shipdate &lt; date &apos;1996-10-01&apos; + interval &apos;3&apos; month group by l_suppkey; select s_suppkey, s_name, s_address, s_phone, total_revenue from supplier, revenue0 where s_tenant_id = 1006 and s_suppkey = supplier_no and total_revenue = ( select max(total_revenue) from revenue0 ) order by s_suppkey; drop view revenue0;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G7 - Q16" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select p_brand, p_type, p_size, count(distinct ps_suppkey) as supplier_cnt from partsupp, part where ps_tenant_id = 1006 and p_tenant_id = 1006 and p_partkey = ps_partkey and p_brand &lt;&gt; &apos;Brand#52&apos; and p_type not like &apos;LARGE BRUSHED%&apos; and p_size in (20, 35, 34, 50, 23, 28, 48, 17) and ps_suppkey not in ( select s_suppkey from supplier where s_tenant_id = 1006 and s_comment like &apos;%Customer%Complaints%&apos; ) group by p_brand, p_type, p_size order by supplier_cnt desc, p_brand, p_type, p_size;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G7 - Q18" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice, sum(l_quantity) from customer, orders, lineitem where c_tenant_id = 1006 and o_tenant_id = 1006 and l_tenant_id = 1006 and o_orderkey in ( select l_orderkey from lineitem where l_tenant_id = 1006 group by l_orderkey having sum(l_quantity) &gt; 314 ) and c_custkey = o_custkey and o_orderkey = l_orderkey group by c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice order by o_totalprice desc, o_orderdate limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G7 - Q19" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select sum(l_extendedprice* (1 - l_discount)) as revenue from lineitem, part where l_tenant_id = 1006 and p_tenant_id = 1006 and (( p_partkey = l_partkey and p_brand = &apos;Brand#24&apos; and p_container in (&apos;SM CasE&apos;, &apos;SM BOX&apos;, &apos;SM PACK&apos;, &apos;SM PKG&apos;) and l_quantity &gt;= 10 and l_quantity &lt;= 10 + 10 and p_size between 1 and 5 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ) or ( p_partkey = l_partkey and p_brand = &apos;Brand#45&apos; and p_container in (&apos;MED BAG&apos;, &apos;MED BOX&apos;, &apos;MED PKG&apos;, &apos;MED PACK&apos;) and l_quantity &gt;= 12 and l_quantity &lt;= 12 + 10 and p_size between 1 and 10 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ) or ( p_partkey = l_partkey and p_brand = &apos;Brand#33&apos; and p_container in (&apos;LG CasE&apos;, &apos;LG BOX&apos;, &apos;LG PACK&apos;, &apos;LG PKG&apos;) and l_quantity &gt;= 30 and l_quantity &lt;= 30 + 10 and p_size between 1 and 15 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ));
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G7 - Q21" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select s_name, count(*) as numwait from supplier, lineitem l1, orders, nation where s_tenant_id = 1006 and l1.l_tenant_id = 1006 and o_tenant_id = 1006 and s_suppkey = l1.l_suppkey and o_orderkey = l1.l_orderkey and o_orderstatus = &apos;F&apos; and l1.l_receiptdate &gt; l1.l_commitdate and exists ( select * from lineitem l2 where l2.l_tenant_id = 1006 and l2.l_orderkey = l1.l_orderkey and l2.l_suppkey &lt;&gt; l1.l_suppkey ) and not exists ( select * from lineitem l3 where l3.l_tenant_id = 1006 and l3.l_orderkey = l1.l_orderkey and l3.l_suppkey &lt;&gt; l1.l_suppkey and l3.l_receiptdate &gt; l3.l_commitdate ) and s_nationkey = n_nationkey and n_name = &apos;MOZAMBIQUE&apos; group by s_name order by numwait desc, s_name limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G7 - Q22" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select cntrycode, count(*) as numcust, sum(c_acctbal) as totacctbal from ( select substring(c_phone from 1 for 2) as cntrycode, c_acctbal from customer where c_tenant_id = 1006 and substring(c_phone from 1 for 2) in (&apos;34&apos;, &apos;20&apos;, &apos;23&apos;, &apos;33&apos;, &apos;18&apos;, &apos;10&apos;, &apos;30&apos;) and c_acctbal &gt; ( select avg(c_acctbal) from customer where c_tenant_id = 1006 and c_acctbal &gt; 0.00 and substring(c_phone from 1 for 2) in (&apos;34&apos;, &apos;20&apos;, &apos;23&apos;, &apos;33&apos;, &apos;18&apos;, &apos;10&apos;, &apos;30&apos;) ) and not exists ( select * from orders where o_tenant_id = 1006 and o_custkey = c_custkey ) ) as custsale group by cntrycode order by cntrycode;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G7 - RF1" enabled="false">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO region (r_regionkey, r_name, r_comment) VALUES (123476241, &apos;AFRICA&apos;, &apos;lar deposits. blithely final packages cajole. regular&apos;);
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G7 - RF2" enabled="false">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">DELETE FROM region WHERE r_regionkey = 123476241;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="G8" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <RandomOrderController guiclass="RandomOrderControllerGui" testclass="RandomOrderController" testname="Random Order Controller" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G8 - Q1" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="query">select l_returnflag, l_linestatus, sum(l_quantity) as sum_qty, sum(l_extendedprice) as sum_base_price, sum(l_extendedprice * (1 - l_discount)) as sum_disc_price, sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge, avg(l_quantity) as avg_qty, avg(l_extendedprice) as avg_price, avg(l_discount) as avg_disc, count(*) as count_order from lineitem where l_tenant_id = 1007 and l_shipdate &lt;= date &apos;1998-12-01&apos; - interval &apos;61&apos; day group by l_returnflag, l_linestatus order by l_returnflag, l_linestatus;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G8 - Q2" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select s_acctbal, s_name, n_name, p_partkey, p_mfgr, s_address, s_phone, s_comment from part, supplier, partsupp, nation, region where p_tenant_id = 1007 and s_tenant_id = 1007 and ps_tenant_id = 1007 and p_partkey = ps_partkey and s_suppkey = ps_suppkey and p_size = 14 and p_type like &apos;%BRASS&apos; and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; and ps_supplycost = ( select min(ps_supplycost) from partsupp, supplier, nation, region where ps_tenant_id = 1007 and s_tenant_id = 1007 and p_partkey = ps_partkey and s_suppkey = ps_suppkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; ) order by s_acctbal desc, n_name, s_name, p_partkey limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G8 - Q3" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select l_orderkey, sum(l_extendedprice * (1 - l_discount)) as revenue, o_orderdate, o_shippriority from customer, orders, lineitem where c_tenant_id = 1007 and o_tenant_id = 1007 and l_tenant_id = 1007 and c_mktsegment = &apos;BUILDING&apos; and c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate &lt; date &apos;1995-03-06&apos; and l_shipdate &gt; date &apos;1995-03-06&apos; group by l_orderkey, o_orderdate, o_shippriority order by revenue desc, o_orderdate limit 10;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G8 - Q4" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select o_orderpriority, count(*) as order_count from orders where o_tenant_id = 1007 and o_orderdate &gt;= date &apos;1993-12-01&apos; and o_orderdate &lt; date &apos;1993-12-01&apos; + interval &apos;3&apos; month and exists ( select * from lineitem where l_tenant_id = 1007 and l_orderkey = o_orderkey and l_commitdate &lt; l_receiptdate ) group by o_orderpriority order by o_orderpriority;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G8 - Q5" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select n_name, sum(l_extendedprice * (1 - l_discount)) as revenue from customer, orders, lineitem, supplier, nation, region where c_tenant_id = 1007 and o_tenant_id = 1007 and l_tenant_id = 1007 and s_tenant_id = 1007 and c_custkey = o_custkey and l_orderkey = o_orderkey and l_suppkey = s_suppkey and c_nationkey = s_nationkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; and o_orderdate &gt;= date &apos;1994-01-01&apos; and o_orderdate &lt; date &apos;1994-01-01&apos; + interval &apos;1&apos; year group by n_name order by revenue desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G8 - Q6" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select sum(l_extendedprice * l_discount) as revenue from lineitem where l_tenant_id = 1007 and l_shipdate &gt;= date &apos;1994-01-01&apos; and l_shipdate &lt; date &apos;1994-01-01&apos; + interval &apos;1&apos; year and l_discount between 0.09 - 0.01 and 0.09 + 0.01 and l_quantity &lt; 25;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G8 - Q7" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select supp_nation, cust_nation, l_year, sum(volume) as revenue from ( select n1.n_name as supp_nation, n2.n_name as cust_nation, extract(year from l_shipdate) as l_year, l_extendedprice * (1 - l_discount) as volume from supplier, lineitem, orders, customer, nation n1, nation n2 where s_tenant_id = 1007 and l_tenant_id = 1007 and o_tenant_id = 1007 and c_tenant_id = 1007 and s_suppkey = l_suppkey and o_orderkey = l_orderkey and c_custkey = o_custkey and s_nationkey = n1.n_nationkey and c_nationkey = n2.n_nationkey and ( (n1.n_name = &apos;RUSSIA&apos; and n2.n_name = &apos;ROMANIA&apos;) or (n1.n_name = &apos;ROMANIA&apos; and n2.n_name = &apos;RUSSIA&apos;) ) and l_shipdate between date &apos;1995-01-01&apos; and date &apos;1996-12-31&apos; ) as shipping group by supp_nation, cust_nation, l_year order by supp_nation, cust_nation, l_year;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G8 - Q8" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select o_year, sum(case when nation = &apos;ROMANIA&apos; then volume else 0 end) / sum(volume) as mkt_share from ( select extract(year from o_orderdate) as o_year, l_extendedprice * (1 - l_discount) as volume, n2.n_name as nation from part, supplier, lineitem, orders, customer, nation n1, nation n2, region where p_tenant_id = 1007 and s_tenant_id = 1007 and l_tenant_id = 1007 and o_tenant_id = 1007 and c_tenant_id = 1007 and p_partkey = l_partkey and s_suppkey = l_suppkey and l_orderkey = o_orderkey and o_custkey = c_custkey and c_nationkey = n1.n_nationkey and n1.n_regionkey = r_regionkey and r_name = &apos;EUROPE&apos; and s_nationkey = n2.n_nationkey and o_orderdate between date &apos;1995-01-01&apos; and date &apos;1996-12-31&apos; and p_type = &apos;PROMO ANODIZED TIN&apos; ) as all_nations group by o_year order by o_year;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G8 - Q9" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select nation, o_year, sum(amount) as sum_profit from ( select n_name as nation, extract(year from o_orderdate) as o_year, l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity as amount from part, supplier, lineitem, partsupp, orders, nation where p_tenant_id = 1007 and s_tenant_id = 1007 and l_tenant_id = 1007 and ps_tenant_id = 1007 and o_tenant_id = 1007 and s_suppkey = l_suppkey and ps_suppkey = l_suppkey and ps_partkey = l_partkey and p_partkey = l_partkey and o_orderkey = l_orderkey and s_nationkey = n_nationkey and p_name like &apos;%sienna%&apos; ) as profit group by nation, o_year order by nation, o_year desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G8 - Q10" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_custkey, c_name, sum(l_extendedprice * (1 - l_discount)) as revenue, c_acctbal, n_name, c_address, c_phone, c_comment from customer, orders, lineitem, nation where c_tenant_id = 1007 and o_tenant_id = 1007 and l_tenant_id = 1007 and c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate &gt;= date &apos;1993-04-01&apos; and o_orderdate &lt; date &apos;1993-04-01&apos; + interval &apos;3&apos; month and l_returnflag = &apos;R&apos; and c_nationkey = n_nationkey group by c_custkey, c_name, c_acctbal, c_phone, n_name, c_address, c_comment order by revenue desc limit 20;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G8 - Q11" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select ps_partkey, sum(ps_supplycost * ps_availqty) as value from partsupp, supplier, nation where ps_tenant_id = 1007 and s_tenant_id = 1007 and ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = &apos;INDONESIA&apos; group by ps_partkey having sum(ps_supplycost * ps_availqty) &gt; ( select sum(ps_supplycost * ps_availqty) * 0.0000090909 from partsupp, supplier, nation where ps_tenant_id = 1007 and s_tenant_id = 1007 and ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = &apos;INDONESIA&apos; ) order by value desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G8 - Q12" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select l_shipmode, sum(case when o_orderpriority = &apos;1-URGENT&apos; or o_orderpriority = &apos;2-HIGH&apos; then 1 else 0 end) as high_line_count, sum(case when o_orderpriority &lt;&gt; &apos;1-URGENT&apos; and o_orderpriority &lt;&gt; &apos;2-HIGH&apos; then 1 else 0 end) as low_line_count from orders, lineitem where o_tenant_id = 1007 and l_tenant_id = 1007 and o_orderkey = l_orderkey and l_shipmode in (&apos;RAIL&apos;, &apos;TRUCK&apos;) and l_commitdate &lt; l_receiptdate and l_shipdate &lt; l_commitdate and l_receiptdate &gt;= date &apos;1995-01-01&apos; and l_receiptdate &lt; date &apos;1995-01-01&apos; + interval &apos;1&apos; year group by l_shipmode order by l_shipmode;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G8 - Q13" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_count, count(*) as custdist from ( select c_custkey, count(o_orderkey) from customer left outer join orders on c_custkey = o_custkey and o_comment not like &apos;%pending%accounts%&apos; where c_tenant_id = 1007 group by c_custkey ) as c_orders (c_custkey, c_count) group by c_count order by custdist desc, c_count desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G8 - Q14" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select 100.00 * sum(case when p_type like &apos;PROMO%&apos; then l_extendedprice * (1 - l_discount) else 0 end) / sum(l_extendedprice * (1 - l_discount)) as promo_revenue from lineitem, part where l_tenant_id = 1007 and p_tenant_id = 1007 and l_partkey = p_partkey and l_shipdate &gt;= date &apos;1995-12-01&apos; and l_shipdate &lt; date &apos;1995-12-01&apos; + interval &apos;1&apos; month;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G8 - Q15" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Callable Statement</stringProp>
            <stringProp name="query">create view revenue0 (supplier_no, total_revenue) as select l_suppkey, sum(l_extendedprice * (1 - l_discount)) from lineitem where l_tenant_id = 1007 and l_shipdate &gt;= date &apos;1994-07-01&apos; and l_shipdate &lt; date &apos;1994-07-01&apos; + interval &apos;3&apos; month group by l_suppkey; select s_suppkey, s_name, s_address, s_phone, total_revenue from supplier, revenue0 where s_tenant_id = 1007 and s_suppkey = supplier_no and total_revenue = ( select max(total_revenue) from revenue0 ) order by s_suppkey; drop view revenue0;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G8 - Q16" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select p_brand, p_type, p_size, count(distinct ps_suppkey) as supplier_cnt from partsupp, part where ps_tenant_id = 1007 and p_tenant_id = 1007 and p_partkey = ps_partkey and p_brand &lt;&gt; &apos;Brand#52&apos; and p_type not like &apos;LARGE BRUSHED%&apos; and p_size in (20, 35, 34, 50, 23, 28, 48, 17) and ps_suppkey not in ( select s_suppkey from supplier where s_tenant_id = 1007 and s_comment like &apos;%Customer%Complaints%&apos; ) group by p_brand, p_type, p_size order by supplier_cnt desc, p_brand, p_type, p_size;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G8 - Q18" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice, sum(l_quantity) from customer, orders, lineitem where c_tenant_id = 1007 and o_tenant_id = 1007 and l_tenant_id = 1007 and o_orderkey in ( select l_orderkey from lineitem where l_tenant_id = 1007 group by l_orderkey having sum(l_quantity) &gt; 314 ) and c_custkey = o_custkey and o_orderkey = l_orderkey group by c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice order by o_totalprice desc, o_orderdate limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G8 - Q19" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select sum(l_extendedprice* (1 - l_discount)) as revenue from lineitem, part where l_tenant_id = 1007 and p_tenant_id = 1007 and (( p_partkey = l_partkey and p_brand = &apos;Brand#24&apos; and p_container in (&apos;SM CasE&apos;, &apos;SM BOX&apos;, &apos;SM PACK&apos;, &apos;SM PKG&apos;) and l_quantity &gt;= 10 and l_quantity &lt;= 10 + 10 and p_size between 1 and 5 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ) or ( p_partkey = l_partkey and p_brand = &apos;Brand#45&apos; and p_container in (&apos;MED BAG&apos;, &apos;MED BOX&apos;, &apos;MED PKG&apos;, &apos;MED PACK&apos;) and l_quantity &gt;= 12 and l_quantity &lt;= 12 + 10 and p_size between 1 and 10 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ) or ( p_partkey = l_partkey and p_brand = &apos;Brand#33&apos; and p_container in (&apos;LG CasE&apos;, &apos;LG BOX&apos;, &apos;LG PACK&apos;, &apos;LG PKG&apos;) and l_quantity &gt;= 30 and l_quantity &lt;= 30 + 10 and p_size between 1 and 15 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ));
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G8 - Q21" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select s_name, count(*) as numwait from supplier, lineitem l1, orders, nation where s_tenant_id = 1007 and l1.l_tenant_id = 1007 and o_tenant_id = 1007 and s_suppkey = l1.l_suppkey and o_orderkey = l1.l_orderkey and o_orderstatus = &apos;F&apos; and l1.l_receiptdate &gt; l1.l_commitdate and exists ( select * from lineitem l2 where l2.l_tenant_id = 1007 and l2.l_orderkey = l1.l_orderkey and l2.l_suppkey &lt;&gt; l1.l_suppkey ) and not exists ( select * from lineitem l3 where l3.l_tenant_id = 1007 and l3.l_orderkey = l1.l_orderkey and l3.l_suppkey &lt;&gt; l1.l_suppkey and l3.l_receiptdate &gt; l3.l_commitdate ) and s_nationkey = n_nationkey and n_name = &apos;MOZAMBIQUE&apos; group by s_name order by numwait desc, s_name limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G8 - Q22" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select cntrycode, count(*) as numcust, sum(c_acctbal) as totacctbal from ( select substring(c_phone from 1 for 2) as cntrycode, c_acctbal from customer where c_tenant_id = 1007 and substring(c_phone from 1 for 2) in (&apos;34&apos;, &apos;20&apos;, &apos;23&apos;, &apos;33&apos;, &apos;18&apos;, &apos;10&apos;, &apos;30&apos;) and c_acctbal &gt; ( select avg(c_acctbal) from customer where c_tenant_id = 1007 and c_acctbal &gt; 0.00 and substring(c_phone from 1 for 2) in (&apos;34&apos;, &apos;20&apos;, &apos;23&apos;, &apos;33&apos;, &apos;18&apos;, &apos;10&apos;, &apos;30&apos;) ) and not exists ( select * from orders where o_tenant_id = 1007 and o_custkey = c_custkey ) ) as custsale group by cntrycode order by cntrycode;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G8 - RF1" enabled="false">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO region (r_regionkey, r_name, r_comment) VALUES (123476241, &apos;AFRICA&apos;, &apos;lar deposits. blithely final packages cajole. regular&apos;);
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G8 - RF2" enabled="false">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">DELETE FROM region WHERE r_regionkey = 123476241;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="G9" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <RandomOrderController guiclass="RandomOrderControllerGui" testclass="RandomOrderController" testname="Random Order Controller" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G9 - Q1" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="query">select l_returnflag, l_linestatus, sum(l_quantity) as sum_qty, sum(l_extendedprice) as sum_base_price, sum(l_extendedprice * (1 - l_discount)) as sum_disc_price, sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge, avg(l_quantity) as avg_qty, avg(l_extendedprice) as avg_price, avg(l_discount) as avg_disc, count(*) as count_order from lineitem where l_tenant_id = 1008 and l_shipdate &lt;= date &apos;1998-12-01&apos; - interval &apos;61&apos; day group by l_returnflag, l_linestatus order by l_returnflag, l_linestatus;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G9 - Q2" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select s_acctbal, s_name, n_name, p_partkey, p_mfgr, s_address, s_phone, s_comment from part, supplier, partsupp, nation, region where p_tenant_id = 1008 and s_tenant_id = 1008 and ps_tenant_id = 1008 and p_partkey = ps_partkey and s_suppkey = ps_suppkey and p_size = 14 and p_type like &apos;%BRASS&apos; and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; and ps_supplycost = ( select min(ps_supplycost) from partsupp, supplier, nation, region where ps_tenant_id = 1008 and s_tenant_id = 1008 and p_partkey = ps_partkey and s_suppkey = ps_suppkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; ) order by s_acctbal desc, n_name, s_name, p_partkey limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G9 - Q3" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select l_orderkey, sum(l_extendedprice * (1 - l_discount)) as revenue, o_orderdate, o_shippriority from customer, orders, lineitem where c_tenant_id = 1008 and o_tenant_id = 1008 and l_tenant_id = 1008 and c_mktsegment = &apos;BUILDING&apos; and c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate &lt; date &apos;1995-03-06&apos; and l_shipdate &gt; date &apos;1995-03-06&apos; group by l_orderkey, o_orderdate, o_shippriority order by revenue desc, o_orderdate limit 10;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G9 - Q4" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select o_orderpriority, count(*) as order_count from orders where o_tenant_id = 1008 and o_orderdate &gt;= date &apos;1993-12-01&apos; and o_orderdate &lt; date &apos;1993-12-01&apos; + interval &apos;3&apos; month and exists ( select * from lineitem where l_tenant_id = 1008 and l_orderkey = o_orderkey and l_commitdate &lt; l_receiptdate ) group by o_orderpriority order by o_orderpriority;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G9 - Q5" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select n_name, sum(l_extendedprice * (1 - l_discount)) as revenue from customer, orders, lineitem, supplier, nation, region where c_tenant_id = 1008 and o_tenant_id = 1008 and l_tenant_id = 1008 and s_tenant_id = 1008 and c_custkey = o_custkey and l_orderkey = o_orderkey and l_suppkey = s_suppkey and c_nationkey = s_nationkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; and o_orderdate &gt;= date &apos;1994-01-01&apos; and o_orderdate &lt; date &apos;1994-01-01&apos; + interval &apos;1&apos; year group by n_name order by revenue desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G9 - Q6" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select sum(l_extendedprice * l_discount) as revenue from lineitem where l_tenant_id = 1008 and l_shipdate &gt;= date &apos;1994-01-01&apos; and l_shipdate &lt; date &apos;1994-01-01&apos; + interval &apos;1&apos; year and l_discount between 0.09 - 0.01 and 0.09 + 0.01 and l_quantity &lt; 25;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G9 - Q7" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select supp_nation, cust_nation, l_year, sum(volume) as revenue from ( select n1.n_name as supp_nation, n2.n_name as cust_nation, extract(year from l_shipdate) as l_year, l_extendedprice * (1 - l_discount) as volume from supplier, lineitem, orders, customer, nation n1, nation n2 where s_tenant_id = 1008 and l_tenant_id = 1008 and o_tenant_id = 1008 and c_tenant_id = 1008 and s_suppkey = l_suppkey and o_orderkey = l_orderkey and c_custkey = o_custkey and s_nationkey = n1.n_nationkey and c_nationkey = n2.n_nationkey and ( (n1.n_name = &apos;RUSSIA&apos; and n2.n_name = &apos;ROMANIA&apos;) or (n1.n_name = &apos;ROMANIA&apos; and n2.n_name = &apos;RUSSIA&apos;) ) and l_shipdate between date &apos;1995-01-01&apos; and date &apos;1996-12-31&apos; ) as shipping group by supp_nation, cust_nation, l_year order by supp_nation, cust_nation, l_year;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G9 - Q8" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select o_year, sum(case when nation = &apos;ROMANIA&apos; then volume else 0 end) / sum(volume) as mkt_share from ( select extract(year from o_orderdate) as o_year, l_extendedprice * (1 - l_discount) as volume, n2.n_name as nation from part, supplier, lineitem, orders, customer, nation n1, nation n2, region where p_tenant_id = 1008 and s_tenant_id = 1008 and l_tenant_id = 1008 and o_tenant_id = 1008 and c_tenant_id = 1008 and p_partkey = l_partkey and s_suppkey = l_suppkey and l_orderkey = o_orderkey and o_custkey = c_custkey and c_nationkey = n1.n_nationkey and n1.n_regionkey = r_regionkey and r_name = &apos;EUROPE&apos; and s_nationkey = n2.n_nationkey and o_orderdate between date &apos;1995-01-01&apos; and date &apos;1996-12-31&apos; and p_type = &apos;PROMO ANODIZED TIN&apos; ) as all_nations group by o_year order by o_year;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G9 - Q9" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select nation, o_year, sum(amount) as sum_profit from ( select n_name as nation, extract(year from o_orderdate) as o_year, l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity as amount from part, supplier, lineitem, partsupp, orders, nation where p_tenant_id = 1008 and s_tenant_id = 1008 and l_tenant_id = 1008 and ps_tenant_id = 1008 and o_tenant_id = 1008 and s_suppkey = l_suppkey and ps_suppkey = l_suppkey and ps_partkey = l_partkey and p_partkey = l_partkey and o_orderkey = l_orderkey and s_nationkey = n_nationkey and p_name like &apos;%sienna%&apos; ) as profit group by nation, o_year order by nation, o_year desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G9 - Q10" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_custkey, c_name, sum(l_extendedprice * (1 - l_discount)) as revenue, c_acctbal, n_name, c_address, c_phone, c_comment from customer, orders, lineitem, nation where c_tenant_id = 1008 and o_tenant_id = 1008 and l_tenant_id = 1008 and c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate &gt;= date &apos;1993-04-01&apos; and o_orderdate &lt; date &apos;1993-04-01&apos; + interval &apos;3&apos; month and l_returnflag = &apos;R&apos; and c_nationkey = n_nationkey group by c_custkey, c_name, c_acctbal, c_phone, n_name, c_address, c_comment order by revenue desc limit 20;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G9 - Q11" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select ps_partkey, sum(ps_supplycost * ps_availqty) as value from partsupp, supplier, nation where ps_tenant_id = 1008 and s_tenant_id = 1008 and ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = &apos;INDONESIA&apos; group by ps_partkey having sum(ps_supplycost * ps_availqty) &gt; ( select sum(ps_supplycost * ps_availqty) * 0.0000090909 from partsupp, supplier, nation where ps_tenant_id = 1008 and s_tenant_id = 1008 and ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = &apos;INDONESIA&apos; ) order by value desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G9 - Q12" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select l_shipmode, sum(case when o_orderpriority = &apos;1-URGENT&apos; or o_orderpriority = &apos;2-HIGH&apos; then 1 else 0 end) as high_line_count, sum(case when o_orderpriority &lt;&gt; &apos;1-URGENT&apos; and o_orderpriority &lt;&gt; &apos;2-HIGH&apos; then 1 else 0 end) as low_line_count from orders, lineitem where o_tenant_id = 1008 and l_tenant_id = 1008 and o_orderkey = l_orderkey and l_shipmode in (&apos;RAIL&apos;, &apos;TRUCK&apos;) and l_commitdate &lt; l_receiptdate and l_shipdate &lt; l_commitdate and l_receiptdate &gt;= date &apos;1995-01-01&apos; and l_receiptdate &lt; date &apos;1995-01-01&apos; + interval &apos;1&apos; year group by l_shipmode order by l_shipmode;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G9 - Q13" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_count, count(*) as custdist from ( select c_custkey, count(o_orderkey) from customer left outer join orders on c_custkey = o_custkey and o_comment not like &apos;%pending%accounts%&apos; where c_tenant_id = 1008 group by c_custkey ) as c_orders (c_custkey, c_count) group by c_count order by custdist desc, c_count desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G9 - Q14" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select 100.00 * sum(case when p_type like &apos;PROMO%&apos; then l_extendedprice * (1 - l_discount) else 0 end) / sum(l_extendedprice * (1 - l_discount)) as promo_revenue from lineitem, part where l_tenant_id = 1008 and p_tenant_id = 1008 and l_partkey = p_partkey and l_shipdate &gt;= date &apos;1995-12-01&apos; and l_shipdate &lt; date &apos;1995-12-01&apos; + interval &apos;1&apos; month;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G9 - Q15" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Callable Statement</stringProp>
            <stringProp name="query">create view revenue0 (supplier_no, total_revenue) as select l_suppkey, sum(l_extendedprice * (1 - l_discount)) from lineitem where l_tenant_id = 1008 and l_shipdate &gt;= date &apos;1997-02-01&apos; and l_shipdate &lt; date &apos;1997-02-01&apos; + interval &apos;3&apos; month group by l_suppkey; select s_suppkey, s_name, s_address, s_phone, total_revenue from supplier, revenue0 where s_tenant_id = 1008 and s_suppkey = supplier_no and total_revenue = ( select max(total_revenue) from revenue0 ) order by s_suppkey; drop view revenue0;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G9 - Q16" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select p_brand, p_type, p_size, count(distinct ps_suppkey) as supplier_cnt from partsupp, part where ps_tenant_id = 1008 and p_tenant_id = 1008 and p_partkey = ps_partkey and p_brand &lt;&gt; &apos;Brand#52&apos; and p_type not like &apos;LARGE BRUSHED%&apos; and p_size in (20, 35, 34, 50, 23, 28, 48, 17) and ps_suppkey not in ( select s_suppkey from supplier where s_tenant_id = 1008 and s_comment like &apos;%Customer%Complaints%&apos; ) group by p_brand, p_type, p_size order by supplier_cnt desc, p_brand, p_type, p_size;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G9 - Q18" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice, sum(l_quantity) from customer, orders, lineitem where c_tenant_id = 1008 and o_tenant_id = 1008 and l_tenant_id = 1008 and o_orderkey in ( select l_orderkey from lineitem where l_tenant_id = 1008 group by l_orderkey having sum(l_quantity) &gt; 314 ) and c_custkey = o_custkey and o_orderkey = l_orderkey group by c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice order by o_totalprice desc, o_orderdate limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G9 - Q19" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select sum(l_extendedprice* (1 - l_discount)) as revenue from lineitem, part where l_tenant_id = 1008 and p_tenant_id = 1008 and (( p_partkey = l_partkey and p_brand = &apos;Brand#24&apos; and p_container in (&apos;SM CasE&apos;, &apos;SM BOX&apos;, &apos;SM PACK&apos;, &apos;SM PKG&apos;) and l_quantity &gt;= 10 and l_quantity &lt;= 10 + 10 and p_size between 1 and 5 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ) or ( p_partkey = l_partkey and p_brand = &apos;Brand#45&apos; and p_container in (&apos;MED BAG&apos;, &apos;MED BOX&apos;, &apos;MED PKG&apos;, &apos;MED PACK&apos;) and l_quantity &gt;= 12 and l_quantity &lt;= 12 + 10 and p_size between 1 and 10 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ) or ( p_partkey = l_partkey and p_brand = &apos;Brand#33&apos; and p_container in (&apos;LG CasE&apos;, &apos;LG BOX&apos;, &apos;LG PACK&apos;, &apos;LG PKG&apos;) and l_quantity &gt;= 30 and l_quantity &lt;= 30 + 10 and p_size between 1 and 15 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ));
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G9 - Q21" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select s_name, count(*) as numwait from supplier, lineitem l1, orders, nation where s_tenant_id = 1008 and l1.l_tenant_id = 1008 and o_tenant_id = 1008 and s_suppkey = l1.l_suppkey and o_orderkey = l1.l_orderkey and o_orderstatus = &apos;F&apos; and l1.l_receiptdate &gt; l1.l_commitdate and exists ( select * from lineitem l2 where l2.l_tenant_id = 1008 and l2.l_orderkey = l1.l_orderkey and l2.l_suppkey &lt;&gt; l1.l_suppkey ) and not exists ( select * from lineitem l3 where l3.l_tenant_id = 1008 and l3.l_orderkey = l1.l_orderkey and l3.l_suppkey &lt;&gt; l1.l_suppkey and l3.l_receiptdate &gt; l3.l_commitdate ) and s_nationkey = n_nationkey and n_name = &apos;MOZAMBIQUE&apos; group by s_name order by numwait desc, s_name limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G9 - Q22" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select cntrycode, count(*) as numcust, sum(c_acctbal) as totacctbal from ( select substring(c_phone from 1 for 2) as cntrycode, c_acctbal from customer where c_tenant_id = 1008 and substring(c_phone from 1 for 2) in (&apos;34&apos;, &apos;20&apos;, &apos;23&apos;, &apos;33&apos;, &apos;18&apos;, &apos;10&apos;, &apos;30&apos;) and c_acctbal &gt; ( select avg(c_acctbal) from customer where c_tenant_id = 1008 and c_acctbal &gt; 0.00 and substring(c_phone from 1 for 2) in (&apos;34&apos;, &apos;20&apos;, &apos;23&apos;, &apos;33&apos;, &apos;18&apos;, &apos;10&apos;, &apos;30&apos;) ) and not exists ( select * from orders where o_tenant_id = 1008 and o_custkey = c_custkey ) ) as custsale group by cntrycode order by cntrycode;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G9 - RF1" enabled="false">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO region (r_regionkey, r_name, r_comment) VALUES (123476241, &apos;AFRICA&apos;, &apos;lar deposits. blithely final packages cajole. regular&apos;);
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G9 - RF2" enabled="false">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">DELETE FROM region WHERE r_regionkey = 123476241;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="G10" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <RandomOrderController guiclass="RandomOrderControllerGui" testclass="RandomOrderController" testname="Random Order Controller" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G10 - Q1" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="query">select l_returnflag, l_linestatus, sum(l_quantity) as sum_qty, sum(l_extendedprice) as sum_base_price, sum(l_extendedprice * (1 - l_discount)) as sum_disc_price, sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge, avg(l_quantity) as avg_qty, avg(l_extendedprice) as avg_price, avg(l_discount) as avg_disc, count(*) as count_order from lineitem where l_tenant_id = 1009 and l_shipdate &lt;= date &apos;1998-12-01&apos; - interval &apos;61&apos; day group by l_returnflag, l_linestatus order by l_returnflag, l_linestatus;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G10 - Q2" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select s_acctbal, s_name, n_name, p_partkey, p_mfgr, s_address, s_phone, s_comment from part, supplier, partsupp, nation, region where p_tenant_id = 1009 and s_tenant_id = 1009 and ps_tenant_id = 1009 and p_partkey = ps_partkey and s_suppkey = ps_suppkey and p_size = 14 and p_type like &apos;%BRASS&apos; and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; and ps_supplycost = ( select min(ps_supplycost) from partsupp, supplier, nation, region where ps_tenant_id = 1009 and s_tenant_id = 1009 and p_partkey = ps_partkey and s_suppkey = ps_suppkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; ) order by s_acctbal desc, n_name, s_name, p_partkey limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G10 - Q3" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select l_orderkey, sum(l_extendedprice * (1 - l_discount)) as revenue, o_orderdate, o_shippriority from customer, orders, lineitem where c_tenant_id = 1009 and o_tenant_id = 1009 and l_tenant_id = 1009 and c_mktsegment = &apos;BUILDING&apos; and c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate &lt; date &apos;1995-03-06&apos; and l_shipdate &gt; date &apos;1995-03-06&apos; group by l_orderkey, o_orderdate, o_shippriority order by revenue desc, o_orderdate limit 10;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G10 - Q4" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select o_orderpriority, count(*) as order_count from orders where o_tenant_id = 1009 and o_orderdate &gt;= date &apos;1993-12-01&apos; and o_orderdate &lt; date &apos;1993-12-01&apos; + interval &apos;3&apos; month and exists ( select * from lineitem where l_tenant_id = 1009 and l_orderkey = o_orderkey and l_commitdate &lt; l_receiptdate ) group by o_orderpriority order by o_orderpriority;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G10 - Q5" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select n_name, sum(l_extendedprice * (1 - l_discount)) as revenue from customer, orders, lineitem, supplier, nation, region where c_tenant_id = 1009 and o_tenant_id = 1009 and l_tenant_id = 1009 and s_tenant_id = 1009 and c_custkey = o_custkey and l_orderkey = o_orderkey and l_suppkey = s_suppkey and c_nationkey = s_nationkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = &apos;AFRICA&apos; and o_orderdate &gt;= date &apos;1994-01-01&apos; and o_orderdate &lt; date &apos;1994-01-01&apos; + interval &apos;1&apos; year group by n_name order by revenue desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G10 - Q6" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select sum(l_extendedprice * l_discount) as revenue from lineitem where l_tenant_id = 1009 and l_shipdate &gt;= date &apos;1994-01-01&apos; and l_shipdate &lt; date &apos;1994-01-01&apos; + interval &apos;1&apos; year and l_discount between 0.09 - 0.01 and 0.09 + 0.01 and l_quantity &lt; 25;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G10 - Q7" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select supp_nation, cust_nation, l_year, sum(volume) as revenue from ( select n1.n_name as supp_nation, n2.n_name as cust_nation, extract(year from l_shipdate) as l_year, l_extendedprice * (1 - l_discount) as volume from supplier, lineitem, orders, customer, nation n1, nation n2 where s_tenant_id = 1009 and l_tenant_id = 1009 and o_tenant_id = 1009 and c_tenant_id = 1009 and s_suppkey = l_suppkey and o_orderkey = l_orderkey and c_custkey = o_custkey and s_nationkey = n1.n_nationkey and c_nationkey = n2.n_nationkey and ( (n1.n_name = &apos;RUSSIA&apos; and n2.n_name = &apos;ROMANIA&apos;) or (n1.n_name = &apos;ROMANIA&apos; and n2.n_name = &apos;RUSSIA&apos;) ) and l_shipdate between date &apos;1995-01-01&apos; and date &apos;1996-12-31&apos; ) as shipping group by supp_nation, cust_nation, l_year order by supp_nation, cust_nation, l_year;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G10 - Q8" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select o_year, sum(case when nation = &apos;ROMANIA&apos; then volume else 0 end) / sum(volume) as mkt_share from ( select extract(year from o_orderdate) as o_year, l_extendedprice * (1 - l_discount) as volume, n2.n_name as nation from part, supplier, lineitem, orders, customer, nation n1, nation n2, region where p_tenant_id = 1009 and s_tenant_id = 1009 and l_tenant_id = 1009 and o_tenant_id = 1009 and c_tenant_id = 1009 and p_partkey = l_partkey and s_suppkey = l_suppkey and l_orderkey = o_orderkey and o_custkey = c_custkey and c_nationkey = n1.n_nationkey and n1.n_regionkey = r_regionkey and r_name = &apos;EUROPE&apos; and s_nationkey = n2.n_nationkey and o_orderdate between date &apos;1995-01-01&apos; and date &apos;1996-12-31&apos; and p_type = &apos;PROMO ANODIZED TIN&apos; ) as all_nations group by o_year order by o_year;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G10 - Q9" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select nation, o_year, sum(amount) as sum_profit from ( select n_name as nation, extract(year from o_orderdate) as o_year, l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity as amount from part, supplier, lineitem, partsupp, orders, nation where p_tenant_id = 1009 and s_tenant_id = 1009 and l_tenant_id = 1009 and ps_tenant_id = 1009 and o_tenant_id = 1009 and s_suppkey = l_suppkey and ps_suppkey = l_suppkey and ps_partkey = l_partkey and p_partkey = l_partkey and o_orderkey = l_orderkey and s_nationkey = n_nationkey and p_name like &apos;%sienna%&apos; ) as profit group by nation, o_year order by nation, o_year desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G10 - Q10" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_custkey, c_name, sum(l_extendedprice * (1 - l_discount)) as revenue, c_acctbal, n_name, c_address, c_phone, c_comment from customer, orders, lineitem, nation where c_tenant_id = 1009 and o_tenant_id = 1009 and l_tenant_id = 1009 and c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate &gt;= date &apos;1993-04-01&apos; and o_orderdate &lt; date &apos;1993-04-01&apos; + interval &apos;3&apos; month and l_returnflag = &apos;R&apos; and c_nationkey = n_nationkey group by c_custkey, c_name, c_acctbal, c_phone, n_name, c_address, c_comment order by revenue desc limit 20;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G10 - Q11" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select ps_partkey, sum(ps_supplycost * ps_availqty) as value from partsupp, supplier, nation where ps_tenant_id = 1009 and s_tenant_id = 1009 and ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = &apos;INDONESIA&apos; group by ps_partkey having sum(ps_supplycost * ps_availqty) &gt; ( select sum(ps_supplycost * ps_availqty) * 0.0000090909 from partsupp, supplier, nation where ps_tenant_id = 1009 and s_tenant_id = 1009 and ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = &apos;INDONESIA&apos; ) order by value desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G10 - Q12" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select l_shipmode, sum(case when o_orderpriority = &apos;1-URGENT&apos; or o_orderpriority = &apos;2-HIGH&apos; then 1 else 0 end) as high_line_count, sum(case when o_orderpriority &lt;&gt; &apos;1-URGENT&apos; and o_orderpriority &lt;&gt; &apos;2-HIGH&apos; then 1 else 0 end) as low_line_count from orders, lineitem where o_tenant_id = 1009 and l_tenant_id = 1009 and o_orderkey = l_orderkey and l_shipmode in (&apos;RAIL&apos;, &apos;TRUCK&apos;) and l_commitdate &lt; l_receiptdate and l_shipdate &lt; l_commitdate and l_receiptdate &gt;= date &apos;1995-01-01&apos; and l_receiptdate &lt; date &apos;1995-01-01&apos; + interval &apos;1&apos; year group by l_shipmode order by l_shipmode;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G10 - Q13" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_count, count(*) as custdist from ( select c_custkey, count(o_orderkey) from customer left outer join orders on c_custkey = o_custkey and o_comment not like &apos;%pending%accounts%&apos; where c_tenant_id = 1009 group by c_custkey ) as c_orders (c_custkey, c_count) group by c_count order by custdist desc, c_count desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G10 - Q14" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select 100.00 * sum(case when p_type like &apos;PROMO%&apos; then l_extendedprice * (1 - l_discount) else 0 end) / sum(l_extendedprice * (1 - l_discount)) as promo_revenue from lineitem, part where l_tenant_id = 1009 and p_tenant_id = 1009 and l_partkey = p_partkey and l_shipdate &gt;= date &apos;1995-12-01&apos; and l_shipdate &lt; date &apos;1995-12-01&apos; + interval &apos;1&apos; month;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G10 - Q15" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Callable Statement</stringProp>
            <stringProp name="query">create view revenue0 (supplier_no, total_revenue) as select l_suppkey, sum(l_extendedprice * (1 - l_discount)) from lineitem where l_tenant_id = 1009 and l_shipdate &gt;= date &apos;1994-10-01&apos; and l_shipdate &lt; date &apos;1994-10-01&apos; + interval &apos;3&apos; month group by l_suppkey; select s_suppkey, s_name, s_address, s_phone, total_revenue from supplier, revenue0 where s_tenant_id = 1009 and s_suppkey = supplier_no and total_revenue = ( select max(total_revenue) from revenue0 ) order by s_suppkey; drop view revenue0;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G10 - Q16" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select p_brand, p_type, p_size, count(distinct ps_suppkey) as supplier_cnt from partsupp, part where ps_tenant_id = 1009 and p_tenant_id = 1009 and p_partkey = ps_partkey and p_brand &lt;&gt; &apos;Brand#52&apos; and p_type not like &apos;LARGE BRUSHED%&apos; and p_size in (20, 35, 34, 50, 23, 28, 48, 17) and ps_suppkey not in ( select s_suppkey from supplier where s_tenant_id = 1009 and s_comment like &apos;%Customer%Complaints%&apos; ) group by p_brand, p_type, p_size order by supplier_cnt desc, p_brand, p_type, p_size;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G10 - Q18" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice, sum(l_quantity) from customer, orders, lineitem where c_tenant_id = 1009 and o_tenant_id = 1009 and l_tenant_id = 1009 and o_orderkey in ( select l_orderkey from lineitem where l_tenant_id = 1009 group by l_orderkey having sum(l_quantity) &gt; 314 ) and c_custkey = o_custkey and o_orderkey = l_orderkey group by c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice order by o_totalprice desc, o_orderdate limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G10 - Q19" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select sum(l_extendedprice* (1 - l_discount)) as revenue from lineitem, part where l_tenant_id = 1009 and p_tenant_id = 1009 and (( p_partkey = l_partkey and p_brand = &apos;Brand#24&apos; and p_container in (&apos;SM CasE&apos;, &apos;SM BOX&apos;, &apos;SM PACK&apos;, &apos;SM PKG&apos;) and l_quantity &gt;= 10 and l_quantity &lt;= 10 + 10 and p_size between 1 and 5 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ) or ( p_partkey = l_partkey and p_brand = &apos;Brand#45&apos; and p_container in (&apos;MED BAG&apos;, &apos;MED BOX&apos;, &apos;MED PKG&apos;, &apos;MED PACK&apos;) and l_quantity &gt;= 12 and l_quantity &lt;= 12 + 10 and p_size between 1 and 10 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ) or ( p_partkey = l_partkey and p_brand = &apos;Brand#33&apos; and p_container in (&apos;LG CasE&apos;, &apos;LG BOX&apos;, &apos;LG PACK&apos;, &apos;LG PKG&apos;) and l_quantity &gt;= 30 and l_quantity &lt;= 30 + 10 and p_size between 1 and 15 and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;) and l_shipinstruct = &apos;DELIVER IN PERSON&apos; ));
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G10 - Q21" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select s_name, count(*) as numwait from supplier, lineitem l1, orders, nation where s_tenant_id = 1009 and l1.l_tenant_id = 1009 and o_tenant_id = 1009 and s_suppkey = l1.l_suppkey and o_orderkey = l1.l_orderkey and o_orderstatus = &apos;F&apos; and l1.l_receiptdate &gt; l1.l_commitdate and exists ( select * from lineitem l2 where l2.l_tenant_id = 1009 and l2.l_orderkey = l1.l_orderkey and l2.l_suppkey &lt;&gt; l1.l_suppkey ) and not exists ( select * from lineitem l3 where l3.l_tenant_id = 1009 and l3.l_orderkey = l1.l_orderkey and l3.l_suppkey &lt;&gt; l1.l_suppkey and l3.l_receiptdate &gt; l3.l_commitdate ) and s_nationkey = n_nationkey and n_name = &apos;MOZAMBIQUE&apos; group by s_name order by numwait desc, s_name limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G10 - Q22" enabled="true">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select cntrycode, count(*) as numcust, sum(c_acctbal) as totacctbal from ( select substring(c_phone from 1 for 2) as cntrycode, c_acctbal from customer where c_tenant_id = 1009 and substring(c_phone from 1 for 2) in (&apos;34&apos;, &apos;20&apos;, &apos;23&apos;, &apos;33&apos;, &apos;18&apos;, &apos;10&apos;, &apos;30&apos;) and c_acctbal &gt; ( select avg(c_acctbal) from customer where c_tenant_id = 1009 and c_acctbal &gt; 0.00 and substring(c_phone from 1 for 2) in (&apos;34&apos;, &apos;20&apos;, &apos;23&apos;, &apos;33&apos;, &apos;18&apos;, &apos;10&apos;, &apos;30&apos;) ) and not exists ( select * from orders where o_tenant_id = 1009 and o_custkey = c_custkey ) ) as custsale group by cntrycode order by cntrycode;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G10 - RF1" enabled="false">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO region (r_regionkey, r_name, r_comment) VALUES (123476241, &apos;AFRICA&apos;, &apos;lar deposits. blithely final packages cajole. regular&apos;);
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="G10 - RF2" enabled="false">
            <stringProp name="dataSource">Throughput-test-1</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">DELETE FROM region WHERE r_regionkey = 123476241;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
